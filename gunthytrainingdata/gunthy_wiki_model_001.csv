titles, urls,content
Purchasing Gunbot, https://gunthy.org/resellers,You need to enable JavaScript to run this app.
Charts & results, https://wiki.gunthy.org/how-to-work-with-gunbot/chart-results,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Charts & results On this page Chart & results Monitoring and evaluating your trades is an important aspect of bot trading. Gunbot makes it easy to visualize the trades it makes, this will help you to keep improving your trading strategies. Charts ​ The built in charts uses the same candle data as the bot core works with. Indicators are calculated using the TradingView library. Charts go as far back as the exchange API returns candles to your bot. Trades and relevant strategy targets are automatically drawn on the chart, like for example the avg. entry price of a position, the exit point or dca target. Some target lines are movable, you can use these to visually change the target of your strategy. After dragging a target you'll see that the ""save changes"" button appears, the new target applies after saving. The  Overview  and  Markets  sidebars let you quickly navigate between pairs, do manual trades or edit pair specific settings. Dashboard ​ Get a quick overview of your active trading pairs on the dashboard. Each exchange gets their own dashboard. If you have multiple exchanges running simultaneously there are also grouped dashboards for all spot and margin pairs. Profit and loss ​ Go to  PNL analysis  on the dashboard to get detailed statistics about all active trading pairs. Previous Trading settings Next About Gunbot strategies Charts Dashboard Profit and loss Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Alerts, https://wiki.gunthy.org/how-to-work-with-gunbot/extra-modules/alerts,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules AutoConfig Backtesting add-on Code editor Tradingview add-on IMAP listener Alerts Tradingview webhooks Various Troubleshooting Config marketplace Extra modules Alerts Alerts (beta) danger Alerts are in beta and not officially supported yet. If you want to try using alerts, make sure to keep the chart open at all times because for now there is no background service running the alerts. Example of creating an alert that would execute a buy order. Previous IMAP listener Next Tradingview webhooks Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Backtesting add-on, https://wiki.gunthy.org/how-to-work-with-gunbot/extra-modules/backtesting,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules AutoConfig Backtesting add-on Code editor Tradingview add-on IMAP listener Alerts Tradingview webhooks Various Troubleshooting Config marketplace Extra modules Backtesting add-on On this page Backtesting tip This is a paid add-on that works for Bitfinex, Binance, Bitmex, Bittrex, CEX, CoinBase Pro, Kraken and Poloniex. The Gunbot backtesting add-on is a simulation of Gunbot running inside a free or paid TradingView account. The indicator on TradingView is called Gunbot Deluxe Tuners BE (Black Edition). This add-on is included with Gunbot Pro Edition or Gunbot Ultimate Edition purchased AFTER release of Gunbot version 10. If you purchased one of these editions and did not receive this add-on please contact your reseller. You will need to provide your reseller with your TradingView profile name at time of purchase. Advantages ​ Save time and learn Gunbot quickly by visually seeing how Gunbot's settings and strategies work. Optimize your settings for Gunbot through simulated backtesting on TradingView without risking your capital. Trade on alerts sent from the same tuned and backtested strategies at TradingView with the TradingView add-on. For learning, backtesting, and optimizing Gunbot with the simulated strategies script you will need either a free or paid TradingView account. If you wish to trade directly from the included alerts script you will also need the TradingView add-on and a paid TradingView account. With the Gunbot TradingView add-on you can trade on alerts sent from custom strategies at Tradingview, completely managing your strategy at Tradingview. Gunbot receives trade signals by e-mail and trades accordingly. Disclaimer While every effort has been made to ensure these simulations of Gunbot contain the same logic as Gunbot, they will not always buy or sell at the exact same time or prices as Gunbot (because of TradingView's inability to use ticker prices). This is close as you can get in TradingView to the real thing. Backtesting the past does NOT guarantee profit in the present or future. Emotionless, Double Up, Reversal Trading, UTA, spotgrid (and similar) and tsa are not included due to limitations in TradingView. Getting started ​ Once you have purchased and provided your reseller with your TradingView profile name you will receive notification when your access has been granted and you may begin using in TradingView. Login to your TradingView account and click the Chart button. The scripts are best viewed in Dark theme. Enter the Pair and the Period you wish to use and then click Indicators. Do a search for ""Tuners"" and then click to load ""Gunbot Deluxe Tuners BE"" and ""Gunbot Tuners Companion"", you will only need these 2 for now. Later on you can return and load ""Gunbot Deluxe Tuners BE  [Alerts] "" if you wish to send trade signals to Gunbot. Now that you have the Tuner scripts loaded click the Strategy Tester to open it's pane. Drag the top of the Strategy Tester pane to where you can see Net Profit and Buy & Hold Return. Click the Gear icon to enter your Gunbot settings. Enter your Exchange's TRADING_FEES in the  [Properties]  Tab and then the  [Inputs]  Tab. Drag this window to where you can also see the Strategy Tester pane stats. Now you are ready to begin adjusting settings in the  [Inputs]  window while watching Net Profit (red is loss) to see how this affects your returns. Once you have settings that you are satisfied with, record them to be entered into the real Gunbot when you are ready to begin trading that pair. To see the ""console"" readings open the Data Window and hover mouse over a candle, this can be useful for troubleshooting and will also allow you to see the color coding of the plots (inactive are blue). The ""Gunbot Tuners Companion"" script is used for visually tuning the indicators which cannot be shown on the main chart window. It has it's own Gear icon where you will change it's settings. Once you have visually satisfactory settings, enter those same settings into the ""Gunbot Deluxe Tuners BE"" script settings to see how they perform. There are a few non-Gunbot variables that are also present in the scripts: ""BTC_PND Exchange = "" should be set to the Exchange of the pair you are testing if you are using BTC_PND_PROTECTION. PricesA / PricesB sets percentage range of candle prices that are read. You may also choose to use candle sources instead. Only this portion of the candle will register when crossing indicators or levels. There is a plot in gray on top of the candles that represents this area.   |   High= 100 |   | |   | PricesA = 0-100 |   | |   | PricesB = 0-100 |   |   |   Low = 0 Default range settings of 50 / 50 is equal to source settings of HL2 / HL2 for Prices. TradingView scripts trade on the OPEN price of the NEXT candle AFTER conditions have been met. The green ""LONG!"" or ""CLOSE SHORT!"" and red ""SHORT!"" or ""CLOSE LONG!"" indicate the candle where the decision to trade was made, the blue, red, and purple markers indicate where the trade was made. When using the ""Gunbot Deluxe Tuners BE  [Alerts] "" script the green ""LONG!"" or ""CLOSE SHORT!"" and red ""SHORT!"" or ""CLOSE LONG!"" indicate on screen where the alerts will trigger and send to Gunbot's TradingView add-on. FAQ ​ Why don't I see the fields for Double Up or Reversal Trading? ​ Because Double Up and Reversal Trading is not supported (as stated in Disclaimer above). Why can't I change the PERIOD from Auto? ​ Because you don't need to, the script reads the PERIOD from whatever you set in the chart. How do I link the Tuner to Gunbot? ​ Currently there is not a way to export settings directly from Pine scripts to Gunbot. So once you find the best settings you have to copy and paste them one at a time into your config in Gunbot (or open GUI / config.js beside TV script settings so you can see them to enter). What settings should I use in the Format: Properties Tab? ​ Do NOT change any of these settings EXCEPT for Commission. Why am I not seeing any trades? ​ Because the pair is likely bagged up to the left of your screen. Temporarily lower the STOP_LIMIT to a small value like 5 or scroll left to see. Other reasons may be that you have levels too conservative for that pair so no trade is ever made.  Temporarily lower BUY_LEVEL, LONG_LEVEL, and SHORT_LEVEL to 0.1 to see. Why did it not trade where I think it should? ​ Please refer to the Data Window while hovering over the candle in question to troubleshoot and answer. How far back can I test? ​ This depends on the PERIOD you have set, the lower the PERIOD, the less amount of time can be backtested. There is a 2000 order limit in Pine. Free TradingView accounts provide 5000 candles of history and paid accounts provide 10000. Which browser should I use? ​ Chrome, Edge, Safari browsers seems to work the best with TradingView, Internet Explorer and FireFox do not work as well with TradingView. Can I use Heikin Ashi or other types of candles? ​ No, the Tuner scripts only use regular style ""Candles"". Some of the other types will run and give results but they will not be accurate. Why has my Tuner stopped working? ​ If you encounter strange behavior first try zooming in or out, or refreshing the browser. If this does not solve then delete the indicator, refresh the browser page, and reload the indicator. That didn't fix it, now what? ​ If you continue to have issues: Format - >  Inputs - >  Defaults (lower left) - >  Reset Settings then remove the indicator, refresh browser, and reload it. Still not working or I have a different question, so now what? ​ Contact  @allanster  on Telegram. Previous AutoConfig Next Code editor Advantages Getting started FAQ Why don't I see the fields for Double Up or Reversal Trading? Why can't I change the PERIOD from Auto? How do I link the Tuner to Gunbot? What settings should I use in the Format: Properties Tab? Why am I not seeing any trades? Why did it not trade where I think it should? How far back can I test? Which browser should I use? Can I use Heikin Ashi or other types of candles? Why has my Tuner stopped working? That didn't fix it, now what? Still not working or I have a different question, so now what? Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Code editor, https://wiki.gunthy.org/how-to-work-with-gunbot/extra-modules/code-editor,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules AutoConfig Backtesting add-on Code editor Tradingview add-on IMAP listener Alerts Tradingview webhooks Various Troubleshooting Config marketplace Extra modules Code editor On this page Code editor Edit Gunbot config files, view internal data and work on custom strategies right in the Gunbot interface. Unless you prefer working with config files or JavaScript code, you will never need this editor. 
 If you do prefer config files, this editor allows you to configure everything you would normally do with an external text editor, and makes sure you don't save any invalid JSON to your configs. Supported files ​ Currently the following file types are supported: Type Description config.js Main config file. Read and write support. autoconfig.json Used to define AutoConfig jobs. Read and write support. Editor has templates for all job and filter types, as autocomplete suggestions. pair state files Internal data. Read only. custom strategies Custom JavaScript strategies, saved in the  /customStrategies  folder. Read and write support. Editor has autocomplete suggestions for all Gunbot specific methods and data. config backups Backups of  config.js  and  autoconfig.json . Read only. Each time a config changed is done though the GUI, a config backup of the previous state is saved. You can view every past revision. Code suggestions ​ The editor has autocomplete suggestions to assist in writing valid autoconfig jobs, and to have easy access to custom strategy methods and data point. Previous Backtesting add-on Next Tradingview add-on Supported files Code suggestions Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
IMAP listener, https://wiki.gunthy.org/how-to-work-with-gunbot/extra-modules/imap-listener,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules AutoConfig Backtesting add-on Code editor Tradingview add-on IMAP listener Alerts Tradingview webhooks Various Troubleshooting Config marketplace Extra modules IMAP listener On this page IMAP listener tip The IMAP listener settings are only needed when you use the TradingView add-on to let Gunbot execute email alerts. Using these settings, Gunbot connects to the email address where alerts are sent to. To change them, go to  ⋮ > TradingView Alerts > Email listener Tips for Gmail users use an  app password   Settings descriptions ​ Below you'll find detailed descriptions of all available parameters for the IMAP listener. Enabled (IMAP listener) ​ Set this to true to enable the TradingView plugin. Not all license types support this option. Values:  true or false Default value:  false Parameter name in  config.js :  enabled Authorized froms ​ Sets the email addresses that should be processed for incoming alerts. Make sure that the alert message in contained in the email subject. Multiple address are possible if you enter them like this: ["" email-1@mail.com "","" email-2@mail.com "" ] Values:  string, represents one or more email addresses Default value:  ["" noreply@tradingview.com "" ] Parameter name in  config.js :  authorized_froms User ​ Set the username for the IMAP server, usually your own email address. Gunbot will listen for incoming alerts on this address. Values:  string, represents a username Default value:  YOUREMAIL Parameter name in  config.js :  user Password ​ Enter the password for your own email address, used for connecting to the IMAP server. Values:  string, represents a password Default value:  YOURPASSWORD Parameter name in  config.js :  password Host ​ The address of the IMAP server that the listener needs to connect to. Values:  string, represents a hostname Default value:  imap.gmail.com Parameter name in  config.js :  host Port (IMAP) ​ Defines the port number for the IMAP server. Values:  number, represents a port number Default value:  993 Parameter name in  config.js :  port TLS ​ Defines if TLS encryption is used for the IMAP connection. Values:  true or false Default value:  true Parameter name in  config.js :  tls rejectUnauthorized ​ Enable this to allow connections to IMAP servers using a certificate unknown to certificate authorities. Values:  true or false Default value:  false Parameter name in  config.js :  rejectUnauthorized  (child of  tlsOptions ) Previous Tradingview add-on Next Alerts Settings descriptions Enabled (IMAP listener) Authorized froms User Password Host Port (IMAP) TLS rejectUnauthorized Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Tradingview add-on, https://wiki.gunthy.org/how-to-work-with-gunbot/extra-modules/tradingview-alerts,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules AutoConfig Backtesting add-on Code editor Tradingview add-on IMAP listener Alerts Tradingview webhooks Various Troubleshooting Config marketplace Extra modules Tradingview add-on On this page TradingView Alerts With the Gunbot TradingView add-on you can execute trading alerts sent from custom strategies at Tradingview, completely managing your strategy at TradingView. Gunbot receives trade signals by e-mail and trades accordingly. This add-on can also be used for executing trades from arbitrary email alerts, TradingView is not strictly required. tip This is a paid add-on, availability depends on your license type. Initial setup ​ Before you start setting up your alerts, you need: The IMAP data for the email address you receive alerts from TradingView on. A Pro subscription at tradingview.com (works with trial too). Free accounts are limited to one alert. Alert message contents ​ The alerts have to be in the following format in order for Gunbot to act on them. Alerts follow the same standardized pair syntax that also apply for normal Gunbot usage, the alert text must be in the subject line of an email. Trading limits can only be specifically defined in buy/long alerts, for other alerts or alerts without specified amounts, the limits as set in your TradingView settings apply. It's recommended to enabled the ""email-to-SMS"" option on tradingview.com, which sends a plain text email instead of an html formatted message. Replace   EXCHANGE   with the name of your exchange. For spot exchanges ​ Alert message Action BUY_EXCHANGE_BTC-ETH Buy ETH using BTC BUY_EXCHANGE_BTC-ETH_0.1 Buy ETH using BTC with a trading limit of 0.1 BTC SELL_EXCHANGE_USDT-BTC Sell BTC for USDT Normal situation: full balance is sold When using TV_PYRAMID,  the amount is defined by TV_TRADING_LIMIT_SELL When using MULTIPLE BASE,  the amount is the same as the last buy order made by the bot on the same trading pair STOPLOSS_EXCHANGE_BTC-ETH Sell ETH for BTC if stoploss is triggered BUY_EXCHANGE_USDT-BTC_amount_rate Buy BTC using USDT for a specified amount in USDT at a specified rate. Requires TV market orders to be disabled BUY_EXCHANGE_BTC-ETH_0_rate Buy ETH using BTC for ""TV trading limit buy"", at a specified rate. Requires TV market orders to be disabled. For futures / margin exchanges ​ Alert message Action LONG_EXCHANGE_XBT-USD Long order for XBT-USD SHORT_EXCHANGE_XBT-USD_amount Short order for XBT-USD with a specified trading limit LONG_EXCHANGE_XBT-USD_amount Long order for XBT-USD with a specified trading limit LONG_EXCHANGE_XBT-USD_amount_rate Long order for XBT-USD with a specified trading limit and rate. Requires TV market orders to be disabled. SHORT_EXCHANGE_XBT-USD_0_rate Short order for XBT-USD without a specified trading limit and with a specified rate. Requires TV market orders to be disabled. CLOSE_EXCHANGE_USDT-LTC Close a margin position  (made for bitmex, not supported on every exchange) CLOSELONG_EXCHANGE_XBT-USD Close a long position  (made for bitmex, not supported on every exchange) CLOSESHORT_EXCHANGE_XBT-USD Close a short position  (made for bitmex, not supported on every exchange) tip Orders in the opposite direction of a position can be used to (partially) close positions Want to flip between long and short? Open one position manually, then send long and short alerts at 2x that position size to keep flipping from long to short or vice versa. Note about trading limits ​ On futures exchanges settings related to trading limits for margin trading should be specified in contracts. On binanceFutures amounts are specified in quote: on USDT-BTC a trading limit of 1 represents 1 BTC order value. On all other supported margin exchanges, every setting related to margin trading limits must be specified in amounts of quote currency. tip To test alerts on Bitmex Testnet, you should write the alerts like this: LONG_BITMEXTESTNET_XBT-USD Change strategy by alert ​ You can use alerts to change the strategy of any valid pair that's already in your config. This alert type can also be used to (indirectly) add pairs to Gunbot,  using an AutoConfig job . Alert message Action STRAT_BITMEX_XBT-USD_yourstratname Assigns strategy  yourstratname  to XBT-USD TradingView settings ​ To run Gunbot with the TradingView add-on, the following are the only relevant settings. Normal Gunbot strategy and pair settings are not relevant and not used unless  TV_GB  is enabled. Open the settings by going to  ⋮   >   TradingView Alerts  >  Alert execution Trading limits for buy orders are set in the configuration settings, optionally you can override these by specifying the trading limit in the alert message contents. Orders placed by the TradingView add-on are placed by default as market orders to ensure they will get filled. Optionally, you can let it send limit orders as well. tip Be sure to add one pair for any exchange you want to execute alerts on. This can be any pair, it will not be used by the add-on. Gain ​ Set a minimum gain in % that trades initiated by TradingView must comply to when  TV_PROTECTION  is enabled. When TradingView sell alerts are sent that would have a lower gain than this value, Gunbot will not place the order. Use this to prevent selling at loss. danger Only works for spot trading. Values:  numerical, represents a percentage. Default value:  0.6 Parameter name in  config.js :  TV_GAIN Market orders ​ By default, orders are sent as market orders. When you want to send limit orders instead, disable this option. Buy orders are then sent at a limit price of the best bid order in the order book, sell orders are placed at the rate of the best ask price. Values:  true or false Default value:  true Parameter name in  config.js :  TV_MARKET_ORDERS Trading Limit Buy ​ This value defines the trading limit for each buy order placed through the add-on. The default value of 0.002 would place orders of 0.002 BTC when used on a BTC-x pair. When not using  TV_PYRAMID , a sell alert will place a sell order for the full quote balance held. tip Bitmex : enter the desired number of contracts Other margin exchanges:  enter an amount in quote currency Values:  numerical – represents an amount in base currency. Default value:  0.002 Parameter name in  config.js :  TV_TRADING_LIMIT_BUY Trading Limit Buy Pyramid ​ This value defines the trading limit for each pyramid buy order placed through the add-on. The default value of 0.002 would place orders of 0.002 BTC when used on a BTC-x pair. tip Bitmex : enter the desired number of contracts Other margin exchanges:  enter an amount in quote currency Values:  numerical – represents an amount in base currency. Default value:  0.002 Parameter name in  config.js :  TV_TRADING_LIMIT_BUY_PYRAMID Pyramid ​ Setting this to true enables pyramid trading, the amount for each pyramid order is defined by  TV_TRADING_LIMIT_SELL  or  TV_TRADING_LIMIT_BUY_PYRAMID . Values:  true or false Default value:  false Parameter name in  config.js :  TV_PYRAMID Trading Limit Sell ​ This value defines the trading limit for sell orders when  TV_PYRAMID  is enabled. The default value of 0.002 would place orders of 0.002 BTC when used on a BTC-x pair. tip Bitmex : enter the desired number of contracts Other margin exchanges:  enter an amount in quote currency Values:  numerical – represents an amount in base currency. Default value:  0.002 Parameter name in  config.js :  TV_TRADING_LIMIT_SELL Protection ​ When set to true Gunbot will check if there is an overall profit before selling, as specified in  TV_GAIN . When set to false, Gunbot will execute all TradingView alerts without interfering with a custom strategy. tip Only works for spot trading. Values:  true or false Default value:  false Parameter name in  config.js :  TV_PROTECTION Close all ​ When enabled, an entire position will be closed upon receiving a close command - even if the position is bigger than the set trading limits. tip Only works for margin trading. Values:  numerical – represents an amount in base currency. Default value:  false Parameter name in  config.js :  TV_CLOSE_ALL Trading Limit Cap ​ The maximum amount of base currency to be invested in a pair. tip Only works for spot trading Values:  numerical – represents an amount in base currency. Default value:  0.0001 Parameter name in  config.js :  TV_TRADING_LIMIT_CAP Stoploss Percentage ​ Percentage below average bought price at which a sell signal should override  TV_PROTECTION  and sell in a stop-loss manner. Values:  numerical – represents a percentage. Default value:  60 Parameter name in  config.js :  TV_STOPLOSS_PERCENTAGE Trading Limit All-In ​ When set to true, each buy order will use all available base currency balance. Values:  true or false Default value:  false Parameter name in  config.js :  TV_TRADING_LIMIT_ALLIN Retry Order ​ Enable this when you have problems receiving multiple alerts. Gunbot will retry processing orders for 15 minutes. Values:  true or false Default value:  false Parameter name in  config.js :  RETRY_TV_ORDER TV MVTS ​ Sets a threshold for sell orders, If you own less than the set amount, sell orders will not be placed and the bot goes into buying mode again. Values:  numerical – represents the total value of a coins holdings in base currency. Default value:  0.001 Parameter name in  config.js :  TV_MVTS TV GB ​ Enable this to run Gunbot strategies simultaneously with the TradingView add-on. This way buying and selling with Gunbot strategies or TradingView alerts can be mixed. The IMAP listener needs to be enabled to use this option. Values:  true or false Default value:  false Parameter name in  config.js :  TV_GB TV Leverage ​ For margin trading only. Sets the leverage for opening any position. Setting 0 places the order with cross margin, if your exchange supports cross leverage. Only use values supported by your exchange. tip On some exchanges it may be needed to manually set leverage on the exchange itself. Always test if this works as expected. Values:  numerical – between 0 and 100 Default value:  0 Parameter name in  config.js :  TV_LEVERAGE TV Lending ​ Sets the maximum acceptable lending rate when opening a position. The default setting of 0.02 stands for 2% interest per day. tip Only works on Poloniex. Values:  numerical Default value:  0.02 Parameter name in  config.js :  TV_LENDING Previous Code editor Next IMAP listener Initial setup Alert message contents TradingView settings Gain Market orders Trading Limit Buy Trading Limit Buy Pyramid Pyramid Trading Limit Sell Protection Close all Trading Limit Cap Stoploss Percentage Trading Limit All-In Retry Order TV MVTS TV GB TV Leverage TV Lending Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Tradingview webhooks, https://wiki.gunthy.org/how-to-work-with-gunbot/extra-modules/tradingview-webhooks,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules AutoConfig Backtesting add-on Code editor Tradingview add-on IMAP listener Alerts Tradingview webhooks Various Troubleshooting Config marketplace Extra modules Tradingview webhooks On this page TradingView webhooks (experimental) In active development This feature is part of the TradingView add-on, availability depends on your license type. It is currently considered experimental and will reach a more complete status soon. Using webhooks, alerts from TradingView.com can be sent directly to a Gunbot instance. You need to be able to run Gunbot on a device that is publicly accessible on port 443. Initial setup ​ Before you start setting up your alerts, you need to: Make sure your system has LibreSSL installed, this will generate the needed certificate  Make sure your device is publicly accessible on port 443, the only port allowed by TradingView Enable webhooks support in Gunbot on the TradingView settings page and set a self chosen passphrase to use in alerts, to ensure it is you who sends the alerts that the bot will execute Like with TradingView alerts in email mode, make sure to add one valid pair to Gunbot for each exchange you'll receive alerts on. This pair will not get actively traded unless you send alerts for it.  Alert message contents ​ The alerts have to be in the following format in order for Gunbot to act on them:
 passphrase exchange order_type pair amount price Alerts follow the same standardized pair syntax that also apply for normal Gunbot usage, the alert text must be in the subject line of an email. Limit order alert examples ​ spot: 123456 binance buy USDT-BTC 0.1 42553.4 123456 binance sell USDT-BTC 0.1 42553.4 futures: 123456 binanceFutures long USDT-BTC 0.1 42553.4 123456 binanceFutures short USDT-BTC -0.1 42553.4 123456 binanceFutures close USDT-BTC 0.1 42553.4 123456 binanceFutures close USDT-BTC -0.1 42553.4 Market order alert examples ​ spot: 123456 binance buy USDT-BTC 0.1 0 123456 binance sell USDT-BTC 0.1 0 futures: 123456 binanceFutures long USDT-BTC 0.1 0 123456 binanceFutures short USDT-BTC -0.1 0 123456 binanceFutures close USDT-BTC 0.1 0 123456 binanceFutures close USDT-BTC -0.1 0 Change strategy alert ​ format: passphrase exchange strat pair name_of_strategy_here 0 example: 123456 okgunbot strat ETH-AVAX superCoolDCA 0 Other settings ​ Currently a small subset of the settings available for email alerts are available for use with webhooks: TV_GB TV_PROTECTION Installing LibreSSL on Windows ​ If you get certificate related errors when enabling the webhook listener on a windows server, the following steps should resolve it. open powershell and install chocolatey by pasting this line and press enter open cmd terminal and paste this line:  choco install -confirm libressl In case errors persist, manually install LibreSSL using this method: download .dll from here  https://sourceforge.net/projects/libressl-3-2-0-for-windows/files/LibreSSL-3.3.3_MinGW_Windows7%28static%29.zip/download extract the folder in c:/libressl Previous Alerts Next Acronyms Initial setup Alert message contents Limit order alert examples Market order alert examples Change strategy alert Other settings Installing LibreSSL on Windows Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
2FA, https://wiki.gunthy.org/setup-and-general-settings/global-settings/2FA,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings 2FA 2FA Besides password security, you can optionally use two factor authentication. if you've enabled 2FA, you'll be asked to enter a one time password (generated with an authenticator app) next to your password the next time you login to the Gunbot interface. Direct link http://localhost:5000/setup tip If you lose access to your 2FA code, this authentication can be disabled in  config.js . Change the value for  twoFA  to  false . Previous Telegram notifications Next Tournament Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Connect exchange, https://wiki.gunthy.org/setup-and-general-settings/global-settings/connect-exchange,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Connect exchange On this page Connect exchange Before you start trading, you need to enter the exchange  API key  and secret, as well as the trading fees level for each exchange. Direct link http://localhost:5000/setup Settings in detail ​ API settings ​ Setting Description API key The API key registered to be used with Gunbot for a specific exchange. API secret API secret belonging to API key Delay Time in seconds between processing two pairs on the same exchange.    10 is generally a safe value, you can try lower delays if you see the bot running without errors for several hours. Trading fees Fee percentage per trade, use the appropriate value for your exchange and fees level. Passphrase  (needed for select exchanges) Some exchanges require a passphrase for each API key, it may be called slightly different on the exchange itself. Client ID  (needed for select exchanges) Some exchanges require a client ID in addition to API key and secret, it may be called slightly different on the exchange itself. Market  (needed for select exchanges) Some exchanges require specifying the market the bot will be used on: spot, swap or, delivery or futures.  For power users It is possible to use a master/slave API key, this allows you to use a different api key for trading than the registered (master) key.
You can enter the master/slave keys in  config.js  directly, or using the code editor in Gunbot. Market selection ​ Some exchanges require specifying a market type, you can only run pairs of that specific market type (futures, for example) in the same bot instance. Exchange Market options binanceFutures / Gunthy Futures futures:  USDT margined pairs  delivery:  coin margined pairs OKX / okGunbot spot:  spot trading  futures:  futures pairs  swap:  perpetual futures pairs  Previous Connect license Next Various settings Settings in detail API settings Market selection Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Edit license, https://wiki.gunthy.org/setup-and-general-settings/global-settings/edit-license,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Edit license On this page Edit license Gunbot Standard and above uses an API slot system. This allows you to update your registered API keys anytime or switch between different supported exchanges. Direct link http://localhost:5000/edit-license tip Make sure you are actively running at least one pair when editing your license.
For security reasons you will not see the option to edit your license when it's not actively running on an already registered API key. Register a new API key ​ On the  Edit license  page you can see how many API slots your license has, and enter up to this number of API keys to be registered for use. To register a new key, follow these steps: Make sure to have an active trading pair running , without errors, on an already registered API key Go to the  Edit license  page, select the exchange, enter your key and save the changes. Refresh the page in case you don't see the form to update your keys. After registering a key, you can use it as Master Key in your exchange settings. if you've lost access to your last working API key, contact your reseller to update the registered key. tip If you regularly switch between exchange accounts, it's easiest to leave your exchange API details in the exchange section for every exchange you plan to use. Then when you want to switch, just copy the master key from there and enter it on the Swap Licensed exchanges page. Previous Export settings Next Simulator Register a new API key Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Export settings, https://wiki.gunthy.org/setup-and-general-settings/global-settings/export-settings,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Export settings Export settings Use the built-in export tool to download a safe-to-share version of your  config.js  or  autoconfig.json  files, with private information scrubbed. This can be useful when you want to share settings with support or other users. Direct link http://localhost:5000/setup Previous Import settings Next Edit license Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Import settings, https://wiki.gunthy.org/setup-and-general-settings/global-settings/import-settings,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Import settings Import settings Use the built-in import tool to import parts of  config.js  or  autoconfig.json  files, for example when you want to use a strategy from a config another user has shared or when you're upgrading your bot. Direct link http://localhost:5000/setup Previous Tournament Next Export settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Simulator, https://wiki.gunthy.org/setup-and-general-settings/global-settings/simulator,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Simulator Gunbot Simulator In active development This feature for Gunbot Ultimate (unlimited slots) only, it currently supports all spot trading strategies. With Gunbot Simulator you can forward test any spot strategy with real market data, but fake funds to trade with. When in simulator mode, the entire bot instance runs simulated trading only. The strategy and trades are charted identically to how real trades would be shown. It's recommended to start simulating in a bot instance that has no json files of pairs that did real trades before, this is the one exception where it is a good idea to completely remove the /json folder inside the Gunbot folder. To set custom starting balances, you can add these granularly on the setup page per exchange and per currency. Previous Edit license Next Trading logic Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Telegram notifications, https://wiki.gunthy.org/setup-and-general-settings/global-settings/telegram-notifications,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Telegram notifications On this page Telegram notifications Notifications work by first creating a personal bot on Telegram, Gunbot then connects to this bot to push notifications to you. Direct link http://localhost:5000/setup Steps to create a Telegram bot ​ This is how to create a bot: Talk to  @botfather . Create a new bot with the command /newbot and choose a name and username for your bot. Save the bot token shown. Talk to  @myidbot  to see your Chat ID, save it. In case myidbot has downtime,  @JsonDumpBot  can also provide the needed info. Enable Telegram notifications for Gunbot, and enter the token and ID you've just gathered. Use the ID for both the user and admin ID fields, this makes sure that only you can interact with the Telegram bot.  Alternatively, you can set a comma separated list for Admin ID, specifying multiple IDs who may interact with the bot. Start a chat with the username you've picked for your bot, and hit the start button. If you don't see a start button, write ""/start"" and send it as message. To enable trade notifications, enable these in the settings menu inside the Telegram bot. tip After setting it up, start a chat with your bot on Telegram, type  /start  to your bot to open the menu and configure which kind of notifications you want to receive. Settings descriptions ​ Below you'll find detailed descriptions of all available parameters for Telegram notifications. Enable Telegram bot ​ Description Values Name Enable this to have Gunbot send trade notifications through Telegram. Values:  true or false Default value:  false Parameter name in  config.js :  TELEGRAM_ENABLED Enable test message ​ Description Values Name Enable this to test if your Telegram bot is working. A test message will be sent on the first round for each pair. Disable after verifying your bot works. Values:  true or false Default value:  false Parameter name in  config.js :  TG_TEST Bot Nickname ​ Description Values Name Each trade notification starts with the nickname set here. Use this to easily check from which bot instance the notifications have been sent. Values:  string Default value:  Gunbot Parameter name in  config.js :  TELEGRAM_NICK Token ​ Description Values Name The Telegram token for your bot. Values:  string Default value:  YOURTOKEN Parameter name in  config.js :  TOKEN Chat ID ​ Description Values Name The Chat ID for your bot to send its messages to. Valid options: ""12345"" A positive integer, to send messages directly to a telegram user. Use this method when you just want to receive notifications for your personal use. To find your telegram id, send /start to @MyTelegramID _ bot and it will respond with your ID. ""-12345"" A negative integer, to send messages to a group chat. Pull the group id from this link:  https://api.telegram.org/bot [ tokenhere ] /getUpdates replace  [ tokenhere ]  (no brackets) look for  ""chat"":{""id"":-[groupchatidnumber],""title"":""Group Name"",""type"":""supergroup""} Values:  string Default value:  123456789 Parameter name in  config.js :  chat_id Admin ID / User ID ​ Description Values Name Defines which Telegram user IDs are allowed to interact with the bot. Must be used next to Chat ID. When you leave this value empty, every Telegram user is able to interact with your Telegram bot. Multiple IDs can be entered as a comma separated list. Values:  string Default value:  empty Parameter name in  config.js :  admin_id Previous Various settings Next 2FA Steps to create a Telegram bot Settings descriptions Enable Telegram bot Enable test message Bot Nickname Token Chat ID Admin ID / User ID Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Tournament, https://wiki.gunthy.org/setup-and-general-settings/global-settings/tournament,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Tournament Tournament There are regular interal trading tournaments that are free to join. Direct link http://localhost:5000/setup tip Read more about internal tournaments:  https://tournament.gunthy.org/ Make sure to give your bot a unique user name, this will only appear on the tournament leader board. If you run multiple bot instances and want all of them to participate in a tournament, number your instance nicknames like this: TraderNickname_1, TraderNickname_2, TraderNickname_3. They will automatically get aggregated to a single leaderboard entry at the end of the tournament. You can force submitting trading results to the tournament board by opening the  PNL page , then select a single pair (not the ""all"" option) and wait a minute. Previous 2FA Next Import settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Various settings, https://wiki.gunthy.org/setup-and-general-settings/global-settings/various-settings,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Global settings Connect license Connect exchange Various settings Telegram notifications 2FA Tournament Import settings Export settings Edit license Simulator How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Global settings Various settings On this page Various settings Several global bot options, like how order cancellation is handled. The default settings are a good starting point. Direct link http://localhost:5000/setup Settings in detail ​ Cancel open orders ​ Description Values Name When set to true, the bot will cancel unfilled or partially filled orders when the price has moved away from the buy or sell price. Set this to false if you also trade manually to prevent the bot from cancelling your open orders. Simulated Fill Or Kill (FOK) When an order is not or only partially filled and gets cancelled, Gunbot will attempt to fill the order by replacing it at current bid/ask. For buy orders this means that FOK orders are sent as long as the number of quote units held are worth less than  TRADING_LIMIT  and the difference is higher than  MIN_VOLUME_TO_BUY . For sell orders this means that FOK orders are sent as long as the number of quote units held (minus  KEEP_QUOTE , if used) are worth more than  MIN_VOLUME_TO_SELL  and bid is higher than the break-even point. Values:  true or false Default value:  false Parameter name in  config.js :  CANCEL_ORDERS_ENABLED Cancel after x rounds ​ Description Values Name Enabling this changes the behavior of cancelling orders: orders are cancelled after  CANCEL_ORDERS_CYCLE_CAP  passes. Values:  true or false Default value:  false Parameter name in  config.js :  CANCEL_ONCAP Cancel order rounds ​ Description Values Name This only applies when using  MAKER_FEES  or  CANCEL_ONCAP . Set the number of rounds that pending orders need to be kept open. After this number of rounds passes, Gunbot will cancel the pending order. Values:  numerical - represents a number of rounds. Default value:  10 Parameter name in  config.js :  CANCEL_ORDERS_CYCLE_CAP Watch mode ​ Description Values Name When set to true, Gunbot will process the configured pairs, but will not place actual buy or sell orders. Good for testing. This option is meant for blocking strategy buy and sell orders for spot trading, it may not apply to every single order type. Values:  true or false Default value:  false Parameter name in  config.js :  WATCH_MODE Multiple base ​ Description Values Name Use this option to trade pairs with cross-over between quote and base (for example BTC-ETH and ETH-ADA). When enabled, Gunbot won't sell all available quote units when selling, instead it will only sell the invested funds (as defined in the trading limit). Also affects the TradingView add-on. Only enable this when you really need it, it is known to cause sell order execution problems when selling positions that were not bought by the bot. If you experience errors when selling, try turning off this settings Values:  true or false Default value:  false Parameter name in  config.js :  MULTIPLE_BASE Clean cache ​ Description Values Name This parameter forces the Gunbot cache to be cleaned by restarting the bot every x hours. Only set this to a low value when your bot actually has problems not trading after a longer period of use. If you for example see heap memory related warnings in your logs, it might be a good idea to clean cache more often. Values:  numerical – represents time in hours. Default value:  200 Parameter name in  config.js :  BOT_CCLEAN Previous Connect exchange Next Telegram notifications Settings in detail Cancel open orders Cancel after x rounds Cancel order rounds Watch mode Multiple base Clean cache Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Balance settings, https://wiki.gunthy.org/trading-strategy-options/balance-settings,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Balance settings On this page Balance settings Balance settings define important options like how much Gunbot is allowed to invest per trade. These settings are part of a trading strategy, this way you have the flexibility to run different strategies with different balance settings. Balance settings parameters ​ Trading Limit ​ Description Values Order types Name This value defines the trading limit for each buy order. Make sure to always set this higher than  MIN_VOLUME_TO_BUY  &  MIN_VOLUME_TO_SELL . When you set this to 0.1 and trade BTC-x pairs, Gunbot will place a buy order worth 0.1 BTC each time it buys. When trading a fiat pair like USD-x, set a whole number like 100 as trading limit. tip futures: enter the desired number of contracts. Values:  numerical – represents an amount in base currency. Default value:  0.002 Affects Does not affect Strategy buy Strategy sell RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TRADING_LIMIT Trading Limit Percentage ​ Description Values Order types Name Alternative method for setting the investment per buy order as a percentage of the available base currency at the time the trade takes place. Any value above 0 makes Gunbot ignore  TRADING_LIMIT  and uses the set percentage instead. For example: when set to 10, trading BTC-ALT and you have 1 BTC available at the time Gunbot places a buy order, an order of 0.1 BTC is placed. tip This parameter is irrelevant for futures trading. Values:  numerical – represent a percentage of available base currency. Default value:  0 Affects Does not affect Strategy buy Strategy sell RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TL_PERC Trading Limit All-In ​ Description Values Order types Name Alternative method for setting the investment per buy order to use all available base currency at the time the trade takes place. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TL_ALLIN Keep Quote ​ Description Values Order types Name Sets an amount of quote currency that will not be sold. For a BTC-ALT pair, a set amount of ALT will not be sold. For example: when  KEEP_QUOTE  is set to 10 for trading BTC-BNB, then Gunbot will leave 10 BNB in your account when placing a sell order, any balance above 10 will get sold as long as it is worth more than  MIN_VOLUME_TO_SELL . To make sure trading continues after a sell order where an amount of quote is kept, make sure to set  MIN_VOLUME_TO_SELL  at least higher than the assumed value of the kept quote (expressed in base currency).  tip This parameter is irrelevant for futures trading. Values:  numerical - represents an amount in quote currency. Default value:  0 Parameter name in  config.js :  KEEP_QUOTE Funds Reserve ​ Description Values Order types Name Sets an amount of base currency that will not be traded. For a BTC-x pair, funds in BTC would be reserved according to this setting. For ETH- pairs ETH would be reserved, etc. It is recommended to use the same value for all pairs of the same base currency you run. For example: when funds reserve is set to 0.5 for trading BTC-x pairs then 0.5 BTC will not be used by Gunbot. tip This parameter is irrelevant for futures trading. Values:  numerical – represents an amount in base currency. Default value:  0.0001 Parameter name in  config.js :  FUNDS_RESERVE Min Volume To Buy ​ Description Values Order types Name Sets a threshold for buy orders. Prevents orders below the exchange minimum trade size from being placed. Set this at least to the minimum trade size of your exchange. When trading a fiat pair like USD-x, set a whole number like 10 as  MIN_VOLUME_TO_BUY . tip This parameter is irrelevant for trading at Bitmex. Values:  numerical, represents volume in base currency Default value:  0.001 Affects Does not affect Strategy buy Strategy sell DCA buy RT sell RT buy RT buyback RT buyback Close Stop limit Parameter name in  config.js :  MIN_VOLUME_TO_BUY Min Volume To Sell ​ Description Values Order types Name Sets a threshold for sell orders lower than the exchange minimum trade size. If you own less than the set amount, sell orders will not be placed and Gunbot goes into buying mode. Set this at least to the minimum trade size of your exchange. When trading a fiat pair like USDT-x, set a whole number like 10 as  MIN_VOLUME_TO_SELL . When you hold 0.006 (in base currency) of a coin and have set  MIN_VOLUME_TO_SELL  to 0.01, Gunbot will not try to sell your current 0.006 balance because it is below the set threshold of 0.01, instead it will place another buy order first as soon as buying are met. tip This parameter is irrelevant for trading at Bitmex. Values:  numerical, represents volume in base currency Default value:  0.001 Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  MIN_VOLUME_TO_SELL Previous Custom strategies Next Confirming indicators Balance settings parameters Trading Limit Trading Limit Percentage Trading Limit All-In Keep Quote Funds Reserve Min Volume To Buy Min Volume To Sell Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Confirming indicators, https://wiki.gunthy.org/trading-strategy-options/confirming-indicators,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Confirming indicators On this page Confirming indicators To further restrict trading criteria for your strategy, you can use a number of confirming indicators for regular buy and sell orders. This page describes all settings options available for confirming indicators. Orders are placed when both the main strategy settings and confirming indicators meet the market situation. When TrailMe is used too, it must finish trailing while other conditions meet. All these conditions must occur in the same cycle. Especially when TrailMe is used together with confirming indicators, it makes sense to not set the indicators too strict as all order criteria must happen in the same cycle for an order to be placed (strategy conditions + indicator conditions + hitting trailing stop). Indicators in Gunbot are calculated with live data For example for a 14 period RSI calculation, that means that the period close values for the past 13 completed candles are used, plus the live data for the current cycle. Exchanges do not provide indicator data. Gunbot has to calculate its own indicator data, since exchanges only provide the raw data to calculate indicators with. Although we use the, in our opinion,  best library  for indicators it's always possible that exchanges or TradingView show slightly different indicator values because they opted for a different way of calculating them. tip For futures trading, the buy side for indicator settings apply for opening long position. The sell side applies for opening short positions. ADX ​ ADX Enabled ​ Description Values Order types Name Setting this to true will enable ADX as a confirming indicator, only allowing trades when the trend is strong enough to meet or exceeds the set ADX_LEVEL. ADX measures both up- and downtrends, when DI+ is lower than DI- prices are moving up (these values are visible in the logs). When DI- is lower than DI+, prices are moving down. The ADX value indicates the strength of the current up- or downtrend. A buy order is confirmed when ADX is above ADX_LEVEL and DI- is lower than DI+. A sell order is confirmed when ADX is above ADX_LEVEL and DI- is higher than DI+. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ADX_ENABLED ADX Level ​ Description Values Order types Name Sets the minimum trend level that needs to be reached for orders to be allowed. When set to 25, trades will be placed as soon as ADX is 25 or higher. Values:  numerical, ranging between 1 and 99. Default value:  25 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ADX_LEVEL DI Period ​ Description Values Order types Name Sets the number of candles used to calculate ADX. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  DI_PERIOD BTC PND protection ​ BTC PND Protection ​ Description Values Order types Name Setting this to true disables buy orders when there is too much price and volume pressure on BTC. This setting is dependent on  BTC_MONEY_FLOW . Only use this if BTC price changes have a significant effect on your trading pair. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  BTC_PND_PROTECTION BTC Money Flow ​ Description Values Order types Name Sets the value on the Money Flow Index (MFI) for BTC-USD that  BTC_PND_PROTECTION  disables orders for. As soon as MFI hits the set value or drops below it,  BTC_PND_PROTECTION  will be active. The default value of 35 indicates that the BTC-USD market is moving into oversold territory and might start moving soon, no buy orders would be placed while BTC-USD MFI is between 35 and 0. As long as BTC-USD is the defined oversold territory, no orders will be placed. Values:  numerical, ranging between 1 and 99. Default value:  25 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  BTC_MONEY_FLOW BTC PND Period ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating MFI for BTC_PND_PROTECTION. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  BTC_PND_PERIOD EMA Spread ​ EMA Spread ​ Description Values Order types Name Setting this to true will enable EMA spread as a confirming indicator for both buy and sell orders. The spread is calculated each cycle by subtracting the lowest EMA value from the highest EMA. A buy signal occurs when EMA1 (slow EMA) is at least  EMAx  higher than EMA2 (fast EMA) and the EMA spread value starts to decrease (after having increased first). A sell signal occurs when EMA1 (slow EMA) is at least EMAx lower than EMA2 (fast EMA) and the EMA spread value starts to increase (after having decreased first). Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  emaspread EMAx ​ Description Values Order types Name Sets the minimum percentage difference between slow and medium EMA for  emaspread . When set to 1, the spread must reach at least 1% before  emaspread  can trigger a buy or sell. Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  EMAx MFI ​ MFI Enabled ​ Description Values Order types Name Setting this to true will make sure Gunbot only trades when both strategy conditions and  MFI_BUY_LEVEL  /  MFI_SELL_LEVEL  are met. If you only want to use this indicator for buying or selling, but not both, then set the side you don't want to use to -1001 Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MFI_ENABLED MFI Buy Level ​ Description Values Order types Name Defines the maximum MFI level you want to allow buy orders at. When set to 30, buy orders will only be placed when MFI is between 0 and 30. Values:  numerical, ranging between 1 and 99. Default value:  30 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit DCA buy Strategy sell Parameter name in  config.js :  MFI_BUY_LEVEL MFI Sell Level ​ Description Values Order types Name Set this to the minimum MFI level you want to allow sell orders at. For example: when set to 70, sell orders will only be placed when MFI is between 70 and 100. Values:  numerical, ranging between 1 and 99. Default value:  70 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit DCA buy Strategy buy Parameter name in  config.js :  MFI_SELL_LEVEL MFI Length ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating MFI. MFI is calculated using an array of the period close prices of MFI_LENGTH-1 candles and the last price. Values:  numerical, represents a number of candlestick periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MFI_LENGTH RSI ​ RSI Buy Enabled ​ Description Values Order types Name Setting this to true will make sure Gunbot only buys when both strategy buying conditions and  RSI_BUY_LEVEL  are met. Values:  true or false Default value:  false Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit DCA buy Strategy sell Parameter name in  config.js :  RSI_BUY_ENABLED RSI Sell Enabled ​ Description Values Order types Name Setting this to true will make sure Gunbot only sells when both strategy selling conditions and  RSI_SELL_LEVEL  are met. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit DCA buy Strategy buy Parameter name in  config.js :  RSI_SELL_ENABLED RSI Method ​ Description Values Order types Name Sets the method for using RSI. See  RSI_BUY_LEVEL  and  RSI_SELL_LEVEL  for detailed descriptions of both methods. Values:  oscillator or cross. Default value:  oscillator Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  RSI_METHOD RSI Buy Level ​ Description Values Order types Name Set this to the RSI level you want to allow buy orders at. RSI_METHOD  = oscillator: when set to 40, buy orders will only be placed when RSI is 40 or lower. RSI_METHOD  = cross: when set to 40, buy orders will only be placed when RSI crosses over 40. Values:  numerical, ranging between 1 and 99. Default value:  30 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit DCA buy Strategy sell Parameter name in  config.js :  RSI_BUY_LEVEL RSI Sell Level ​ Description Values Order types Name Set this to the RSI level you want to allow sell orders at. RSI_METHOD  = oscillator: when set to 60, sell orders will only be placed when RSI is 60 or higher. RSI_METHOD  = cross: when set to 60, sell orders will only be placed when RSI crosses under 60. Values:  numerical, ranging between 1 and 99. Default value:  70 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit DCA buy Strategy buy Parameter name in  config.js :  RSI_SELL_LEVEL RSI Length ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating RSI. RSI is calculated using an array of the period close prices of RSI_LENGTH-1 candles and the last price. Values:  numerical, represents a number of candlestick periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using RSI) RT sell Close Stop limit Parameter name in  config.js :  RSI_LENGTH Stochastic ​ Stoch Enabled ​ Description Values Order types Name Setting this to true will make sure Gunbot only trades when both strategy trade conditions and  STOCH_BUY_LEVEL  /  STOCH_SELL_LEVEL  are met. If you only want to use this indicator for buying or selling, but not both, then set the side you don't want to use to -1001. Values:  true or false Default value:  false Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  STOCH_ENABLED Stoch Method ​ Description Values Order types Name Sets the method for using Stochastic. See  STOCH_BUY_LEVEL  and  STOCH_SELL_LEVEL  for detailed describtions of both methods. Values:  oscillator or cross. Default value:  oscillator Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  STOCH_METHOD Stoch Buy Level ​ Description Values Order types Name Set this to the maximum Stochastic level you want to allow buy orders at. When set to 30, buy orders will only be placed when Stochastic is between 0 and 30. STOCH_METHOD  = oscillator: a buy signal occurs when both Stoch %K and %D are below the set buy level. STOCH_METHOD  = cross: a buy signal occurs when both Stoch %K and %D are below the set buy level, additionally %K must cross over %D. Values:  numerical, ranging between 1 and 99. Default value:  30 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit DCA buy Strategy sell Parameter name in  config.js :  STOCH_BUY_LEVEL Stoch Sell Level ​ Description Values Order types Name Set this to the minimum Stochastic level you want to allow sell orders at. When set to 70, sell orders will only be placed when Stochastic is between 70 and 100. STOCH_METHOD  = oscillator: a sell signal occurs when both Stoch %K and %D are above the set sell level. STOCH_METHOD  = cross: a sell signal occurs when both Stoch %K and %D are above the set sell level, additionally %K must cross down %D. Values:  numerical, ranging between 1 and 99. Default value:  70 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit DCA buy Strategy buy Parameter name in  config.js :  STOCH_SELL_LEVEL Stoch K ​ Description Values Order types Name The number of periods used for calculating Stochastic %K. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  STOCH_K Slow Stoch K ​ Description Values Order types Name The number of periods used for calculating Slow Stochastic %K. Values:  numerical, represents a number of periods. Default value:  3 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  SLOW_STOCH_K Stoch D ​ Description Values Order types Name The number of periods used for calculating Stochastic %D. Values:  numerical, represents a number of periods. Default value:  3 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  STOCH_D StochRSI ​ Stoch RSI Enabled ​ Description Values Order types Name Setting this to true will make sure Gunbot only trades when both strategy trade conditions and  STOCHRSI_BUY_LEVEL  /  STOCHRSI_SELL_LEVEL  are met. If you only want to use this indicator for buying or selling, but not both, then set the side you don't want to use to -1001. Values:  true or false Default value:  false Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  STOCHRSI_ENABLED Stoch RSI Method ​ Description Values Order types Name Sets the method for using StochRSI. See  STOCHRSI_BUY_LEVEL  and  STOCHRSI_SELL_LEVEL  for detailed describtions of both methods. Values:  oscillator or cross. Default value:  oscillator Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  STOCHRSI_METHOD Stoch RSI Buy Level ​ Description Values Order types Name Set this to the StochRSI level you want to allow buy orders at. STOCHRSI_METHOD  = oscillator: when set to 0.2, buy orders will only be placed when StochRSI is 0.2 or lower. STOCHRSI_METHOD  = cross: when set to 0.2, buy orders will only be placed when StochRSI crosses over 0.2. Values:  numerical, ranging between 0.01 and 0.99 Default value:  0.2 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit DCA buy Strategy sell Parameter name in  config.js :  STOCHRSI_BUY_LEVEL Stoch RSI Sell Level ​ Description Values Order types Name Set this to the StochRSI level you want to allow sell orders at. STOCHRSI_METHOD = oscillator: when set to 0.8, sell orders will only be placed when StochRSI is 0.8 or higher. STOCHRSI_METHOD = cross: when set to 0.8, sell orders will only be placed when StochRSI crosses under 0.8. Values:  numerical, ranging between 0.01 and 0.99 Default value:  0.8 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit DCA buy Strategy buy Parameter name in  config.js :  STOCHRSI_SELL_LEVEL Stoch RSI Length ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating StochRSI. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  STOCHRSI_LENGTH Advanced settings ​ EMA Length ​ Description Values Order types Name Set this to the number of candlestick periods you want be available for calculating  EMA1  and  EMA2 . Unless you use very high EMA values, you usually do not need to change this. Values:  numerical, represents a number of periods. Default value:  50 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  EMALENGTH Candles Length ​ Description Values Order types Name Set this to the number of candlestick periods you want Gunbot to pull from the exchange, which are available for calculating other indicators. Always make sure that this setting is high enough for other indicators to be properly calculated. Please be aware that exchanges won't always provide the number of specified candles, often it is less. Values:  numerical, represents a number of periods. Default value:  99 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator as trigger) RT sell Close Stop limit Parameter name in  config.js :  CANDLES_LENGTH Bollinger Bands for DCA ​ SMA Period ​ Description Values Order types Name This defines the number of periods used for calculating Bollinger Bands. Only used when  DU_METHOD  is set to HIGHBB. Values:  numerical – represents a number of candlesticks. Default value:  50 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  SMAPERIOD Standard Deviation ​ Description Values Order types Name This value defines the multiplier used for calculating Bollinger Bands. Only used when  DU_METHOD  is set to HIGHBB. Values:  numerical (recommended: between 1.9 and 2.1) - represents a multiplier value used in the bollinger bands calculation. Default value:  2 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  STDV Renko candles ​ tip Renko charts are supported in v18, not in later versions. Use Renko ​ Description Values Order types Name Setting this to true will enable the use of renko candles, instead of regular candles. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit Parameter name in  config.js :  USE_RENKO Renko Period ​ Description Values Order types Name Sets which regular candle size is used as input for renko candles. Make sure to set  PERIOD  to the same value as  RENKO_PERIOD . Values:  numerical Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit Parameter name in  config.js :  RENKO_PERIOD Renko Brick Size ​ Description Values Order types Name Defines the brick size for each candle. For example, when set to 1 on a pair with USD as base currency, each renko candle will represent a price change of at least 1 USD. If you are unfamiliar with renko charts, it's recommended to first set the brick size to the smallest possible step, for example 1 USD or 0.00000001 BTC, and see what effect it has on the chart (do keep the chart open a while to check how new price movements get visualized). Then keep increasing the brick size until you get a good feeling of how the chart behaves. Values:  numerical Default value:  0.0001 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit Parameter name in  config.js :  RENKO_BRICK_SIZE Renko ATR ​ Description Values Order types Name Enable this to dynamically adjust brick size based on the average true range (ATR). For fiat pairs, 1 pip equals 1 cent. For crypto, 1 pip equals 1 satoshi. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit Parameter name in  config.js :  RENKO_ATR Previous Balance settings Next Dollar Cost Avg (DCA) ADX ADX Enabled ADX Level DI Period BTC PND protection BTC PND Protection BTC Money Flow BTC PND Period EMA Spread EMA Spread EMAx MFI MFI Enabled MFI Buy Level MFI Sell Level MFI Length RSI RSI Buy Enabled RSI Sell Enabled RSI Method RSI Buy Level RSI Sell Level RSI Length Stochastic Stoch Enabled Stoch Method Stoch Buy Level Stoch Sell Level Stoch K Slow Stoch K Stoch D StochRSI Stoch RSI Enabled Stoch RSI Method Stoch RSI Buy Level Stoch RSI Sell Level Stoch RSI Length Advanced settings EMA Length Candles Length Bollinger Bands for DCA SMA Period Standard Deviation Renko candles Use Renko Renko Period Renko Brick Size Renko ATR Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Custom strategies, https://wiki.gunthy.org/trading-strategy-options/custom-strategies,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Custom strategies On this page Custom strategies Build completely custom trading strategies, using  JavaScript . For spot and futures trading. Use built-in trading methods, candle and indicator data to get started quickly. 
 For advanced usage it's possible to install and use your own additional javascript modules. A strategy runs as an async function, executed once every time a trading pair 'cycles' in Gunbot.   note Custom strategies are available in Gunbot Ultimate. Technical info ​ To get a better idea of what you can and can't do, here's a few facts: Gunbot takes care of the exchange connection, collecting data and making it available to a strategy You save strategies in your own .js files in a folder called ./customStrategies There is no Gunbot specific syntax, strategy code is plain JavaScript Strategy code has access to a single outside object:  gb , which contains a number of trading methods and lots of data to work with There are basically no restrictions to what you can do with the provided trading methods, but of course exchange defined restrictions apply (API usage rate limits, open orders limits, etc.) There are no protections against double orders, or any kind of other unwanted behavior Make sure to use JavaScript code compatible with  Node v14.4.0 Using  console.log()  logs to the main Gunbot console logs. Expect to console log all the things Code runs inside an async function, you can use the  await  keyword to collect additional data like candle data for a different period A strategy does not have to return anything, but you can use return statements to easily stop your code at a certain point A strategy can use custom JavaScript modules. Save these in a folder named  user_modules  inside your Gunbot folder. danger Custom code can be very risky! Because external modules can be used, be extremely careful when running strategy code you did not write yourself. In theory a malicious actor can gain access over your whole system. Strategy examples ​ Coding a strategy can be as difficult as you want it to be. 
 Even with  very  basic  JavaScript  code  it's possible to create complex strategies.  The following examples show a few possible ways to code simple strategies. They are silly in functionality, and are not usable for actual trading. Each next example requires a bit more JavaScript knowledge. danger Some examples can lead to immediate large trades. Use them to learn, not to trade. Example 1 ​ Trade USDT-BTC Invest 100 USDT per trade, allow max 1 buy order Market buy when price is below lowBB and fastSma is below ema1 (using readily available indicator data) After the buy order fills, place a sell order 1% above the break even price  Do nothing until this sell order fills // check if there are any open orders for this pair,  // wait until they get filled before doing anything else if   ( gb . data . openOrders . length   >   0 ) {      // print a message to the console logs      console . log ( 'There is an open order, waiting...' )      // stop doing things      return } // balance ""settings"": invest 100 USDT, convert into quote amount  // needed for calling the buy method var  baseAmount  =   100 var  buyAmount  =  baseAmount  /  gb . data . bid // check if no bag is held yet AND price,  // lowBB and moving average criteria are true if   (      ! gb . data . gotBag   &&     gb . data . bid   <  gb . data . lowBB   &&     gb . data . fastSma   <  gb . data . ema1      ) {      // conditions are true, fire a market buy order       // using the amount calculated in buyAmount     gb . method . buyMarket ( buyAmount ,  gb . data . pairName ) } // place a limit sell order if we have a bag else   if   (  gb . data . gotBag   )   {      // fire the sell order, pass in the amount, price and pair name.       // price is calculated as breakEven * 1.01     gb . method . sellLimit ( gb . data . quoteBalance ,  gb . data . breakEven   *   1.01 ,  gb . data . pairName ) } Example 2 ​ Keep the basic workings from example 1 Additionally calculate a Hull Moving Average (HMA) using the last 50 candle close prices as input Place the sell order 1% above bid price, at the moment bid goes above HMA // check if there are any open orders for this pair,  // wait until they get filled before doing anything else if   ( gb . data . openOrders . length   >   0 )   {      // print a message to the console logs      console . log ( 'There is an open order, waiting...' )      // stop doing things      return } // balance ""settings"": invest 100 USDT, convert into  // quote amount needed for calling the buy method var  baseAmount  =   100 var  buyAmount  =  baseAmount  /  gb . data . bid // define a variable to save the Hull Moving Average to var  hma // get indicator data from tulind // use candlesClose data as input, calculate a 50 period Hull Moving Average gb . method . tulind . indicators . hma . indicator ( [ gb . data . candlesClose ] ,   [ 50 ] ,   function   ( err ,  results )   {      // tulind returns an array with hma values,       // assign the most recent value to the hma variable      // notation is a bit awkward, the "".length -1"" part       // makes it select the very last value     hma  =  results [ 0 ] [ results [ 0 ] . length   -   1 ] } ) ; // check if no bag is held yet AND price,  // lowBB and moving average criteria are true if   (      ! gb . data . gotBag   &&     gb . data . bid   <  gb . data . lowBB   &&     gb . data . fastSma   <  gb . data . ema1 )   {      // conditions are true, fire a market buy order       // using the amount calculated in buyAmount     gb . method . buyMarket ( buyAmount ,  gb . data . pairName ) } // place a limit sell order if we have a bag // make sure the sell method is only called when bid > hma else   if   ( gb . data . gotBag   &&  gb . data . bid   >  hma )   {      // fire the sell order, pass in the amount, price and pair name.       // price is calculated as bid * 1.01     gb . method . sellLimit ( gb . data . quoteBalance ,  gb . data . bid   *   1.01 ,  gb . data . pairName ) } Example 3 ​ Trade USDT-BTC Invest 100 USDT per trade, allow max 1 buy order Code a bit more readable, assigning variables for everything used in conditionals Buy when a 50 period ema has crossed over a 200 period ema, AND within at most 2 candles later the candle open price is above ema1 Place a sell order 5% above break even // check if there are any open orders for this pair,  //wait until they get filled before doing anything else if   ( gb . data . openOrders . length   >   0 )   {      // print a message to the console logs      console . log ( 'There is an open order, waiting...' )      // stop doing things      return } // balance ""settings"": invest 100 USDT, convert into  // quote amount needed for calling the buy method var  baseAmount  =   100 var  buyAmount  =  baseAmount  /  gb . data . bid // needed variables for conditional logic // some are left undefined, to set them later when the values can be calculated // emaCrossup is intentionally set false,  // only to be set true when a recent crossup is detected var  gotBag  =  gb . data . gotBag var  bid  =  gb . data . bid var  ema50 var  ema200 var  emaCrossup  =   false // get indicator data from tulind // use candlesClose data as input, calculate a 50 // and 200 period Exponential Moving Average gb . method . tulind . indicators . ema . indicator ( [ gb . data . candlesClose ] ,   [ 50 ] ,   function   ( err ,  results )   {      // tulind returns an array with ema value,       // save full array to be able to look for crosses later     ema50  =  results [ 0 ] } ) ; gb . method . tulind . indicators . ema . indicator ( [ gb . data . candlesClose ] ,   [ 200 ] ,   function   ( err ,  results )   {      // tulind returns an array with ema value,       // save full array to be able to look for crosses later     ema200  =  results [ 0 ] } ) ; // figure out if there was a crossover of ema50 > ema200 in the last two candles // do this in two conditionals, once for the most recent candle  // and once for the previous candle // if true, save the result in the emaCrossup variable if   (     ema50 [ ema50 . length   -   1 ]   >  ema200 [ ema200 . length   -   1 ]   &&     ema50 [ ema50 . length   -   2 ]   <  ema200 [ ema200 . length   -   2 ] )   {     emaCrossup  =   true } else   if   (     ema50 [ ema50 . length   -   2 ]   >  ema200 [ ema200 . length   -   2 ]   &&     ema50 [ ema50 . length   -   3 ]   <  ema200 [ ema200 . length   -   3 ] )   {     emaCrossup  =   true } // buy if there is no bag, and there was a recent ema crossup  // and bid price is above ema50 if   ( ! gotBag  &&  bid  >  ema50 [ ema50 . length   -   1 ]   &&  emaCrossup )   {      // conditions are true, fire a market buy order using the amount calculated in buyAmount     gb . method . buyMarket ( buyAmount ,  gb . data . pairName ) } // place a limit sell order if we have a bag // make sure the sell method is only called when  else   if   ( gotBag )   {      // fire the sell order, pass in the amount, price and pair name. Price is calculated as bid * 1.01     gb . method . sellLimit ( gb . data . quoteBalance ,  gb . data . breakEven   *   1.05 ,  gb . data . pairName ) } Example 4 ​ Trade USDT-BTC and USDT-XRP Assume you already have BTC and XRP Sell 1 BTC when news about BTC tagged ""bearish"" appears on cryptopanic.com, containing the keyword ""Korea"", then place a buy order 5% below the current price  Sell 10000 XRP whenever news about XRP tagged ""bearish"" appears with the keyword ""sec"" Do all of this in a single strategy running on a single pair in Gunbot // require the Cryptopanic module // install https://www.npmjs.com/package/cryptopanic in an outside folder,  // then copy the modules to the 'user_modules' folder inside the Gunbot root folder const  _  =  gb . method . require ( gb . modulesPath   +   '/cryptopanic' ) // make a connection to Cryptopanic const  cp  =   new   Cryptopanic ( {   auth_token :   '<API_TOKEN>'   } ) // creata variables to store status of detected FUD let  koreaFud let  secFud // get data from Cryptopanic and do a simple check if any of the BTC news includes 'Korea', and if there is XRP news that included 'SEC' // this is not a complete solution, for example it does not consider if news is old or has already been traded cp . currencies ( [ 'BTC' ,   'XRP' ] )      . filter ( 'bearish' )      . fetchPosts ( )      . then ( ( articles )   =>   {          // loop trough articles, search if specific strings exist and save result         articles . forEach ( article   =>   {              // convert article object to string to easily search its contents              const  articleString  =   JSON . stringify ( article )              if   ( articleString . indexOf ( 'Korea' )   >   - 1   &&  articleString . indexOf ( 'BTC' )   >   - 1 )   {                 koreaFud  =   true              }              if   ( articleString . indexOf ( 'SEC' )   >   - 1   &&  articleString . indexOf ( 'XRP' )   >   - 1 )   {                 secFud  =   true              }          } ) ;          // fire BTC orders if Korea FUD detected          if   ( koreaFud )   {              // first sell 1 BTC in a market order             gb . method . sellMarket ( 1 ,   'USDT-BTC' )                  // wait for the promise to resolve, then check if the order filled before placing a limit buy 5% below current price                  . then ( ( result )   =>   {                      if   ( result . info . status   ===   'FILLED' )   {                         gb . method . buyLimit ( 1 ,  gb . data . bid   *   0.95 ,   'USDT-BTC' )                      }                  } )          }          // sell XRP if SEC FUD detected          if   ( secFud )   {             gb . method . sellMarket ( 10000 ,   'USDT-XRP' )          }      } ) Example 5 ​ Trade USDT-BTC Invest 100 USDT per trade, allow max 1 buy order Strategy itself uses 3m candles, additionally fetch 60m candles Only collect data and allow trades in first minute of the hour Calculate TD Sequential using an external module, transform input data to the needed format Place buy order when bid price  >  ema1, using 3m data AND TD Sequential on hourly chart has a buy setup index of 8 or higher Sell when TD sequential has a sell setup index of at least 11 and price is above break even Use the lodash module to simplify some code // strategy uses two external modules: 'lodash' and 'tdsequential' // install them with npm in an outside folder, and copy the modules to the 'user_modules' folder inside the Gunbot root folder const  _  =  gb . method . require ( gb . modulesPath   +   '/lodash' ) const   TDSequential   =  gb . method . require ( gb . modulesPath   +   '/tdsequential' ) // don't do anything unless current minute is first of the hour const  currentMinute  =   new   Date ( Date . now ( ) ) . getMinutes ( ) ; if   ( currentMinute  !=   0 )   {      return } // get 300 60m candles, and persistently save them  // to Gunbot pair ledger - for no real reason except showing that you can do this if   ( _ . isNil ( gb . data . pairLedger . customStratStore ) ) {      // create custom strategy store     gb . data . pairLedger . customStratStore   =   { } } gb . data . pairLedger . customStratStore . myCandles   =   await  gb . method . getCandles ( 300 ,   60 ,  gb . data . pairName ) // balance ""settings"": invest 100 USDT, convert into quote amount needed for calling the buy method const  baseAmount  =   100 const  buyAmount  =  baseAmount  /  gb . data . bid // to calculate TD Sequential, first transform the collected candle data to the format required by this module let  candles_60m_transformed  =   [ ] gb . data . pairLedger . customStratStore . myCandles . close . forEach ( function   ( item ,  index )   {      let  temp  =   { }     temp . time   =  item . timestamp     temp . close   =  item . value     temp . high   =  gb . data . pairLedger . customStratStore . myCandles . high [ index ] . value     temp . low   =  gb . data . pairLedger . customStratStore . myCandles . low [ index ] . value     temp . open   =  gb . data . pairLedger . customStratStore . myCandles . open [ index ] . value     temp . volume   =  gb . data . pairLedger . customStratStore . myCandles . volume [ index ] . value     candles_60m_transformed . push ( temp ) } ) ; // calculate TD Sequential and only use the most recent value const  tdSequentialData  =  _ . last ( TDSequential ( candles_60m_transformed ) ) // define trading conditions const  buyConditions  =  tdSequentialData . buySetupIndex   >=   8   &&  gb . data . bid   >  gb . data . ema1   &&   ! gb . data . gotBag const  sellConditions  =  tdSequentialData . sellSetupIndex   >=   11   &&  gb . data . bid   >  gb . data . breakEven   &&  gb . data . gotBag // place orders if conditions are true if   ( buyConditions )   {     gb . method . buyMarket ( buyAmount ,  gb . data . pairName ) } else   if   ( sellConditions )   {     gb . method . sellMarket ( gb . data . quoteBalance ,  gb . data . pairName ) } ""Real"" strategy examples ​ The following examples are more or less ready made strategies you can build upon. 
 Note that every custom strategy will require testing on your side. Do not blindly use these examples.   One aspect that's absent in the examples is checking if referenced data is actually defined before firing orders, in some cases this will be an important aspect of a custom strategy. Also consider adding error handling to your code, especially for trading methods that have less chance to succeed than simple market orders. Keltner crossover ​ // require external modules const  kc  =  gb . method . require ( gb . modulesPath   +   '/keltnerchannel' ) . kc const  _  =  gb . method . require ( gb . modulesPath   +   '/lodash' ) // forced short wait time between runs that do something // mostly to reduce risk of double orders in case the exchange doesn't update balances immediately let  enoughTimePassed  =   false if   ( _ . isNil ( gb . data . pairLedger . customStratStore ) )   {     gb . data . pairLedger . customStratStore   =   { }      if   ( _ . isNil ( gb . data . pairLedger . customStratStore . timeCheck ) )   {         gb . data . pairLedger . customStratStore . timeCheck   =   Date . now ( )      }      else   {          if   ( Date . now ( )   -  gb . data . pairLedger . customStratStore . timeCheck   >   8000 )   {             enoughTimePassed  =   true          }      } } const   setTimestamp   =   function   ( )   {     gb . data . pairLedger . customStratStore . timeCheck   =   Date . now ( ) } if   ( enoughTimePassed )   {      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // collect indicator data      let  candlesReformatted  =   [ ]     gb . data . candlesClose . forEach ( function   ( item ,  index )   {          let  temp  =   { }         temp . close   =  item         temp . high   =  gb . data . candlesHigh [ index ]         temp . low   =  gb . data . candlesLow [ index ]         candlesReformatted . push ( temp )      } ) ;      const  keltnerChannel  =   kc ( candlesReformatted ,   20 ,   1 ,   true )      const  lowestPriceLast10Candles  =   Math . min ( ... gb . data . candlesLow . slice ( - 10 ) )      const  macd  =  gb . data . macd      const  macdSignal  =  gb . data . macdSignal      let  ema200      let  obv      let  obvMa21     gb . method . tulind . indicators . ema . indicator ( [ gb . data . candlesClose ] ,   [ 200 ] ,   function   ( err ,  results )   {         ema200  =  results [ 0 ]      } ) ;     gb . method . tulind . indicators . obv . indicator ( [ gb . data . candlesClose ,  gb . data . candlesVolume ] ,   [ ] ,   function   ( err ,  results )   {         obv  =  results [ 0 ]      } ) ;     gb . method . tulind . indicators . sma . indicator ( [ obv ] ,   [ 21 ] ,   function   ( err ,  results )   {         obvMa21  =  results [ 0 ]      } ) ;      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // trading conditions      const  buyAmount  =   parseFloat ( gb . data . pairLedger . whatstrat . TRADING_LIMIT )   /  gb . data . bid      const  sellTarget  =  gb . data . breakEven   +   ( ( gb . data . breakEven   -  lowestPriceLast10Candles )   *   1.5 )      const  openSellRate  =  gb . data . openOrders ?. [ 0 ] ?. rate      const  stopTarget  =  openSellRate  -   ( openSellRate  -  gb . data . breakEven )   -   ( ( openSellRate  -  gb . data . breakEven )   *   0.67 )      const  entryConditions  =   (          ! gb . data . gotBag   &&          // prev candle high > upper keltner         gb . data . candlesHigh [ gb . gb . data . candlesHigh . length   -   2 ]   >  keltnerChannel . upper [ keltnerChannel . upper . length   -   2 ]   &&          // prev full candle > ema 200         gb . data . candlesOpen [ gb . data . candlesOpen . length   -   2 ]   >  ema200 [ ema200 . length   -   2 ]   &&         gb . data . candlesHigh [ gb . data . candlesHigh . length   -   2 ]   >  ema200 [ ema200 . length   -   2 ]   &&         gb . data . candlesLow [ gb . data . candlesLow . length   -   2 ]   >  ema200 [ ema200 . length   -   2 ]   &&         gb . data . candlesClose [ gb . data . candlesClose . length   -   2 ]   >  ema200 [ ema200 . length   -   2 ]   &&          // candle open > upper keltner         gb . data . candlesOpen [ gb . data . candlesOpen . length   -   1 ]   >  keltnerChannel . upper [ keltnerChannel . upper . length   -   1 ]   &&          // obv ma 21 > obv         obvMa21 [ obvMa21 . length   -   1 ]   >  obv [ obv . length   -   1 ]   &&          // macd > signal         macd  >  macdSignal      )      const  sellConditions  =   (         gb . data . gotBag   &&         gb . data . openOrders . length   ===   0      )      const  stopConditions  =   (         gb . data . gotBag   &&         gb . data . openOrders . length   >   0   &&         gb . data . bid   <  stopTarget      )      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // order handling      if   ( entryConditions )   {         gb . method . buyMarket ( buyAmount ,  gb . data . pairName )          setTimestamp ( )      }      else   if   ( sellConditions )   {         gb . method . sellLimit ( gb . data . quoteBalance ,  sellTarget ,  gb . data . pairName )          setTimestamp ( )      }      else   if   ( stopConditions )   {         gb . method . sellMarket ( gb . data . quoteBalance ,  gb . data . pairName )          setTimestamp ( )      } } Dual RSI ​ // require external modules const  _  =  gb . method . require ( gb . modulesPath   +   '/lodash' ) // forced short wait time between runs that do something // mostly to reduce risk of double orders in case the exchange doesn't update balances immediately let  enoughTimePassed  =   false if   ( _ . isNil ( gb . data . pairLedger . customStratStore ) )   {     gb . data . pairLedger . customStratStore   =   { }      if   ( _ . isNil ( gb . data . pairLedger . customStratStore . timeCheck ) )   {         gb . data . pairLedger . customStratStore . timeCheck   =   Date . now ( )      }      else   {          if   ( Date . now ( )   -  gb . data . pairLedger . customStratStore . timeCheck   >   8000 )   {             enoughTimePassed  =   true          }      } } const   setTimestamp   =   function   ( )   {     gb . data . pairLedger . customStratStore . timeCheck   =   Date . now ( ) } if   ( enoughTimePassed )   {      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // collect indicator data      let  rsi10      let  rsi20     gb . method . tulind . indicators . rsi . indicator ( [ gb . data . candlesClose ] ,   [ 10 ] ,   function   ( err ,  results )   {         rsi10  =  results [ 0 ]      } ) ;     gb . method . tulind . indicators . rsi . indicator ( [ gb . data . candlesClose ] ,   [ 20 ] ,   function   ( err ,  results )   {         rsi20  =  results [ 0 ]      } ) ;      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // trading conditions      const  entryConditions  =   (           rsi10 [ rsi10 . length   -   1 ]   >  rsi20 [ rsi20 . length   -   1 ]   &&         rsi10 [ rsi10 . length   -   2 ]   <  rsi20 [ rsi20 . length   -   2 ]        )      const  exitConditions  =   (         gb . data . gotBag   &&         rsi10 [ rsi10 . length   -   1 ]   <  rsi20 [ rsi20 . length   -   1 ]   &&         rsi10 [ rsi10 . length   -   2 ]   >  rsi20 [ rsi20 . length   -   2 ]        )      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // order handling      const  buyAmount  =   parseFloat ( gb . data . pairLedger . whatstrat . TRADING_LIMIT )   /  gb . data . bid           if   ( entryConditions )   {         gb . method . buyMarket ( buyAmount ,  gb . data . pairName )          setTimestamp ( )      }      else   if   ( exitConditions )   {         gb . method . sellMarket ( gb . data . quoteBalance ,  gb . data . pairName )          setTimestamp ( )      } } Trail price after stochRsi target ​ // require external modules const  _  =  gb . method . require ( gb . modulesPath   +   '/lodash' ) // forced short wait time between runs that do something // mostly to reduce risk of double orders in case the exchange doesn't update balances immediately let  enoughTimePassed  =   false if   ( _ . isNil ( gb . data . pairLedger . customStratStore ) )   {     gb . data . pairLedger . customStratStore   =   { }      if   ( _ . isNil ( gb . data . pairLedger . customStratStore . timeCheck ) )   {         gb . data . pairLedger . customStratStore . timeCheck   =   Date . now ( )      }      else   {          if   ( Date . now ( )   -  gb . data . pairLedger . customStratStore . timeCheck   >   8000 )   {             enoughTimePassed  =   true          }      } } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// // functions used in strategy  const   setTimestamp   =   function   ( )   {     gb . data . pairLedger . customStratStore . timeCheck   =   Date . now ( ) } const   clearTrailingTargets   =   function   ( )   {      if   ( ! _ . isNil ( gb . data . pairLedger . customStratStore . sellTrailingTarget ) )   {          delete  gb . data . pairLedger . customStratStore . sellTrailingTarget      }      if   ( ! _ . isNil ( gb . data . pairLedger . customStratStore . buyTrailingTarget ) )   {          delete  gb . data . pairLedger . customStratStore . buyTrailingTarget      } } if   ( enoughTimePassed )   {      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // start price trailing after hitting stochRsi target      const  buyAmount  =   parseFloat ( gb . data . pairLedger . whatstrat . TRADING_LIMIT )   /  gb . data . bid      // handle buy trailing, start trailing after stochRsi target hits      if   ( _ . isNil ( gb . data . pairLedger . customStratStore . buyTrailingTarget )   &&  gb . data . stochRsi   <   0.1   &&   ! gb . data . gotBag )   {          // set initial trailing stop         gb . data . pairLedger . customStratStore . buyTrailingTarget   =  gb . data . ask   *   1.005      }      else   if   ( ! _ . isNil ( gb . data . pairLedger . customStratStore . buyTrailingTarget )   &&  gb . data . pairLedger . customStratStore . buyTrailingTarget   >  gb . data . ask   *   1.005 )   {          // update trailing stop         gb . data . pairLedger . customStratStore . buyTrailingTarget   =  gb . data . ask   *   1.005      }      // handle sell trailing, start trailing after stochRsi target hits      if   ( _ . isNil ( gb . data . pairLedger . customStratStore . sellTrailingTarget )   &&  gb . data . stochRsi   >   0.9   &&  gb . data . gotBag )   {          // set initial trailing stop         gb . data . pairLedger . customStratStore . sellTrailingTarget   =  gb . data . bid   *   0.995      }      else   if   ( ! _ . isNil ( gb . data . pairLedger . customStratStore . sellTrailingTarget )   &&  gb . data . pairLedger . customStratStore . sellTrailingTarget   <  gb . data . bid   *   0.995 )   {          // update trailing stop         gb . data . pairLedger . customStratStore . sellTrailingTarget   =  gb . data . bid   *   0.995      }      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      // fire orders when hitting a trailing stop, remove trailing stop after placing order      if   ( ! _ . isNil ( gb . data . pairLedger . customStratStore . buyTrailingTarget )   ?         gb . data . ask   >  gb . data . pairLedger . customStratStore . buyTrailingTarget   :          false )   {         gb . method . buyMarket ( buyAmount ,  gb . data . pairName )          clearTrailingTargets ( )          setTimestamp ( )      }      else   if   ( ! _ . isNil ( gb . data . pairLedger . customStratStore . sellTrailingTarget )   ?         gb . data . bid   <  gb . data . pairLedger . customStratStore . sellTrailingTarget   :          false )   {         gb . method . sellMarket ( gb . data . quoteBalance ,  gb . data . pairName )          clearTrailingTargets ( )          setTimestamp ( )      } } How to make Gunbot run a custom strategy ​ Step one (not pictured below) is to create your custom strategy file and have it saved in the  ./customStrategies  folder. You can do this using the built in code editor in the Gunbot interface, or by using your preferred code editor software. The steps below show how to actually run the strategy file. Then select 'custom' as strategy when adding or modifying a pair. In the filename field, select your strategy file. The indicators tab gives you control over how pre calculated indicator data is generated. These are indicators you can access in your strategy. You are not limited to using these indicators, this is just easily accessible data. tip It's recommended to disable the global cancel orders option when running a custom strategy. Trading methods ​ A strategy can use a number of methods to place or cancel orders, or fetch additional OHLCV data. Trading methods can be called as function, without waiting for it's return value. Alternatively, when calling a method you can wait for its  Promise  to resolve. This way you can create a promise chain using the  then()  method. Built in modules ​ The require module allow you to use additional javascript modules, like those freely available on NPM. With  tulind  you can easily calculate your own indicator values. Method Returns Extra info gb.method.buyMarket(amount, pair, exchange) Promise Places a market buy order, amount in quote. Exchange is optional. gb.method.sellMarket(amount, pair, exchange) Promise Places a market sell order, amount in quote. Exchange is optional. gb.method.buyLimit(amount, price, pair, exchange) Promise Places a limit buy order, amount in quote. Exchange is optional. gb.method.sellLimit(amount, price, pair, exchange) Promise Places a limit sell order, amount in quote gb.method.buyLimitPostOnly(amount, price, pair, exchange) Promise Places a limit buy order, amount in quote gb.method.sellLimitPostOnly(amount, price, pair, exchange) Promise Places a limit sell order, amount in quote gb.method.closeMarket(pair, amount, exchange) Promise Places a market close order, for futures. Amount in quote. gb.method.closeLimit(price, pair, amount, exchange) Promise Places a limit close order, for futures. Amount in quote. gb.method.cancelOrder(orderId, pair, exchange) Promise Cancels a specified open order. gb.method.getLedger(pair, exchange) Object Get pair state for other pairs Use this to retrieve Gunbot pair state data from other active trading pairs, the returned is largely the same as what you'd find in pair state json files. gb.method.getCandles(interval, period, pair, exchange) Promise Get additional OHLCV data. Easiest to call using  await , see usage example in the example strategies. Beware: frequent usage can quickly lead to exceeding exchange API rate limits. gb.method.getTrend(pair, exchange, exchange) Promise Returns an object with the same trend data as used in stepgridhybrid/stepgridhedge. Can only be called for pairs actively cycling. Calling this method leads to significant additional API usage, because candle data in 15m, 1h and 4h timeframes gets requested. Trend and candle data additionally gets stored to Gunbot pair state. gb.method.setTimeScaleMark(pair, exchange, message) Mark on chart Timescale marks are the marks on the chart x axis, that by default show details for filled orders. With this method you can display any string in a mark on a specific bar. When multiple messages get stored for the same candle, they will be shown together in one mark. Timestamp is set automatically, no need to include it in the message text. gb.method.tulind [#parameters#] array Get  100+ different indicators. You can use the available OHLCV data, or use your own inputs. See the example strategies for a usage example. gunbot.method.require(module) function Bring your own modules using  require . See the example strategies for a usage example. To use an external module, first place it in a folder called 'user_modules' in the Gunbot root folder. Then require it in your strategy code, like this: On Linux (and likely macOS):  const cryptopanic = gb.method.require(gb.modulesPath + '/cryptopanic') On Windows: const cryptopanic = gb.method.require(gb.modulesPath + '\cryptopanic') The above assumes you have a module in a folder called cryptopanic in the user_modules folder.  gb.modulesPath  returns the path to whereever your gunbot folder is on your filesystem. Available data ​ A strategy can use all available pair data in Gunbot, easily accessible with unique property names. Indicators mentioned in the list below are pre calculated using the indicator settings in your Gunbot strategy. Some indicators don't have configurable strategy parameters and just use the generally accepted standard inputs for the indicator. Property Returns Extra info gb.data.config object Gunbot config.js contents gb.data.pairLedger object Contains the complete pair ledger. Can also be used to store and access your own persistent variables. Make sure to not overwrite existing properties. This has the same data as you see in the pair JSON files. Most items below come from the ledger too, they are renamed for consistency and already parsed as floating point numbers. gb.data.pairName string Current pair name, like  USDT-BTC gb.data.exchangeName string Current exchange name, like  binance gb.data.balances object Object with all balances on same exchange gb.data.quoteBalance float Pair quote balance, like BTC balance on an USDT-BTC pair Specific to spot trading gb.data.baseBalance float Base balance, like USDT balance on an USDT-BTC pair gb.data.onOrdersBalance float Quote balance value of open orders for current pair gb.data.openOrders array Open orders for current pair gb.data.orders array History of filled orders for current pair gb.data.orderbook object First 10 bid and ask entries in orderbook, price and volume gb.data.breakEven float Break even price for current  spot  holdings. Includes trading fees as defined in Gunbot exchange settings gb.data.gotBag boolean Indicates if value of  quoteBalance for  spot  trading (including on orders volume) exceeds min volume to sell as defined in Gunbot strategy gb.data.leverage float Leverage of current  futures  position gb.data.walletBalance float Wallet balance. Specific to  futures gb.data.availableMargin float Available margin balance. Specific to futures gb.data.maintenanceMargin float Maintenance margin requirement for futures account gb.data.maxNotionalValue float Max notional value for futures position at current leverage gb.data.totalPositionInitialMargin float Total initial position margin requirement for all current futures positions gb.data.totalOpenOrderInitialMargin float Total initial margin requirement for open futures orders gb.data.currentQty float Futures position size gb.data.currentSide string Indicates current futures position side Possible values:  long ,  short ,  none gb.data.liquidationPrice float Futures position liquidation price gb.data.period float Candle size as set in Gunbot strategy PERIOD setting. This period is used for all pre calculated indicator values gb.data.bid float Highest bid price gb.data.ask float Lowest ask price gb.data.ema1 float Latest indicator value gb.data.ema2 float Latest indicator value gb.data.ema3 float Latest indicator value gb.data.BTCUSDprice float Latest BTC/USD price on same exchange (or equivalent spot pair, depending on availability) gb.data.mfi float Latest indicator value gb.data.rsi float Latest indicator value gb.data.lowBB float Latest indicator value gb.data.highBB float Latest indicator value gb.data.tenkan float Latest indicator value gb.data.chikou float Latest indicator value gb.data.kijun float Latest indicator value gb.data.senkouSpanA float Latest indicator value gb.data.senkouSpanB float Latest indicator value gb.data.fastSma float Latest indicator value gb.data.slowSma float Latest indicator value gb.data.R1 float Latest indicator value gb.data.S1 float Latest indicator value gb.data.R2 float Latest indicator value gb.data.S2 float Latest indicator value gb.data.macd float Latest indicator value gb.data.macdSignal float Latest indicator value gb.data.macdHistogram float Latest indicator value gb.data.stochK float Latest indicator value gb.data.stochD float Latest indicator value gb.data.stochRsi float Latest indicator value gb.data.atr float Latest indicator value gb.data.fib object Object with high and low Fibonacci retracement levels gb.data.vwma float Latest indicator value gb.data.diPlus float Latest indicator value gb.data.diMinus float Latest indicator value gb.data.adx float Latest indicator value gb.data.candlesOpen array Array of open values for OHLCV Sorted old to new (newest last) gb.data.candlesHigh array Array of high values for OHLCV Sorted old to new (newest last) gb.data.candlesLow array Array of low values for OHLCV Sorted old to new (newest last) gb.data.candlesClose array Array of close values for OHLCV Sorted old to new (newest last) gb.data.candlesVolume array Array of volume values for OHLCV Sorted old to new (newest last) gb.data.candlesTimestamp array Array of timestamp values for OHLCV Sorted old to new (newest last) gb.data.candles object Combined object with OHLCV data Storing data ​ The strategy code runs once every time Gunbot processes the pair. This means that any variable you assign inside the strategy gets reinitialized every time the code runs. To store variables in a more persistent way, use this object: 
 gb.data.pairLedger.customStratStore By default  customStratStore  is undefined, you need to create it before storing anything in there. Data saved here generally stays available, and persists between bot restarts. However, there is no guarantee the data stays intact - if for example the process gets killed it is possible the pair ledger gets reinitialized on next run. Gunbot native strategies are coded so that they depend as little as possible on internal persistently stored data, working with exchange provided data as much as possible. Consider doing the same when coding custom strategies. Visualize strategy targets ​ To easily monitor a custom strategy, trading targets can be visualized as lines on the chart in the GUI.   Simplest method to draw chart lines ​ If you set any of the following targets to a price, it's automatically drawn on the chart. gb . data . pairLedger . customBuyTarget gb . data . pairLedger . customSellTarget gb . data . pairLedger . customStopTarget gb . data . pairLedger . customCloseTarget gb . data . pairLedger . customTrailingTarget gb . data . pairLedger . customDcaTarget // example: gb . data . pairLedger . customBuyTarget   =   60000 Complete control over chart lines ​ Alternative to the 'easy' method, chart lines can be defined in pair ledger as an array of objects with more properties than just price. The number of lines and/or line properties can be changed at any time, the chart will reflect the changes within seconds gb . data . pairLedger . customChartTargets   =   [          {              text :   'some custom target line' ,   // each line needs a unique text              price :   91 ,              quantity :   '999' ,   // setting an empty string '' omits the quantity field              lineStyle :   2 ,   // 0: solid, 1: dotted, 2: dashed              lineLength :   5 ,   // 0 (right) - 100 (left)              extendLeft :   false ,                bodyBackgroundColor :   'rgba(255, 255, 255, 1)' ,   // can also be set as hex string              bodyTextColor :   'rgba(0, 0, 0, 0.7)' ,              bodyBorderColor :   'rgba(34, 116, 165, 1)' ,              quantityBackgroundColor :   'rgba(34, 116, 165, 1)' ,              lineColor :   'rgba(34, 116, 165, 1)' ,          } ] The following list of names cannot be used as text property for chart lines because they would conflict with existing charting options in non-custom Gunbot strategies: [      ""Resistance 1"" ,      ""Resistance 2"" ,        ""Support 1"" ,      ""Support 2"" ,      ""Buy at"" ,      ""Pingpong buy"" ,      ""Sell at"" ,      ""Sell target"" ,      ""Pingpong sell"" ,      ""Break even"" ,      ""Unit cost"" ,      ""Entry Price"" ,      ""Break even (short)"" ,      ""Entry Price (short)"" ,      ""RT BUY at"" ,      ""RT BUY UP at"" ,      ""RT SELL at"" ,      ""RT SELL at "" ,      ""RT SELL UP trailing stop"" ,      ""Buy trailing stop (tssl)"" ,      ""RT Buy trailing stop"" ,      ""Sell trailing stop (tssl)"" ,      ""Buy trailing stop (tm)"" ,      ""Sell trailing stop (tm)"" ,      ""DCA trailing stop"" ,      ""ROE trailing stop"" ,      ""ROE scalper stop"" ,      ""Stop limit"" ,      ""DCA buydown"" ,      ""Grid DCA target"" ,      ""Grid sell target"" ,      ""CLOSE at (fg)"" ,      ""Grid sell trailing"" ,      ""Grid sell trailing (fg)"" ,      ""Grid buy trailing"" ,      ""Grid buy trailing (fg)"" ,      ""New position trailing"" ,      ""New position trailing (fg)"" ,      ""Buy target (c)"" ,      ""DCA target (c)"" ,      ""Sell target (c)"" ,      ""Close target (c)"" ,      ""Trailing target (c)"" ,      ""Stop target (c)"" ] Send notifications to the GUI ​ To make the GUI display custom notifications, place one or more notifications in an array of objects in pair ledger. Once shown, the GUI automatically clears out the displayed notifications in pair ledger. gb . data . pairLedger . notifications   =   [      {            text :   'custom success notification' ,          variant :   'success' ,   // green          persist :   true   // notifications stays visible until dismissed      } ,      {            text :   'custom error notification' ,            variant :   'error' ,   // red          // persist can be omitted      } ,      {            text :   'custom info notification' ,          variant :   'info' ,   // blue          persist :   false      } ,      {            text :   ` multi line notification \n\nallow for more information spread over \nmultiple lines of text ` ,          variant :   'error' ,          persist :   true ,      } ] Display custom stats ​ Custom strategies can display an arbitrary number of additional fields in the overview sidebar, on the chart page. Use this to display your own statistics, or other data relevant to the strategy. Usage is similar to placing custom chart lines, the data is set by storing it as an array of objects in the pair ledger.  gb . data . pairLedger . sidebarExtras   =   [         {      label :   ` Item 1 ` ,   // string      value :   ` Your label ` ,   // string      tooltip :   ` Tooltip text for this element ` ,   // optional, can be omitted      valueColor :   '#e7e7' ,   // optional string with valid css color (hex, rgb, etc) } , {      label :   ` Item 2 ` ,   // string      value :   ` Your label ` ,   // string } , ] Add your own logs ​ Use the node fs module to get access to the file system. The example code below can be used as a simple pattern to create your own log files. // require the node fs module to get access to file system methods const  fs  =  gb . method . require ( 'fs' ) // create a stream to append data to a text file const  logger  =  fs . createWriteStream ( './gunbot_logs/custom-logs.txt' ,   { flags :   'a' } ) ; // log to file, starting on a new line by using \n logger . write ( ` \nLogging some random data  ${ Math . random ( ) } ` ) Write config changes ​ It can be convenient for a strategy to change settings in the gunbot config file. After a change to this file, Gunbot picks up the changes automatically.
The following example can be used as a simple way to modify  config.js . // require the node fs module to get access to file system methods const  fs  =  gb . method . require ( 'fs' ) // path of file to modify const  configPath  =   './config.js' // prepare config changes, for example place a new override on an existing pair let  configClone  =   { ... gb . data . config } configClone . pairs . mex_gunthy [ 'USDT-BTC' ] . override . YOUR_CUSTOM_PARAMETER   =   6 const  formattedConfig  =   JSON . stringify ( configClone ,   null ,   4 ) // write the changes, using a sync method so you can be sure the changes get written right when this line gets executed fs . writeFileSync ( configPath ,  formattedConfig ,   'utf8' ) Control strategy parameters from the GUI ​ Just like with every other strategy in Gunbot you can use pair overrides to control individual parameters of a strategy for a specific pair. This example shows how you can refer to an override value: // Set custom pair overrides in config.js // These show up in the GUI on the chart overview sidebar ""pairs"" :   {          ""binance"" :   {              ""USDT-BTC"" :   {                  ""strategy"" :   ""custom"" ,                  ""enabled"" :   true ,                  ""override"" :   {                      ""USER_SETTING"" :   true ,                      ""USER_TARGET"" :   ""2""                  }              }          }      } // Refer to them like this in your strategy code const  userSetting  =  gb . data . pairLedger . whatstrat . USER_SETTING const  userTarget  =   parseFloat ( gb . data . pairLedger . whatstrat . USER_TARGET ) The whatstrat object is a merged object of all parameters in a Gunbot strategy and pair overrides, where pair overrides always take precedence over strategy values. Always make sure to  parseFloat()  inputs where you expect a number, because the GUI saves these as string value. Parameters saved as pair override do not have to be known parameters in Gunbot, you can create your own settings this way. Previous tssl Next Balance settings Technical info Strategy examples Example 1 Example 2 Example 3 Example 4 Example 5 ""Real"" strategy examples Keltner crossover Dual RSI Trail price after stochRsi target How to make Gunbot run a custom strategy Trading methods Available data Storing data Visualize strategy targets Simplest method to draw chart lines Complete control over chart lines Send notifications to the GUI Display custom stats Add your own logs Write config changes Control strategy parameters from the GUI Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Dollar Cost Avg (DCA), https://wiki.gunthy.org/trading-strategy-options/dca,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Dollar Cost Avg (DCA) On this page Dollar Cost Avg (DCA) Double Up (DU) is a Gunbot feature to automatically average down assets, bringing down the average cost per unit when prices drop after a regular buy order. By bringing the average price per unit down, the price to exit the trade profitably gets lower. Of course, the obvious risk of averaging down is investing more in units that already dropped in price. Use this feature carefully. tip Use the  DU guestimator sheet  to simulate your DU settings. Feel free to make a copy of the file. Thanks  Trashdog01 ! How it works ​ Below is an example of using Double up. The relevant settings used in the example would be: DU_METHOD  set to  HIGHBB . With this method each DU buy is triggered when the upper Bollinger Band crosses down the last buy price. DOUBLE_UP_CAP  set to 1. Each DU buy is for 1:1 the amount of quote units already owned. DU_CAP_COUNT  set to 2. A maximum of two DU buys are allowed. DU_BUYDOWN  set to 1. The minimum required price difference for a DU buy compared to the buy price of the previous order. Note that this example is kept simple intentionally, the amounts do not reflect real trades. Using the example above: this is an overview of the buy orders made - notice how the average price per unit moves down after each DU buy: Units Price per unit Invested (cumulative) Avg Price per Unit Buy 100 12.500 1.250.000 12500 DU Buy 1 100 10.800 2.330.000 11650 DU Buy 2 200 8.090 3.948.000 9870 The resulting sell order would have profitably sold all available units at a much lower price than the initial buy order: Units Price per unit Proceeds Sell 400 10.000 4.000.000 Configurable options for averaging down are: Buydown:  A minimum price difference between the last buy and next DU buy. Regardless which DU method is picked, buydown must be reached for a DU buy. DU method:   HIGHBB  as shown above,  RSI  where DU buys are only placed within a configurable RSI range, and a  numerical  value defining a percentage price drop compared to the last bought price. Ratio:  Defines how much extra quote units are bought for each DU buy. Frequency:  How many DU buy orders are allowed. Trailing:  DU buy orders can optionally use trailing. danger Double Up can invest large amounts of base currency. Be careful about the set ratio and frequency, make sure you have enough free funds. Relevant settings ​ Following settings options are available Double Up. None of them are relevant in futures strategies. Double Up ​ Description Values Order types Name When set to true,  DOUBLE_UP  will try to get rid of bags by averaging down. Works on all strategies. Averaging down can use up a lot of balance, make sure you have enough of your base currency available to cover each double up buy. Gunbot will start averaging down a bag according to your setting for  DU_METHOD . Averaging down means that you buy more units at a lower price, bringing down the average price per unit. Values:  true or false Default value:  false Affects Does not affect DCA buy Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DOUBLE_UP DU Method ​ Description Values Order types Name This sets the trigger for placing buy orders with double up. When set to  HIGHBB  Gunbot will start averaging down a bag when the actual upper Bollinger Band drops below bought price (not the distance from it as set in  HIGH_BB ) and the current price is a percentage below last bought price, as set in  DU_BUYDOWN . When set to  RSI , buy orders will only be placed when the set  RSI_BUY_LEVEL  is reached and the current price is a percentage below last bought price, as set in  DU_BUYDOWN . When set to a  numerical  value like 2, buy orders will be placed when the price drops by 2% compared to the last bought price. Keep in mind that  DU_BUYDOWN  must still be reached when using numerical values for  DU_METHOD . Values:  HIGHBB, RSI, or a numerical value representing a percentage Default value:  HIGHBB Affects Does not affect DCA buy Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DU_METHOD Double Up Cap ​ Description Values Order types Name This defines the ratio to the pairs balance to be used for each consecutive buy when doubling up. Setting it to 0.5 would mean it uses a 0.5:1 ratio for averaging down. It is recommended to set this as high as you can afford, to increase your chance to actually average down and sell at profit. Make sure that the resulting amount for the first double up order exceeds  MIN_VOLUME_TO_SELL Example with ratio of 1: initial buy of 100 LTC, first double up buy order is 100 LTC, second will be 200 LTC, then 400 LTC, etc. Example with 0.5 ratio: initial buy of 100 LTC, first double up buy order is 50 LTC, then 75 LTC, then 112.5 LTC. Changing this setting after DU has started may lead to ""cap count"" not working as expected. Values:  numerical, represents a ratio. Default value:  1 Affects Does not affect DCA buy Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DOUBLE_UP_CAP DU Cap Count ​ Description Values Order types Name Sets the maximum number of times double up orders may be placed. When set to 1, a maximum number of 1 double up orders will be placed to average down. When you set this higher, double up can place more orders and has a higher chance of effectively averaging down and come closer to a profitable exit point each time it places a double up order. Values:  numerical Default value:  0 Affects Does not affect DCA buy Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DU_CAP_COUNT DU Buydown ​ Description Values Order types Name The minimum price drop compared to the last bought price that needs to occur for double up buys to be placed. Changing this setting after DU has started may lead to ""cap count"" not working as expected. Values:  numerical, represents a percentage Default value:  2 Affects Does not affect DCA buy Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DU_BUYDOWN RSI DU Buy ​ Description Values Order types Name Use this to specify the maximum RSI level for buying when  DU_METHOD  is set to RSI. Values:  numerical, ranging between 1 and 99 Default value:  30 Affects Does not affect DCA buy Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  RSI_DU_BUY Double up depends on several TrailMe settings to reach better entry points. The relevant settings are listed below. Trail Me DU ​ Description Values Order types Name Use this to enable tssl-style trailing for double up orders. Values:  true or false Default value:  false Affects Does not affect DCA buy Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  TRAIL_ME_DU Trail Me Buy Range ​ Description Values Order types Name This sets the buy range for TrailMe. Setting a range of 0.5% at a starting price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving downwards, the range moves down along with the price. As soon as prices start going upward, the range freezes and a buy order is placed when the price crosses the upper boundary of the range. Values:  numerical – represent a percentage. Default value:  0.5 Affects Does not affect Strategy buy RT sell RT Buy Strategy sell DCA buy Close Stop limit RT buyback Parameter name in  config.js :  TRAIL_ME_BUY_RANGE Previous Confirming indicators Next Reversal trading (RT) How it works Relevant settings Double Up DU Method Double Up Cap DU Cap Count DU Buydown RSI DU Buy Trail Me DU Trail Me Buy Range Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
adx, https://wiki.gunthy.org/trading-strategy-options/futures/adx,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies adx On this page adx This page describes how futures trading works with the ADX strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. Long / Buy ​ A long position is opened when DI- is smaller than DI+ and ADX is above  ADX_LEVEL . Short / Sell ​ A short position is opened when DI- is bigger than DI+ and ADX is above  ADX_LEVEL . Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  adx  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  adx . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  adx  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per trading pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  adx  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  adx  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with ADX. These settings have a direct effect on trading with  adx . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD ADX Level ​ Description Values Order types Name Sets the minimum trend level that needs to be reached for orders to be allowed. When set to 25, trades will be placed as soon as ADX is 25 or higher. Values:  numerical, ranging between 1 and 99. Default value:  25 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ADX_LEVEL DI Period ​ Description Values Order types Name Sets the number of candles used to calculate ADX. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  DI_PERIOD Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intented to be used for futures trading. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ADX_ENABLED Placeholder. ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous tssl Next atrts How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period ADX Level DI Period Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
atrts, https://wiki.gunthy.org/trading-strategy-options/futures/atrts,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies atrts On this page atrts This page describes how futures trading works with the ATRTS strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. Long / Buy ​ A long position is opened when the ask price crosses over ATR long value from the previous round. Short / Sell ​ A short position is opened when the bid price crosses under ATR short value from the previous round. Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  atrts  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  atrts . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  atrts  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  atrts  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  atrts  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with ATRTS. These settings have a direct effect on trading with  atrts . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD ATRx ​ Description Values Order types Name This value defines the multiplier used for calculation of the lower and upper limits for trading with  atrts When set to 5, ATR gets multiplied by 5 and the result gets subtracted from next rounds bid & added to next rounds ask to set the limits. Values:  numerical - represents a multiplier for ATR. Default value:  0.5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ATRX ATR Period ​ Description Values Order types Name The number of periods used for calculating ATR. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ATR_PERIOD Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous adx Next bbta How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period ATRx ATR Period Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
bb, https://wiki.gunthy.org/trading-strategy-options/futures/bb,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies bb On this page bb This page describes how futures trading works with the Bollinger Bands strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. danger Using  bb  (futures) is only meaningful with  MEAN_REVERSION  enabled. The info below assumes you have set this. The examples below show how the basic triggers for  bb  work. Additionally, you can use confirming indicators and settings like ROE trailing. Long ​ A long position is opened when the ask price is below  LOW_BB  and  LONG_LEVEL . In the example above  LOW_BB  would be set to 0, which represents the actual lower Bollinger Band. With different values you could set a target above (positive value) or below (negative value) the lower band. Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Short ​ A short position is opened when the bid price is above  HIGH_BB  and  SHORT_LEVEL . In the example above  HIGH_BB  would be set to 0, which represents the actual upper Bollinger Band. With different values you could set a target below (positive value) or above (negative value) the upper band. Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Strategy parameters ​ Following settings options are available for  bb  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  bb . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  bb  as buy and/or sell method. Long Level ​ Description Values Order types Name This sets the target for opening a long position at a percentage above the highest EMA. When you set this to 1, buy orders will only be placed when the current price is at least 1% above the currently highest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LONG_LEVEL Short Level ​ Description Values Order types Name This sets the target for opening a short position at a percentage below the lowest EMA. When you set this to 1, sell orders will only be placed when the current price is at least 1% below the currently lowest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Strategy buy DCA buy Parameter name in  config.js :  SHORT_LEVEL ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Mean Reversion ​ Description Values Order types Name When set to true, the strategy follows a mean reversion way of trading, instead of trend following. This setting must be enabled to use bb as buy or sell method. When set to false, this strategy reverts to the same behavior as the gain strategy. Long and short levels are reversed in this mode, long level is placed below EMA, short level is placed above EMA. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  MEAN_REVERSION Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  bb  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  bb  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with bb. These settings have a direct effect on trading with  bb , this is where you configure how Bollinger Bands are calculated and at which distance from them orders should be placed. Additionally, long and short level are dependent on EMA. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Low BB ​ Description Values Order types Name This sets the target for buying. Negative values are allowed. The bot will buy when price hits the set percentage from the lower Bollinger Band and the price is below the entry point as defined by  BUY_LEVEL . When set to 0, the lower Bollinger Band is the target. When set to 30, the target is 30% above the lower Bollinger Band - the upper band is at 100% from the lower band. Negative values are allowed. Values:  numerical – represent a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LOW_BB High BB ​ Description Values Order types Name This sets the target for selling. Negative values are allowed. The bot will sell when price hits the set percentage from the upper Bollinger Band and  GAIN  is reached. When set to 0, the upper Bollinger Band is the target (well, almost). When set to 30, the target is 30% under the upper Bollinger Band - the lower band is at 100% from the upper band. Negative values are allowed. Values:  numerical – represent a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy DCA buy (when using HIGHBB option for DCA) RT buyback RT sell Close Stop limit Strategy buy Parameter name in  config.js :  HIGH_BB SMA Period ​ Description Values Order types Name This defines the number of periods used for calculating Bollinger Bands. Values:  numerical – represents a number of candlesticks. Default value:  50 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  SMAPERIOD Standard Deviation ​ Description Values Order types Name This value defines the multiplier used for calculating Bollinger Bands. Values:  numerical (recommended: between 1.9 and 2.1) - represents a multiplier value used in the bollinger bands calculation. Default value:  2 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  STDV Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intented to be used for futures trading. TrailMe settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous bbta Next emaspread How to work with this strategy Long Short Strategy parameters Margin settings Long Level Short Level ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Mean Reversion Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period Low BB High BB SMA Period Standard Deviation Slow EMA Medium EMA Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
bbta, https://wiki.gunthy.org/trading-strategy-options/futures/bbta,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies bbta On this page bbta This page describes how futures trading works with the Bollinger Bands TA strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. The examples below show how the basic triggers for  bbta  work. Additionally, you can use confirming indicators and settings like ROE trailing. Long ​ A long position is opened when the ask price crosses over  LOW_BB . In the example above  LOW_BB  would be set to 0, which represents the actual lower Bollinger Band. With different values you could set a target above (positive value) or below (negative value) the lower band. Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Short ​ A short position is opened when the bid price crosses below  HIGH_BB . In the example above  HIGH_BB  would be set to 0, which represents the actual upper Bollinger Band. With different values you could set a target below (positive value) or above (negative value) the upper band. Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Strategy parameters ​ Following settings options are available for  bbta  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  bbta . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  bbta  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  bbta  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  bbta  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with BBTA. These settings have a direct effect on trading with  bbta , this is where you configure how Bollinger Bands are calculated and at which distance from them orders should be placed. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Low BB ​ Description Values Order types Name This sets the target for buying. Negative values are allowed. The bot will buy when price hits the set percentage from the lower Bollinger Band. When set to 0, the lower Bollinger Band is the target. When set to 30, the target is 30% above the lower Bollinger Band - the upper band is at 100% from the lower band. Negative values are allowed. Values:  numerical – represent a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LOW_BB High BB ​ Description Values Order types Name This sets the target for selling. Negative values are allowed. The bot will sell when price hits the set percentage from the upper Bollinger Band and  GAIN  is reached. When set to 0, the upper Bollinger Band is the target (well, almost). When set to 30, the target is 30% under the upper Bollinger Band - the lower band is at 100% from the upper band. Negative values are allowed. Values:  numerical – represent a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy DCA buy (when using HIGHBB option for DCA) RT buyback RT sell Close Stop limit Strategy buy Parameter name in  config.js :  HIGH_BB SMA Period ​ Description Values Order types Name This defines the number of periods used for calculating Bollinger Bands. Values:  numerical – represents a number of candlesticks. Default value:  50 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  SMAPERIOD Standard Deviation ​ Description Values Order types Name This value defines the multiplier used for calculating Bollinger Bands. Values:  numerical (recommended: between 1.9 and 2.1) - represents a multiplier value used in the bollinger bands calculation. Default value:  2 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  STDV Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous atrts Next bb How to work with this strategy Long Short Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period Low BB High BB SMA Period Standard Deviation Slow EMA Medium EMA Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
emaspread, https://wiki.gunthy.org/trading-strategy-options/futures/emaspread,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies emaspread On this page emaspread This page describes how futures trading works with the EMAspread strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. Long / Buy ​ A long position is opened when fast EMA is below slow EMA and the spread decreases. Short / Sell ​ A short position is opened when fast EMA is above slow EMA and the spread decreases. Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  emaspread  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  emaspread . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  emaspread  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  emaspread  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  emaspread  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with EMA spread. These settings have a direct effect on trading with  emaspread , this is where you configure the EMAs. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 EMAx ​ Description Values Order types Name Sets the minimum percentage difference between slow and fast EMA for  emaspread . When set to 1, the spread must reach at least 1% before  emaspread  can trigger a buy or sell. Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  EMAx Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. emaspread Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TAKE_PROFIT Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous bb Next futuresgrid How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period Slow EMA Medium EMA EMAx Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
futuresgrid, https://wiki.gunthy.org/trading-strategy-options/futures/futuresgrid,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies futuresgrid On this page futuresgrid A grid like strategy with dynamic trading targets and integrated trailing for both buying and selling. The idea of this strategy is to always be in a position, use market orders only, average down when prices goes down, take profit when price exceeds break even. And do so with an absolute minimum ****number of settings. This strategy is basically the same as ""spotgrid"", it's just made for futures and additionally offers the option to trade shorts. tip This strategy is a bit different than all other Gunbot strategies: there are just a handful configurable options and it's ""always in position"": instead of waiting for the perfect entry it is always looking for chances to average down.   If you want to customize settings a lot, this strategy is not for you. Trading behavior ​ When you run futuresgrid on a pair in an uptrend, this is the kind of trading behavior to expect: Let's break down what actually happens: When the strategy first runs and there is no balance to sell, it immediately places a market buy order If price goes down and it exceeds the futuresgrid line in the chart, buy trailing is activated. As soon as trailing finishes, a buy order is placed. The break even price is now lower. If price reaches the Sell target on the chart, sell trailing is activated and the complete position is sold at profit when trailing finishes. After having sold, the strategy immediately starts buy trailing. If price goes up it will quickly open a new position, if price goes down it will place a buy order below the last sell rate. You will see that the first few buy orders happen fairly quickly when price starts going down. After a few trades, the price distance between buy orders gets much bigger. All targets are set automatically. When the market goes down, the strategy starts to accumulate units at ever lower prices: The bot will continue to accumulate until max buy count is hit, or when it run out of available funds. Every new buy order will lower the break even price. As soon as price hits the sell target and finishes trailing above break even, a sell order is placed. Balance management is very important, make sure you can afford the planned number of buy orders. tip The next trading targets are always visible on the chart.  Keep in mind the targets lines are moving over time, they represent the current targets. How to create a futuresgrid strategy ​ Using the advanced strategy editor: create a new strategy and select futuresgrid as buy and sell method Essential settings ​ To use futuresgrid, there are just three essential settings: Setting Description Trading limit                            The amount to invest per buy order On an USDT-BTC pair, a trading limit of 20 means that every buy order is for 20 USDT. Always make sure that trading limit is set higher than min volume to sell. Max buy count Limits how many buy orders are allowed Setting a max buy count of 10 means that the bot may do up to 10 buy orders in a row, to average down in ever increasing price distance. Max open contracts                       Limits position size On an USDT-BTC pair, setting max open contracts to 0.1 means that no buy order gets fired if it would result in the total position exceeding 0.1 BTC. Direction Sets the direction to trade Pick either  LONG ,  SHORT  or  AUTO The AUTO mode uses a non configurable trend detection that uses EMA, OBV and ATR data from both 15m and 4h charts, and only opens a long or short if confirmed by the trend definitions. If in a position already and trend changes, the strategy will first attempt to close at profit before opening a position in the opposite direction. Trend variant Trend source to use when direction is set to 'AUTO'.  Legacy mode uses the strategy timeframe, plus 1h and 4h data. 4h uses the same trend module as in stepgridhedge, using 4h data only. 1h_15m uses the same trend module as in stepgridhedge, using data from 1h and 15m charts. There are a few more settings that can optionally be used with this strategy, described below Additional settings ​ There are a few additional settings you can use with this strategy. Setting Description Stop after next sell                               To stop trading a pair after the position closes When enabled, no new position gets opened. Averaging down of the current position continues. Auto gain  Activates dynamic sell target  Enabled by default. The dynamic target is based on the distance between support and resistance, capped at a minimum profit of 2x trading fees. The target decreases when position size increases. Overrules a manually set target. Gain Manual sell target value Set a manual sell target, as a percentage above the break even price. The sell target is where trailing starts. With 0.5 as value, the sell target is 0.5% above break even. Grid multiplier Controls the distances between buy orders  Can be used to increase or decrease the distance between buy orders. The default value 1 means that the hardcoded levels are used. 1.5 would increase the levels with a factor 1.5x, a value of 0.5 would halve the default levels. Trading limit multiplier Can be used to increase or decrease the invested amount with each consecutive buy order. Examples with trading limit 100 USDT and max buy count 3: 1: each buy order is for 100 USDT 1.5: first buy 100, second buy 150, third buy 225 2: first buy 100, second buy 200, third buy 400 Period Sets the chart interval The default period is 15. Make sure to only use  supported period values. SMA period How many candles are used for calculating support and resistance levels  By default 50 candles are used to calculate support and resistance. First order delay Additional delay after opening a new trade. Does not apply to DCA orders. Value in seconds. Can be used to prevent multiple orders in case the exchange does not update balances fast enough. Minimum buydown Minimum distance between two orders Set a minimum distance between two orders that add to a position. Value represents a percentage. This acts as an override to the built-in buydown levels that increase with each additional dca order. When set to 0.6, this means that the minimum distance is 0.6%. Keep 1x TL Save fees on first trade Instead of reopening a position shortly after closing one, with this setting enabled the bot will keep 1x trading limit open when (partially) closing a position. tip Other parameters  Buy and Sell enabled options can be set as pair overrides. Watch mode is respected. Besides settings mentioned on this page, no other strategy setting has any effect on futuresgrid. Previous emaspread Next gain Trading behavior How to create a futuresgrid strategy Essential settings Additional settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
gain, https://wiki.gunthy.org/trading-strategy-options/futures/gain,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies gain On this page gain This page describes how futures trading works with the Gain strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. The examples below show how the basic triggers for  gain  work. Additionally, you can use confirming indicators and settings like ROE trailing. Long (regular: trend following) ​ A long position is opened when the ask price is equal to or above  LONG_LEVEL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Short (regular: trend following) ​ A short position is opened when the bid price is equal to or below  SHORT_LEVEL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Long (mean reversion mode) ​ In  MEAN_REVERSION  mode the behavior for  LONG_LEVEL  and  SHORT_LEVEL  is reversed in this strategy. A long position is opened when the ask price is equal to or below  LONG_LEVEL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Short (mean reversion mode) ​ In  MEAN_REVERSION  mode the behavior for  LONG_LEVEL  and  SHORT_LEVEL  is reversed in this strategy. A short position is opened when the bid price is equal to or above  SHORT_LEVEL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Strategy parameters ​ Following settings options are available for  gain  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  gain . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  gain  as buy and/or sell method. Long Level ​ Description Values Order types Name This sets the target for opening a long position at a percentage above the highest EMA. When you set this to 1, buy orders will only be placed when the current price is at least 1% above the currently highest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LONG_LEVEL Short Level ​ Description Values Order types Name This sets the target for opening a short position at a percentage below the lowest EMA. When you set this to 1, sell orders will only be placed when the current price is at least 1% below the currently lowest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Strategy buy DCA buy Parameter name in  config.js :  SHORT_LEVEL ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Mean Reversion ​ Description Values Order types Name When set to true, the strategy follows a mean reversion way of trading, instead of trend following. Long and short levels are reversed in this mode, long level is placed below EMA, short level is placed above EMA. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  MEAN_REVERSION Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  gain  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  gain  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with gain. These settings have a direct effect on trading with  gain , this is where you configure EMAs. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intented to be used for futures trading. TrailMe settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous futuresgrid Next ichimoku How to work with this strategy Long (regular: trend following) Short (regular: trend following) Long (mean reversion mode) Short (mean reversion mode) Strategy parameters Margin settings Long Level Short Level ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Mean Reversion Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period Slow EMA Medium EMA Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
ichimoku, https://wiki.gunthy.org/trading-strategy-options/futures/ichimoku,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies ichimoku On this page ichimoku This page describes how futures trading works with the  ichimoku  strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. For this strategy it is recommended to use an additional momentum indicator to confirm long and short entries. Long / Buy ​ Before a long position is opened, one of the following conditions must occur to put Gunbot on ""long alert"": The current candle crosses over Kumo. This means that all of open, close, high and low must be above Kumo. Tenkan-sen crosses over Kijun-sen, above Kumo. A long position is then opened when both of the following confirmations happens in a later cycle, they do not have to happen in the same cycle: Chikou-span crosses over the ""past Kumo"" (Kumo value of x periods ago, defined by  DISPLACEMENT ). The ""future Kumo"" is bullish/green (Kumo value of x periods in the future, defined by  DISPLACEMENT ). Short / Sell ​ Before a short position is opened, one of the following conditions must occur to put Gunbot on ""short alert"": The current candle crosses below Kumo. This means that all of open, close, high and low must be below Kumo. Tenkan-sen crosses under Kijun-sen, below Kumo. A short position is then opened when both of the following confirmations happens in a later cycle, they do not have to happen in the same cycle: Chikou-span crosses under the ""past Kumo"" (Kumo value of x periods ago, defined by  DISPLACEMENT ). The ""future Kumo"" is bearish/red (Kumo value of x periods in the future, defined by  DISPLACEMENT ). Close ​ A long position is closed when the current candle crosses under Tenkan-sen, Kijun-sen or Kumo. This means that all of open, close, high and low must be below the selected item. Alternatively, you can set a ROE target for closing a position. A short position is closed when the current candle crosses over Tenkan-sen, Kijun-sen or Kumo. This means that all of open, close, high and low must be above the selected item. Alternatively, you can set a ROE target for closing a position. You can configure which of the three items is used for closing a position, with  TENKAN_CLOSE ,  KIJUN_CLOSE ,  KUMO_CLOSE  or  ROE_CLOSE . If multiple of these parameters are set to true, the first of which occurs will close the position. Stop ​ A long position is stopped when the current candle crosses under Tenkan-sen, Kijun-sen or Kumo. This means that all of open, close, high and low must be above the selected item. A short position is stopped when the current candle crosses over Tenkan-sen, Kijun-sen or Kumo. This means that all of open, close, high and low must be over the selected item. You can configure which of the three items is used for stopping a position, with  TENKAN_STOP ,  KIJUN_STOP  or  KUMO_STOP . If multiple of these parameters are set to true, the first of which occurs will close the position. Make sure to use different lines for closing and stopping a position. After a stop is hit, the ""alert"" conditions for a long or short must happen again before another position is opened. Strategy parameters ​ Following settings options are available for  ichimoku  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  ichimoku . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  ichimoku  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  ichimoku  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  ichimoku  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with EMA spread. These settings have a direct effect on trading with  ichimoku . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Tenkan Period ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating Tenkan-sen. This parameter is for what's called ""base line"" on TradingView. Values:  numerical, represents a number of candlestick periods. Default value:  9 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit DCA buy Parameter name in  config.js :  TENKAN_PERIOD Kijun Period ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating Kijun-sen. This parameter is for what's called ""base line"" on TradingView. Values:  numerical, represents a number of candlestick periods. Default value:  26 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit DCA buy Parameter name in  config.js :  KIJUN_PERIOD Senkouspan Period ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating Senkou span. This parameter is for what's called ""lead"" on TradingView. Values:  numerical, represents a number of candlestick periods. Default value:  52 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit DCA buy Parameter name in  config.js :  SENKOUSPAN_PERIOD Displacement ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for displacing Kumo and Chikou-span. Values:  numerical, represents a number of candlestick periods. Default value:  26 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback Close RT sell Stop limit DCA buy Parameter name in  config.js :  DISPLACEMENT Kumo Close ​ Description Values Order types Name Enable this to close a position when the current candle moves completely below (long) or above (short) Kijun-sen. Do not enable multiple close triggers. Values:  true or false Default value:  false Affects Does not affect Close Strategy sell RT buy RT buyback RT sell Strategy buy DCA buy Stop limit Parameter name in  config.js :  KUMO_CLOSE Tenkan Close ​ Description Values Order types Name Enable this to close a position when the current candle moves completely below (long) or above (short) Tenkan-sen. Do not enable multiple close triggers. Values:  true or false Default value:  true Affects Does not affect Close Strategy sell RT buy RT buyback RT sell Strategy buy DCA buy Stop limit Parameter name in  config.js :  TENKAN_CLOSE Kijun Close ​ Description Values Order types Name Enable this to close a position when the current candle moves completely below (long) or above (short) Kijun-sen. Do not enable multiple close triggers. Values:  true or false Default value:  false Affects Does not affect Close Strategy sell RT buy RT buyback RT sell Strategy buy DCA buy Stop limit Parameter name in  config.js :  KIJUN_CLOSE ROE Close ​ Description Values Order types Name Enable this to stop a position when ROE is reached. Do not enable multiple close triggers. Values:  true or false Default value:  false Affects Does not affect Close Strategy sell RT buy RT buyback RT sell Strategy buy DCA buy Stop limit Parameter name in  config.js :  ROE_CLOSE Kumo Stop ​ Description Values Order types Name Enable this to stop a position when the current candle moves completely below (long) or above (short) Kumo. Do not enable multiple stop triggers. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Close Strategy sell RT buy RT buyback RT sell Strategy buy DCA buy Stop limit Parameter name in  config.js :  KUMO_STOP Tenkan Stop ​ Description Values Order types Name Enable this to close a position when the current candle moves completely below (long) or above (short) Tenkan-sen. Do not enable multiple stop triggers. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy Close Strategy sell RT buy RT buyback RT sell Strategy buy DCA buy Stop limit Parameter name in  config.js :  TENKAN_STOP Kijun Stop ​ Description Values Order types Name Enable this to stop a position when the current candle moves completely below (long) or above (short) Kijun-sen. Do not enable multiple stop triggers. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy Close Strategy sell RT buy RT buyback RT sell Strategy buy DCA buy Stop limit Parameter name in  config.js :  KIJUN_STOP Ichimoku Protection ​ Description Values Order types Name Enable this to only allow trades when they are confirmed by the cloud. Set this to false to ignore Kumu trends. When enabled, buy orders can only happen above Kumo, sell orders can only happen below Kumo. Values:  true or false Default value:  true Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ICHIMOKU_PROTECTION Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_SELL Placeholder. KUMO_BUY Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. STOP_LIMIT Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_SELL Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. Previous gain Next macd How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period Tenkan Period Kijun Period Senkouspan Period Displacement Kumo Close Tenkan Close Kijun Close ROE Close Kumo Stop Tenkan Stop Kijun Stop Ichimoku Protection Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
macd, https://wiki.gunthy.org/trading-strategy-options/futures/macd,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies macd On this page macd This page describes how futures trading works with the  MACD  strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. Long / Buy ​ A long position is opened when MACD crosses up the signal line. Short / Sell ​ A short position is opened when MACD crosses down the signal line. Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  macd  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  macd . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  macd  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  macd  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  macd  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with EMA spread. These settings have a direct effect on trading with  macd . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD MACD Short ​ Description Values Order types Name The number of periods used for calculating the short-term moving average for MACD. Values:  numerical, represents a number of periods. Default value:  5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_SHORT MACD Long ​ Description Values Order types Name The number of periods used for calculating the long-term moving average for MACD. Values:  numerical, represents a number of periods. Default value:  20 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_LONG MACD Signal ​ Description Values Order types Name The number of periods used for calculating the MACD signal line. Values:  numerical, represents a number of periods. Default value:  10 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_SIGNAL Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous ichimoku Next macdh How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period MACD Short MACD Long MACD Signal Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
macdh, https://wiki.gunthy.org/trading-strategy-options/futures/macdh,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies macdh On this page macdh This page describes how futures trading works with the MACDH strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. Long / Buy ​ A long position is opened when MACDH crosses over zero. Short / Sell ​ A short position is opened when MACDH crosses under zero. Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  macdh  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  macdh . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  macdh  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  macdh  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  macd  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with EMA spread. These settings have a direct effect on trading with  macdh . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD MACD Short ​ Description Values Order types Name The number of periods used for calculating the short-term moving average for MACD. Values:  numerical, represents a number of periods. Default value:  5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_SHORT MACD Long ​ Description Values Order types Name The number of periods used for calculating the long-term moving average for MACD. Values:  numerical, represents a number of periods. Default value:  20 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_LONG MACD Signal ​ Description Values Order types Name The number of periods used for calculating the MACD signal line. Values:  numerical, represents a number of periods. Default value:  10 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_SIGNAL Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous macd Next pp How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period MACD Short MACD Long MACD Signal Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
pp, https://wiki.gunthy.org/trading-strategy-options/futures/pp,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies pp On this page pp This page describes how futures trading works with the PingPong strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. The examples below show how the basic triggers for  pp  work. Additionally, you can use confirming indicators and settings like ROE trailing. Long (regular: trend following) ​ A long position is opened when the ask price is equal to or above  PP_BUY . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Short (regular: trend following) ​ A short position is opened when the bid price is equal to or below  PP_SELL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Long (mean reversion mode) ​ In  MEAN_REVERSION  mode the behavior for  PP_BUY  and  PP_SELL  is reversed in this strategy. A long position is opened when the ask price is equal to or below  PP_BUY . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Short (mean reversion mode) ​ In  MEAN_REVERSION  mode the behavior for  PP_BUY  and  PP_SELL  is reversed in this strategy. A short position is opened when the bid price is equal to or above  PP_SELL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Strategy parameters ​ Following settings options are available for  pp  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  pp . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  pp  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Mean Reversion ​ Description Values Order types Name When set to true, the strategy follows a mean reversion way of trading, instead of trend following. Long and short levels are reversed in this mode, long level is placed below EMA, short level is placed above EMA. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  MEAN_REVERSION Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  gain  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED PP Buy ​ Description Values Order types Name This sets the exact target price for placing a buy order. A buy order will be placed as soon as this price is hit or an even better price is available. For example: when trading a BTC-x pair with  PP_BUY  set to 0.00123456, a buy order will be placed in the first cycle where the ask price is 0.00123456 or lower. Values:  numerical – represents a price in base currency. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  PP_BUY NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  gain  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED PP Sell ​ Description Values Order types Name This sets the exact target price for placing a sell order. A sell order will be placed as soon as this price is hit or an even better price is available. For example: when trading a BTC-x pair with  PP_SELL  set to 0.00123456, a buy order will be placed in the first cycle where the bid price is 0.00123456 or lower. Values:  numerical – represents a price in base currency. Default value:  0 Affects Does not affect Strategy sell Strategy buy Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  PP_SELL Indicator settings ​ As  pp  is purely price based, there are no indicators that directly influence trading with  pp . Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intented to be used for futures trading. TrailMe settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TAKE_BUY Placeholder. TAKE_PROFIT Placeholder. TBUY_RANGE Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous macdh Next sgsfutures How to work with this strategy Long (regular: trend following) Short (regular: trend following) Long (mean reversion mode) Short (mean reversion mode) Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Mean Reversion Buy settings Buy enabled PP Buy NBA Sell settings Sell enabled PP Sell Indicator settings Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
sgsfutures, https://wiki.gunthy.org/trading-strategy-options/futures/sgsfutures,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies sgsfutures On this page sgsfutures A futures strategy that's almost exactly like the spot  stepgridscalp   strategy. The main difference is that it does not (small stop losses aside) partially close trades at prices worse than avg. entry price. Default settings differ from spot, and ensure a higher trading frequency. info Currently this strategy runs in long only mode. Short mode will come in a future release. Key features: truly multi timeframe: user configurable low, medium und high timeframes for monitoring aspects like trend changes, momentum strength and more. For example you could trade on 5m charts, while also monitoring 15m and 4h. different trading styles that are automatically used when opportune:  normal grid trading  cautious 'scalping' in upper ranges: aiming to exit the zone with no or a very small sized bag, using a smaller amount per buy order, strict buydowns for DCA and very cautious sell trailing trade supports: when the market looks very bad, grid buy trading stops and the strategy moves into a mode where it trades higher timeframe supports with limit orders different sell trailing styles that are automatically used when opportune:  regular trailing, with dynamic trailing ranges candle low trailing, to trail bigger moves upwards micro stop loss style, to quickly start sell trailing after riskier buy orders, accepting a tiny loss as outcome quick detection of trend direction changes info Cancel orders must be disabled in the global bot settings when you use the 'trade supports' option (you can do that on the setup page). About the trend module ​ The trend options are what set this strategy apart from other similar strategies. The exact details are not public to protect the work of the author, but how the data is used is a lot simpler and more transparent than in previous strategies that use black box data. 
 All data mentioned below, is visible in the right sidebar on the chart page Phase system ​ Using data from three configurable timeframes, one out of six phases gets recognized at any time: 1: very bearish
2: bullish reversal
3: bullish
4: very bullish
5: bearish reversal
6: bearish Trend sync  uses the phase system to determine if any of the following is allowed: opening new trades, coming from a situation where there is no balance to sell grid trading pausing grid trading, and placing limit orders at higher timeframe supports Trend plus  uses the phase system to apply dynamic trailing ranges, for example by increasing the sell trailing range in a very bullish market. Trend scalping  uses the phase system to go into 'scalping mode' when the market is either bullish, or very bullish. This mode using a more careful sell trailing mechanism (including tiny, partial stop losses), and reduces the number of 'high' buy orders, and instead buying more when price is slightly moving down again.  All trend options can be used together, or individually. Overbought status and momentum ​ By monitoring higher timeframes to determine if (and how much) the market is overbought and if the current momentum is bullish or bearish, the strategy can be either more careful with new trades, or extend trailing ranges to aim for more profit.  The  strict entry  and  strict dca  options depend heavily on longer term momentum status. Overview of restrictions ​ This strategy offers several settings that put restrictions on when new trades may be opened and when DCA is allowed, most of these settings can be used together.  When all restrictions are disabled, the strategy behaves like a more configurable version of stepgrid with small hardcoded limits on repeated buy orders in the same price zone, with much better sell trailing. The overview below describes the main impact of each restrictive setting. Setting Restrictions on new trades Restrictions on any buy order Price action analysis New trades not allowed in phases 'very bearish' and 'bearish'  Grid buy trades not allowed in phases 'very bearish' and 'bearish' Strict entry New trades not allowed when money flow, momentum and volatility are not favorable on the upper timeframe None Strict DCA None Grid buy trades not allowed when momentum is not favorable on the upper timeframe Exhaustion sensitivity None Grid buy trades not allowed when any of the timeframes is overbought, up to the specified timeframe (none, short, medium or long). For example when exhaustion sensitivity is set to 'medium', then buy orders are not allowed while the short, medium or both of these timeframes are overbought Trade supports None Grid buy trades not allowed in phases 'very bearish' and 'bearish'. During this time limit orders are placed at medium or long term supports Trend scalping New trades not allowed on upper step when in phases 'bullish' or 'very bullish' and short term trend is bullish Enforce additional grid buydown in phases 'bullish' and 'very bullish' Custom trading range New trades not allowed when price is not between 'trading range low' and 'trading range high' Grid buy trades not allowed when price is below 'trading range DCA stop' Strategy settings ​ Balance settings ​ Setting Description Trading limit The standard amount to invest per buy order. The amount used for each regular buy order. This value is also used to calculate 'buy count'. If you use 'trend sync' and/or 'trend scalping', some orders types can use different amounts using trading limit multiplier settings. The base amount these multipliers use, is the amount set as 'trading limit'. Trading limit multiplier Controls the invest per DCA trade Setting 1 (default) effectively disables this option. It can be used to increase or decrease the invested amount with each consecutive buy order. Examples with trading limit 100 USDT and max buy count 3: 1: each buy order is for 100 USDT 1.5: first buy 100, second buy 150, third buy 225 2: first buy 100, second buy 200, third buy 400' Always use trading limit multiplier Controls when to apply the multiplier When disabled: regular tl: (TRADING_LIMIT * TL_MULTIPLIER)^buy count situation where a ratio applies: TRADING_LIMIT * xxx_TL_RATIO When enabled: regular tl: (TRADING_LIMIT * TL_MULTIPLIER)^buy count situation where a ratio applies: ((TRADING_LIMIT * TL_MULTIPLIER)^buy count) * xxx_TL_RATIO Max buy count Limits maximum trade size. When max is reached, the strategy goes in sell mode only. A value of 40 means that the total trade size may not exceed 40x the amount set as 'trading limit'. When max is reached, the strategy goes in sell mode only. Max open contracts Limit absolute position size. Sets the maximum position size of a futures position. Expressed in quote units. If executing a next order would exceed max open contracts, the order will not be fired. Profit settings ​ Setting Description Gain Profit target for full close orders When set to 2, full sell is only allowed when hitting a sell step at least 2% 'above' average entry price. Partial sell gain Gain target for partial close orders When set to 0.5, partial sell orders happen when hitting a sell step between 0.5% gain and the gain target for full close. Partial sell ratio Defines partial sell amounts. When set to 0.3, each partial close order uses 0.3 * position size. Partial sell cap Use a maximum value for partial sell amounts. Enable to set an upper limit to partial sell order quantity per sell step. Partial sell cap ratio Caps partial sell amounts. Setting 2 as cap value means that a partial close order may not exceed 2x 'trading limit'. Period settings ​ Setting Description Period Trading timeframe Sets which timeframe to use for short term market data. This is the main trading timeframe. Period medium Sets which timeframe to use for medium term market data. Period long Sets which timeframe to use for long term market data. Customize grid ​ Setting Description Auto step size Enables using automatic step size. Lets the bot automatically determine a grid step size that fits the pairs current volatility, Based on Average True Range (ATR). Step size Sets a manual step size. Manually defined grid step size for buy and sell orders, when auto step size is not enabled.  Normally set as a price: setting 500 on USDT-BTC makes the bot trade each time price moves 500 USDT. When using Pct step size, the value represents a percentage:  setting 2 will lead to having steps of 2% of current price. Minimum step pct Minimum value for auto step size. Minimum percentage size for steps, to overrule automatic step size. Setting 1 means that a step is set to 1% of price, unless auto step size is higher than 1% Pct step size Use a percentage based step size. When enabled, the value for step size represents a percentage. Enforce step size. Predictable minimum distance between orders. Used to ensure orders are not placed at a rate worse than step target. Price trailing can sometimes finish at a rate worse than the current grid step up or down. With this option enabled, orders may only get fired when trailing finishes at a better rate than the current step target. This can be useful for very precise balance management. Direction Currently long only Will allow for switching between long and short mode in the future. Use market orders Order type for grid orders When enabled, grid orders are placed as market orders. When disabled, grid orders are placed as limit order when price trailing finishes (note that these are not post only orders, they are meant to fill immediately). Customize trailing ​ Setting Description Pct buy trailing range Use custom buy trailing range By default trailing ranges are set automatically set to 0.2 x ATR. With this option you can set a percentage as custom trailing range to be used for buy trailing. Custom buy trailing range Set trailing range as percentage When 'Pct buy trailing range' is enabled, setting 0.5 will lead to having trailing ranges of 0.5% of current price. Pct sell trailing range Use custom sell trailing range By default trailing ranges are set automatically 0.2 x ATR. With this option you can set a percentage as custom trailing range to be used for sell trailing. Custom sell trailing range Set trailing range as percentage When 'Pct sell trailing range' is enabled, setting 0.5 will lead to having trailing ranges of 0.5% of current price. IRIS-Trend  |  Price action ​ Setting Description Price action analysis Trend phase awareness. When enabled, trend data using the configured timeframes for short, medium and long term is used to: - (dis)allow opening new and DCA trades - switch between normal grid trailing and grid trailing with increased trailing ranges  Price action TL ratio Can be used to modify buy amounts when price action is very positive. Setting 2 places buy orders for 'trading limit' * 2 Price action threshold ATR percentage rank threshold used in the conditions to allow 'price action tl multiplier' and 'Price action analysis (during phase bullish reversal)' Setting 0.5 means that the current medium period ATR percentage rank value must be at least 50% and the current candle is green. Strict entry When enabled, more conservative criteria are used to (dis)allow opening new trades. This can lead to times of inactivity after a final sell, by design. Strict DCA When enabled, more conservative criteria are used to (dis)allow placing grid buy trades. Exhaustion sensitivity This setting controls up to which timeframe exhaustion must pass before a next DCA buy is allowed. - NONE: no exhaustion restrictions - SHORT: do not allow buy orders when short term is exhausted - MEDIUM: do not allow buy orders when short OR medium term is exhausted - LONG: do not allow buy orders when short OR medium OR long term is exhausted IRIS-Trend  |  Trade supports ​ Setting Description Trade supports Trade only supports in certain phases When enabled, grid trading gets disabled during phases 'bearish' and 'very bearish'. During these phases the strategy trades higher timeframe supports using limit orders. S1 TL ratio Defines order size for support buys on first support. When trend sync is enabled and multiple timeframes move downwards, buy targets are placed at medium or high timeframe supports. This setting determines the buy order value for support targets, it multiplies 'trailing limit' Setting 2 places buy orders for 'trading limit' * 2 S2 TL ratio Defines order size for support buys on second support. When trend sync is enabled and multiple timeframes move downwards, buy targets are placed at medium or high timeframe supports. This setting determines the buy order value for support targets, it multiplies 'trailing limit' Setting 2 places buy orders for 'trading limit' * 2 IRIS-Trend  |  Micro scalping ​ Setting Description Trend scalping Micro scalp higher price regions. When enabled, trend data using the configured timeframes for short, medium and long term is used to: - reduce risk by disallowing opening new trades in high, risky zones - switch between normal grid trailing micro scalping - place non grid orders, based on detected market conditions (for example buy after a dip below ema 50) During micro scalping partial stop loss orders are possible. This means that when sell trailing starts, the initial trailing stop is placed slightly below the last buy rate and the amount to sell is roughly equal to the last buy amount (overriding settings for partial sell ratio). Scalp TL ratio Defines order size for scalp buys. When trend scalping is enabled and a scalping zone is reached, buy and sell amounts are based on this ratio. This setting determines the buy order value for support targets, it multiplies 'trailing limit'. Setting 0.5 places buy orders for 'trading limit' * 0.5 Dynamic SL Stop loss for small positions. This is a stop loss option for small and risky positions (up to 2x 'trading limit', rounded), accumulated in higher regions. Does not trigger often. The goal is to accept a relatively small loss sometimes, before a trade gets hard to DCA effectively. IRIS-Trend  |  Multiple timeframes ​ Setting Description Multiple timeframes mode Increase trading frequency by using a second set of timeframes When enabled, the strategy switches to a lower set of timeframes when it detects favorable conditions during a 'bullish reversal' phase, with the aim of reaching a higher trading frequency. When the lower set of timeframes all have exhausted market conditions, it switches back to the regular set of timeframes. Multi timeframes mode TL ratio Defines order size for scalp buys. Trading limit ratio to use for buy trading using the lower set of timeframes This setting determines the buy order value for support targets, it multiplies 'trailing limit'. Setting 0.5 places buy orders for 'trading limit' * 0.5 Lower set low period Low period of lower set of timeframes. Lower set medium period Medium period of lower set of timeframes Lower set high period High period of lower set of timeframes Regular set low period Low period of regular set of timeframes. Should normally be set identically to the period settings in the indicator section. Regular set medium period Medium period of regular set of timeframes. Should normally be set identically to the period settings in the indicator section. Regular set high period High period of regular set of timeframes. Should normally be set identically to the period settings in the indicator section. IRIS-Trend  |  Accumulation cycle ​ Setting Description Accumulation cycle Mode to accumulate without partial sell orders When enabled, no partial sells below break even are allowed, full sell only allowed when gain target is reached and the market is exhausted on all timeframes. New trades are only opened during the 'bullish reversal' phase. Micro scalping is disabled. IRIS-Trend  |  Advanced trailing ​ Setting Description Trend plus Dynamic trailing ranges When enabled, trend data using the configured timeframes for short, medium and long term is used to in- and decrease trailing ranges based on the currently detected market phase. This overrules a trailing modifier in 'trend sync'. Buy multiplier small Smallest buy trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Buy multiplier medium Medium buy trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Buy multiplier large Largest buy trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Sell multiplier small Smallest sell trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Sell multiplier medium Medium sell trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Sell multiplier large Largest sell trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Custom trading range ​ Setting Description Custom trading range Set a price range to allow opening new trades in With this mode you can define the price zone in which you want the strategy to operate, and optionally set a stop target. With the settings like in the defaults, new trades may only be opened when price is between 8000 and 10000. DCA trades can be placed at any price. In case price drops below 7000 all funds get sold. Set stop target to 0 to effectively disable it. Trading range low Lower range limit Lower limit of manual trading range. When not in a trade and price is below the lower limit, no new trades will get opened. Trading range high Upper range limit Upper limit of manual trading range. When not in a trade and price is above the upper limit, no new trades will get opened. Trading range stop Stop loss target Stop loss target of manual trading range. When in a trade and the current candle open price is below this target price, all assets get sold immediately. Trading range DCA stop Lower limit for allowing DCA orders. Use this to block DCA orders below a specified price. Advanced ​ Setting Description Buy enabled Allow or disallow placing buy orders. When disabled, no buy orders will be placed at all. Sell enabled Allow or disallow placing sell orders. When disabled, no sell orders will be placed at all. Stop after next sell To stop trading a pair after the position closes. When enabled, no buy orders are placed when there is no balance left to sell. Averaging down of the current position continues, partial sell orders do not make the bot stop afterwards. ATR period How many candles are used for calculating ATR. Number of candles used to calculate Average True Range, which is used to calculate auto step size. Default value of 50 should usually not need tuning. Ignore trades before Ignore part of the order history Optional parameter to force Gunbot to not consider any trades before the time set Value represents a unix timestamp in milliseconds. Get a current timestamp on currentmillis.com Warning: this setting can lead to all kinds of unexpected behavior. Only use it when you know you need it. tip Other parameters Besides settings mentioned on this page, no other strategy setting has any effect on stepgridscalp. Previous pp Next smacross About the trend module Phase system Overbought status and momentum Overview of restrictions Strategy settings Balance settings Profit settings Period settings Customize grid Customize trailing IRIS-Trend  |  Price action IRIS-Trend  |  Trade supports IRIS-Trend  |  Micro scalping IRIS-Trend  |  Multiple timeframes IRIS-Trend  |  Accumulation cycle IRIS-Trend  |  Advanced trailing Custom trading range Advanced Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
smacross, https://wiki.gunthy.org/trading-strategy-options/futures/smacross,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies smacross On this page smacross This page describes how futures trading works with the smacross strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. Long / Buy ​ A long position is opened when  FAST_SMA  crosses over  SLOW_SMA . Short / Sell ​ A short position is opened when  FAST_SMA  crosses down  SLOW_SMA . Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  smacross  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  smacross . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  smacross  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  smacross  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  smacross  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with SMA cross. These settings have a direct effect on trading with  smacross . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Slow SMA ​ Description Values Order types Name The number of periods used for calculating the slow SMA. Values:  numerical, represents a number of periods. Default value:  2 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  SLOW_SMA Fast SMA ​ Description Values Order types Name The number of periods used for calculating the fast SMA. Values:  numerical, represents a number of periods. Default value:  1 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  FAST_SMA Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ADX_ENABLED Placeholder. ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous sgsfutures Next stepgain How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period Slow SMA Fast SMA Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
stepgain, https://wiki.gunthy.org/trading-strategy-options/futures/stepgain,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies stepgain On this page stepgain This page describes how futures trading works with the stepgain strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. danger Using  stepgain  (futures) is only meaningful with  MEAN_REVERSION  enabled. The info below assumes you have set this. Long / Buy ​ A long position is opened when price is between your stepgain buy levels and changes direction while being below  LONG_LEVEL . Short / Sell ​ A short position is opened when price is between your stepgain sell levels and changes direction while being above  SHORT_LEVEL . Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  stepgain  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  stepgain . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  stepgain  as buy and/or sell method. Long Level ​ Description Values Order types Name This sets the target for opening a long position at a percentage above the highest EMA. When you set this to 1, buy orders will only be placed when the current price is at least 1% above the currently highest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LONG_LEVEL Short Level ​ Description Values Order types Name This sets the target for opening a short position at a percentage below the lowest EMA. When you set this to 1, sell orders will only be placed when the current price is at least 1% below the currently lowest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Strategy buy DCA buy Parameter name in  config.js :  SHORT_LEVEL ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Mean Reversion ​ Description Values Order types Name When set to true, the strategy follows a mean reversion way of trading, instead of trend following. This setting must be enabled to use stepgain as buy or sell method. When set to false, this strategy reverts to the same behavior as the gain strategy. Long and short levels are reversed in this mode, long level is placed below EMA, short level is placed above EMA. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  MEAN_REVERSION Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  stepgain  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Stepgain Buy Lvl ​ Description Values Order types Name This sets which step should be considered for buying: 1: Buy when price drops below  BUYLVL1  and the trend reverses or price hits  BUYLVL2 . 2: Buy when price drops below  BUYLVL2  and the trend reverses or price hits  BUYLVL3 . 3: Buy when price drops below  BUYLVL3  and the trend reverses. Values:  1 / 2 / 3 – represents steps. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL Stepgain Buy Lvl 1 ​ Description Values Order types Name Defines the first level below the lowest EMA to be considered for buying. Only used when  BUYLVL  is set to 1. When set to 1, this means that the price needs to be at least 1 percent below the lowest EMA. Values:  numerical – represents a percentage. Default value:  0.6 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL1 Stepgain Buy Lvl 2 ​ Description Values Order types Name Defines the second level below the lowest EMA to be considered for buying. Used when  BUYLVL  is set to 1 or 2. When set to 2, this means that the price needs to be at least 2 percent below the lowest EMA. Values:  numerical – represents a percentage. Default value:  2 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL2 Stepgain Buy Lvl 3 ​ Description Values Order types Name Defines the third level below the lowest EMA to be considered for buying. Used when  BUYLVL  is set to 2 or 3. When set to 10, this means that the price needs to be at least 10 percent below the lowest EMA. Values:  numerical – represents a percentage. Default value:  70 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL3 NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  stepgain  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Stepgain Sell Lvl ​ Description Values Order types Name This sets which step should be considered for selling: 1: Sell when price rises above  SELLLVL1  and the trend reverses or price hits  SELLLVL2 . 2: Sell when price rises above  SELLLVL2  and the trend reverses or price hits  SELLLVL3 . 3: Sell when price rises above  SELLLVL3  and the trend reverses. Values:  1 / 2 / 3 – represents steps. Default value:  1 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL Stepgain Sell Lvl 1 ​ Description Values Order types Name Defines the first level above the break-even point to be considered for selling. Only used when  SELLLVL  is set to 1. When set to 1, this means that the price needs to be at least 1 percent above the average bought price. Values:  numerical – represents a percentage. Default value:  0.6 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL1 Stepgain Sell Lvl 2 ​ Description Values Order types Name Defines the second level above the break-even point to be considered for selling. Used when  SELLLVL  is set to 1 or 2. When set to 2, this means that the price needs to be at least 2 percent above the average bought price. Values:  numerical – represents a percentage. Default value:  2 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL2 Stepgain Sell Lvl 3 ​ Description Values Order types Name Defines the third level above the break-even point to be considered for selling. Used when  SELLLVL  is set to 2 or 3. When set to 10, this means that the price needs to be at least 10 percent above the average bought price. Values:  numerical – represents a percentage. Default value:  70 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL3 Indicator settings ​ Relevant indicators for trading with stepgain. These settings have a direct effect on trading with  stepgain , this is where you configure the EMAs. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intented to be used for futures trading. TrailMe settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUY_LEVEL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. RT_BUY_LEVEL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous smacross Next stepgridhedge How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings Long Level Short Level ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Mean Reversion Buy settings Buy enabled Stepgain Buy Lvl Stepgain Buy Lvl 1 Stepgain Buy Lvl 2 Stepgain Buy Lvl 3 NBA Sell settings Sell enabled Stepgain Sell Lvl Stepgain Sell Lvl 1 Stepgain Sell Lvl 2 Stepgain Sell Lvl 3 Indicator settings Period Slow EMA Medium EMA Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
stepgridhedge, https://wiki.gunthy.org/trading-strategy-options/futures/stepgridhedge,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies stepgridhedge On this page stepgridhedge This strategy borrows the grid logic from the  stepgrid strategy  and uses it to trade both the long and short side of a futures market in hedge mode. The strategy uses the same order triggers as stepGrid does on spot, but in quite a different way. To trade in hedge mode in Gunbot, the two sides act as independent trading pairs like USDT-BTC-LONG and USDT-BTC-SHORT. Both sides can have a position at the same time.  This strategy runs on the long side, meaning that strategy settings and targets only exist on this pair. It trades both longs and shorts using these targets.   note Currently supported on Bybit futures, okGunbot & OKX swap markets, Make sure to enable  hedge  /  long/short  mode on the exchange.
For okGunbot and OKX, also make sure to set the account units to contracts in your profile settings on the exchange. Trading behavior ​ The strategy is quite complex, but it can be summarized like this: Price hits sell step: is there a long that can be closed at profit? do that else: dca short or skip step Price hits buy step: is there a short that can be closed at profit? do that else: dca long or skip step Grid targets are placed around the last order rate of the newest order of either the long or short side. If a step gets skipped, targets get placed around the skipped rate. Additionally, there are some none configurable methods that prevent dca orders to try to not accumulate too much too fast. Let's go over a few example trades to explain what happens and how to read the strategy charts: Short side is in position and price is better than average entry ​ The chart of the short pair shows past trades and the average entry price of the current position. In this case, price is profitable and the bot can soon begin closing the short position. There is no ROE target, 'profitable' is meant as just the fact that trading fees are covered. Long side chart shows the current targets ​ The long side chart shows the current targets. In this particular case the long side has a position that is quite far from average entry and is not allowed to further increase the long position size. Because the long side may not DCA at the moment, hitting the next lower target will cause a partial close on the short side. DCA target exceeded, trailing starts ​ Price has now dropped below the DCA target. This triggers an automatic price trailing process. As soon as trailing finishes, the short side is going to take some profits. Trailing finished ​ Trailing is now finished, new targets are placed on the long pair around the rate where trailing finished. Since the expected next order was on the short side, no new orders show on the long side. Partial short close ​ On the short side, a partial close order has appeared. The position size has been reduced by about 30%. There still remains an open short position.  Fast forward a few trades ​ Going forward in time a bit, this is how the short side played out. It is still in a short position, has placed several partial close orders and has been adding to the position each time the upper step was hit. By adding to the position even while it is in profit, the strategy can stay active a lot longer during one directional price movement. tip The above is just one example, it is not that easy to illustrate this strategy in a way that explains all possible situations.
Expect to often see one side profitably trading for some time, while the opposing side will have a position it slowly averages down. Balance settings ​ Setting Description Trading limit Minimum amount to invest per buy order. On an USDT-BTC pair, a trading limit of 20 means that every buy order is for 20 USDT. This setting applies for buy orders on the long pair. On okGunbot and OKX this amount is in contracts. Trading limit short Minimum amount to invest per sell order. On an USDT-BTC pair, a trading limit of 20 means that every sell order is for 20 USDT. This setting applies for sell orders on the short pair. On okGunbot and OKX this amount is in contracts. Max buy count Limits maximum position size. When max is reached, the strategy goes in close only mode. A value of 40 means that the total position size may not exceed 40x the amount set as 'trading limit'. Max unhedged Limits maximum position size difference. When max is reached, the strategy goes in close only mode. Example: max unhedged set to 40 and is reached, long is at 50x tl position, short at 10x tl. Long can now not grow further until the short grows too. First trades multiplier Increase invest in first few trades Multiplies the order size for the first x trades on any side. Set 'auto' to use default behavior. Auto mode generates multiplier values between 1.5 and 5, mostly depending on the imbalance between both sides. With a manually set value, you use 2 as multiplier value, it means that eligible orders get fired for tl * 2. First trades threshold Limit increased invest Sets a position size threshold under which first trades multiplier applies. Set 'auto' to use default behavior. In auto mode it will usually allow 2 to 3 trades with first trades multiplier, and continues with 1x tl trades after that. When you set 10 as value, first trades multiplier applies until the current position is tl * 10.  Customize grid settings ​ Setting Description Period Sets the chart timeframe Sets which candles are used to calculate auto step size and trailing range. A lower value increases trading frequency and risk. Use trend Pause trading on the losing side Gives the strategy the option to pick a side and manipulate trading limit, based on trend data gathered on different timeframe charts. During stronger trends, expect this mechanism to pause dca on the losing side for longer periods of time. Strategy behavior is fundamentally different with or without this option. Trend variant Data source to use for market direction Sets the data source to use for determining market direction. Epected behavior in 4h mode: When it detects a phase where it trades long only: Trading limit for longs multiplied by 2 Shorts may only close, not dca When it detects a phase where it trades short only: Trading limit forshorts multiplied by 2 Longs may only close, not dca When it detects an undecided zone: Both long and short use regular trading limit Both sides may dca and close During stronger trends, expect this mechanism to pause dca on the losing side for longer periods of time (think weeks, not days or hours). Strategy behavior is fundamentally different with or without this option. Epected behavior in 1h_15m mode: When it detects a phase where it trades long only: TL for longs are multiplied by 2 Shorts may only close, not dca When it detects a phase where it trades short only: TL for shorts are multiplied by 2 Longs may only close, not dca When it detects an undecided zone: Both sides may only close, not dca Epected behavior in custom mode: Save your own trend value as an override called TREND_VARIANT. Trading behavior is like in 4h trend variant, just with your own trend definitions: TREND_VARIANT value 1 for long TREND_VARIANT value -1 for short TREND_VARIANT value 0 for both sides Auto step size Enables using automatic step size. Lets the bot automatically determine a grid step size that fits the pairs current volatility, Based on Average True Range (ATR). Step size Sets a manual step size. Manually defined grid step size for buy and sell orders, when auto step size is not enabled.  Normally set as a price: setting 500 on USDT-BTC makes the bot trade each time price moves 500 USDT. When using Pct step size, the value represents a percentage:  setting 2 will lead to having steps of 2% of current price. Pct step size Use a percentage based step size. When enabled, the value for step size represents a percentage. Enforce step size. Predictable minimum distance between orders. Used to ensure orders are not placed at a rate worse than step target. Price trailing can sometimes finish at a rate worse than the current grid step up or down. With this option enabled, orders may only get fired when trailing finishes at a better rate than the current step target. This can be useful for very precise balance management. Minimum step up pct Minimum percentage size for steps up To overrule automatic step size. Setting 1 means that a step up is set to 1% of price, unless auto step size is already higher than 1% Minimum step down pct Minimum percentage size for steps down To overrule automatic step size. Setting 1 means that a step down is set to 1% of price, unless auto step size is already higher than 1% Minimum step asymmetric To use min step size on one side only When enabled, min step size (either up or down) is only applied in the dca direction of the currently smallest position.  Example: if short position is smaller than long position, then 'min step up pct' is applied to steps up, while 'min step down pct' is not applied to steps down Advanced settings ​ Setting Description Stop after close long To stop trading the long side after the current position closes. Averaging down of the current position continues, partial close orders do not make the bot stop afterwards. Stop after close short To stop trading the short side after the current position closes. Averaging down of the current position continues, partial close orders do not make the bot stop afterwards. Buy enabled Allow or disallow placing buy orders on the long side. When disabled, no buy orders will be placed at all. Sell enabled Allow or disallow placing sell orders on the short side. When disabled, no sell orders will be placed at all. Close long enabled Allow or disallow placing close orders on the long side. When disabled, no close orders will be placed at all. Close short enabled Allow or disallow placing close orders on the short side. When disabled, no close orders will be placed at all. SMA period How many candles are used for calculating support and resistance levels. By default 50 candles are used to calculate support and resistance. In this strategy, support and resistance are used to determine appropriate trailing ranges. ATR period How many candles are used for calculating ATR. Number of candles used to calculate Average True Range, which is used to calculate auto step size. Default value of 50 should usually not need tuning. Buydown exponent Exponent to use in the built-in exponential buydown function that forces a distance between dca trades and avg entry price.  Use  this code example  to experiment what different values result in. When in doubt, use default! Instant open threshold (long) Minimum long position size, to use always in position trading on short side Behavior of 'always in position' trading is to immediately start trailing for a new position after completely closing one. When set to 50, the short side starts always in position trading when long position is more than 50x TL in size. Cannot be used together with enforce step size Instant open threshold (short) Minimum short position size, to use always in position trading on long side Behavior of 'always in position' trading is to immediately start trailing for a new position after completely closing one. When set to 50, the long side starts always in position trading when short position is more than 50x TL in size. Cannot be used together with enforce step size Panic close Close everything immediately When enabled, positions on both sides are closed immediately. tip Other parameters Besides settings mentioned on this page, no other strategy setting has any effect on stepgridhedge. Previous stepgain Next tenkan Trading behavior Balance settings Customize grid settings Advanced settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
tenkan, https://wiki.gunthy.org/trading-strategy-options/futures/tenkan,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies tenkan On this page tenkan An easy to use strategy with built in DCA and ROE trailing, using the Ichimoku tenkan line. tip This strategy uses a limited subset of the regularly available strategy settings. 
 Only the strategy options shown in the strategy editor for Tenkan have an effect. Trading behavior ​ A long position is opened when price is below kumo and tenkan crosses down the candle body. 
 If the same happens again at a price at least 'DCA spread' below the previous order, a DCA order is placed. A short position is opened when price is above kumo and tenkan crosses up the candle body. 
 If the same happens again at a price at least 'DCA spread' above the previous order, a DCA order is placed. To close a trade, the opposite conditions of opening it must happen and ROE scalper must finish trailing. How to create a tenkan strategy ​ Use the advanced strategy editor and create a new strategy, select TENKAN as buy and sell method. Strategy settings ​ To use this strategy, these are the settings you can configure: Setting Description Trading limit                            The amount to invest per buy order. On an USDT-BTC pair, a trading limit of 20 means that every buy order is for 20 USDT. Always make sure that trading limit is set higher than min volume to sell. Buy enabled Allow / disallow buy orders When true, the bot is allowed to place buy orders. Sell enabled Allow / disallow sell orders When true, the bot is allowed to place sell orders. ROE Minimum ROE target This is the minimum ROE target for any position. ROE limit Trailing range in ROE When trailing, this setting defines how large the trailing range is. When set to 5 and trailing starts when 10% ROE is reached, the initial trailing stop will be set at ROE 5. DCA spread Minimum price difference between orders in the same direction A DCA spread of 1 makes sure that orders are never placed closer than 1% apart. Maker fees Option to use post only orders  With this option enabled, orders get placed as post only. Market close Use market orders to close positions When false, close orders are placed as limit orders. When true, close orders are placed as market orders. Period Sets the chart interval The default period is 15. Make sure to only use  supported period values. Candles length Number of candles requested from the exchange Tenkan period Number of candles used to calculate tenkan Kijun period Number of candles used to calculate kijun Senkouspan period Number of candles used to calculate senkou span Displacement Number of candles to displace kumo Previous stepgridhedge Next tsa Trading behavior How to create a tenkan strategy Strategy settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
tsa, https://wiki.gunthy.org/trading-strategy-options/futures/tsa,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies tsa On this page tsa This page describes how futures trading works with the TSA strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. Long / Buy ​ A long position is opened when the ask price crosses over the forecast. Short / Sell ​ A short position is opened when the bid price crosses under the forecast. Close ​ A position is closed when the desired  ROE  is reached. Stop ​ A position is closed at loss when its stop is reached. Strategy parameters ​ Following settings options are available for  tsa  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  tsa . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  tsa  as buy and/or sell method. ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  tsa  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  tsa  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Indicator settings ​ Relevant indicators for trading with tsa. These settings have a direct effect on trading with  tsa . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ TrailMe is not intended to be used with this strategy. Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TRAIL_ME_BUY Placeholder. TRAIL_ME_SELL_RANGE Placeholder. TRAIL_ME_SELL Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous tenkan Next tssl How to work with this strategy Long / Buy Short / Sell Close Stop Strategy parameters Margin settings ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Buy settings Buy enabled NBA Sell settings Sell enabled Indicator settings Period Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
tssl, https://wiki.gunthy.org/trading-strategy-options/futures/tssl,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies adx atrts bbta bb emaspread futuresgrid gain ichimoku macd macdh pp sgsfutures smacross stepgain stepgridhedge tenkan tsa tssl Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Futures trading strategies tssl On this page tssl This page describes how futures trading works with the TSSL strategy. The triggers for trades are slightly different than in the same strategy for regular trading. How to work with this strategy ​ Gunbot will open one position, either long or short, and close this position when the target is reached. When the stop is hit before profitably closing a trade, Gunbot will place a stop order at loss. After closing a position, Gunbot will again look to open a new long or short position. Gunbot will not add to existing open positions. Please don't manually add to or reduce positions opened by Gunbot, unless you stop running Gunbot on this trading pair until you've closed this position. danger Using  tssl  (futures) is only meaningful with  MEAN_REVERSION enabled. The info below assumes you have set this. The examples below show how the basic triggers for  tssl  work. Additionally, you can use confirming indicators and settings like ROE trailing. Long ​ A long position is opened when buy trailing finishes below  LONG_LEVEL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Short ​ A short position is opened when sell trailing finishes above  SHORT_LEVEL . Position is closed when the desired  ROE  (return on equity) is reached. This is a percentage from the entry point, taking leverage into consideration.  A position is closed at loss when a stop is hit. Strategy parameters ​ Following settings options are available for  tssl  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an  override  at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  tssl . Accepted values are all strategy names as listed  here . Margin settings ​ Margin settings control settings like leverage and the target for ROE. These parameters are relevant when using  tssl  as buy and/or sell method. Long Level ​ Description Values Order types Name This sets the target for opening a long position at a percentage above the highest EMA. When you set this to 1, buy orders will only be placed when the current price is at least 1% above the currently highest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LONG_LEVEL Short Level ​ Description Values Order types Name This sets the target for opening a short position at a percentage below the lowest EMA. When you set this to 1, sell orders will only be placed when the current price is at least 1% below the currently lowest EMA. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Strategy buy DCA buy Parameter name in  config.js :  SHORT_LEVEL ROE ​ Description Values Order types Name This sets the target for closing a position. ROE is the Return On Equity for a position, the percentage profit and loss on your invested margin. This value is calculated in a similar way to how Bitmex calculates it, it does include leverage and does not include fees. Examples: Long position, 1x leverage. 
 When price moves 1% above the average entry price, 1% ROE is reached. Long position, 100x leverage (or cross leverage). 
 When price moves 1% above the average entry price, 100% ROE is reached. Short position, 20x leverage 
 When price moves 1% below the average entry price, 20% ROE is reached. Values:  numerical – represent a percentage. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  ROE PND ​ Description Values Order types Name Use ""PND"" logic to close trades. This mode tries to not close a position before a pump or dump has fully played out - usually beats ROE trailing performance. Respects the minimum ROE set. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND PND protection ​ Description Values Order types Name Threshold to close a position when it drops below ROE again. A value of 1.5 means that if ROE reached 1.5x the minimum target, the position will get closed immediately if the trend turns. Values:  numerical Default value:  1.5 Affects Does not affect Close RT buy RT buyback RT sell Close Stop limit Strategy buy Strategy sell DCA buy Parameter name in  config.js :  PND_PROTECTION Leverage ​ Description Values Order types Name Sets the leverage for opening any position. Setting 0 places the order with cross margin. tip On Binance Futures you must set leverage per pair on the exchange itself. Values:  numerical Default value:  0 Affects Does not affect Strategy buy RT buy Strategy sell RT buyback RT sell Close Stop limit Close DCA buy Parameter name in  config.js :  LEVERAGE Stop Buy ​ Description Values Order types Name Places a market stop order for a long position, at the same time as the position is opened. When set to 1 and a long order is opened at a price of 100, a stop market order will be placed at 99. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Close Strategy sell DCA buy Parameter name in  config.js :  STOP_BUY Stop Sell ​ Description Values Order types Name Places a market stop order for a short position, at the same time as the position is opened. When set to 1 and a short order is opened at a price of 100, a stop market order will be placed at 101. tip This setting is exclusive to Bitmex Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy RT buyback RT sell Close Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  STOP_SELL ROE Trailing ​ Description Values Order types Name Use this to enable tssl-style trailing for ROE. Trailing limit is set with  ROE_LIMIT . Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_TRAILING ROE Scalper ​ Description Values Order types Name Use this to enable an alternate trailing mechanism for closing positions. Trailing limit is set with  ROE_LIMIT . Additionally  ROE_TRAILING  must be enabled. Values:  true or false Default value:  false Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_SCALPER ROE Limit ​ Description Values Order types Name This sets the range for ROE trailing. ROE trailing: Range is a percentage of current ROE. Setting a  ROE_LIMIT  of 5 at a  ROE  target of 1 would set an initial range between 0.95 and 1.05. ROE scalper: Range is an absolute ROE value. Setting a ROE_LIMIT of 5 at a  ROE  target of 10 means that the trailing stop is initially set at ROE 5 ( ROE  minus  ROE_LIMIT ). Both : As long as ROE keeps increasing, the range moves along with ROE. As soon as ROE start decreasing, the lower range gets frozen. A close order is placed when ROE crosses the lower limit. Values:  numerical – represent a trailing range. Default value:  1 Affects Does not affect Close RT buy RT buyback RT sell Strategy sell Stop limit Close Strategy buy DCA buy Parameter name in  config.js :  ROE_LIMIT Pre Order ​ Description Values Order types Name When set to true, limit orders will placed at a configurable rate beyond the best bid/ask price to get ahead of the order book. Values:  true or false Default value:  false Affects Does not affect Close RT buy Strategy sell RT buyback Strategy buy RT sell Stop limit DCA buy Parameter name in  config.js :  PRE_ORDER Pre Order Gap ​ Description Values Order types Name Sets the gap between the best bid/ask price in the orderbook and the rate at which a limit order gets placed. Long orders are placed at ask + gap. Short orders are placed at bid - gap. It is possible to use negative values, this will increase the chance of receiving maker fees. Example when set to 1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 101. When set to -1 and a buy signal occurs at an ask price of 100: a limit order gets placed at a rate of 99. Don't use a negative gap together with  STOP_BUY  and/or  STOP_SELL , as these stops do not combine well with position that do not always fill. Instead use  STOP_LIMIT . Values:  numerical - represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  PRE_ORDER_GAP Mean Reversion ​ Description Values Order types Name When set to true, the strategy follows a mean reversion way of trading, instead of trend following. Long and short levels are reversed in this mode, long level is placed below EMA, short level is placed above EMA. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Stop limit DCA buy Close Parameter name in  config.js :  MEAN_REVERSION Buy settings ​ Buy settings are the primary trigger for opening long positions. These parameters control the execution of buy orders when using  tssl  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Buy Range ​ Description Values Order types Name This sets the buy range for trailing. Setting a range of 0.5% at a starting price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving downwards, the range moves down along with the price. As soon as prices start going upward, the range freezes and a buy order is placed when the price crosses the upper boundary of the range. Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_RANGE NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for opening short positions. These parameters control the execution of sell orders when using  tssl  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Sell Range ​ Description Values Order types Name This sets the sell range for trailing. Setting a range of 0.5% at a starting price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving upwards, the range moves up along with the price. As soon as prices start going downward, the range freezes and a sell order is placed when the prices crosses the lower boundary of the range. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELL_RANGE Indicator settings ​ Relevant indicators for trading with tssl. These settings have a direct effect on trading with  tssl , this is where you configure how Bollinger Bands are calculated and at which distance from them orders should be placed. Additionally, long and short level are dependent on EMA. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 Balance settings ​ Balance settings Confirming indicators + advanced indicator settings ​ Confirming indicators Misc settings ​ Misc settings Dollar cost avg settings ​ DCA Method ​ Description Values Order types Name When set to  TENKAN  Gunbot will place DCA orders in exactly the same way as in the  Tenkan  strategy. Each DCA order is in size of  TRADING_LIMIT . Values:  NATIVE / TENKAN Default value:  TENKAN    Setting NATIVE effectively disables DCA in this strategy Affects Does not affect DCA Strategy buy Strategy sell Close RT sell Stop limit RT buyback RT buy Parameter name in  config.js :  DCA_METHOD Reversal trading settings ​ RT is not intented to be used for futures trading. TrailMe settings ​ Because tssl is already a trailing strategy, you can't additionally use TrailMe. TrailMe settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. DISPLACEMENT Placeholder. DOUBLE_CHECK_GAIN Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_BUY Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_SELL Placeholder. KIJUN_STOP Placeholder. KUMO_BUY Placeholder. KUMO_CLOSE Placeholder. KUMO_SELL Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SENKOUSPAN_PERIOD Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TBUY_RANGE Placeholder. TENKAN_BUY Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_SELL Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous tsa Next Custom strategies How to work with this strategy Long Short Strategy parameters Margin settings Long Level Short Level ROE PND PND protection Leverage Stop Buy Stop Sell ROE Trailing ROE Scalper ROE Limit Pre Order Pre Order Gap Mean Reversion Buy settings Buy enabled Buy Range NBA Sell settings Sell enabled Sell Range Indicator settings Period Slow EMA Medium EMA Balance settings Confirming indicators + advanced indicator settings Misc settings Dollar cost avg settings DCA Method Reversal trading settings TrailMe settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Misc settings, https://wiki.gunthy.org/trading-strategy-options/misc,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Misc settings On this page Misc settings These strategy settings allow you to control your stop limit and other uncategorized features. Settings parameters ​ Stop Limit ​ Description Values Order types Name Sets a stop limit to sell a coin at a calculated loss. After a stop limit sell order has been placed, the bot will go into buying mode after  TRADES_TIMEOUT  has passed and will buy again when market conditions meet your buying strategy. Setting a stop limit at 60 would make sure that all holdings for a coin are sold when 60% value is lost, compared to the average bought price. E.g. average bought price is 100, stop limit is executed at 40 and all assets are sold. tip With futures trading, the stop limit is set as a ROE value. Setting it to 1 will lead to the stop limit triggering when ROE reaches -1. Use a value that includes your leverage. It's recommended to use STOP_BUY / STOP_SELL instead, when possible.These are placed at the same time as the position is opened. Values:  numerical – represents a percentage. Default value:  60 Affects Does not affect Stop limit Strategy buy RT buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  STOP_LIMIT SL Disable Buy ​ Description Values Order types Name When set to true, buy orders will be disabled after a pair hits  STOP_LIMIT . For futures trading, buy orders will be disabled when a long position hits  STOP_LIMIT . Values:  true or false Default value:  false Affects Does not affect Stop limit Strategy buy RT buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  SL_DISABLE_BUY SL Disable Sell ​ Description Values Order types Name When set to true, sell orders will be disabled after a short position hits  STOP_LIMIT . tip Specific to futures trading. Values:  true or false Default value:  false Affects Does not affect Stop limit Strategy buy RT buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  SL_DISABLE_SELL Panic Sell ​ Description Values Order types Name When set to true, all quote will be sold at market value as soon as possible. This may incur losses! You should only enable this when you want to sell your current holdings immediately. For futures trading, this setting will delete any open orders and close any position as soon as possible. Pairs are not automatically disabled afterwards. Values:  true or false Default value:  false Affects Does not affect Stop limit Strategy buy RT buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  PANIC_SELL Trades Timeout ​ Description Values Order types Name Sets a timeout between two trades for a single pair, in this time no trades will be placed. Values:  numerical - represents time in seconds. Default value:  0 Affects Does not affect Strategy buy Stop limit RT buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  TRADES_TIMEOUT Count Sell ​ Description Values Order types Name Sets a maximum number of sell orders before automatically disabling a pair. Setting this to 5 disables the pair after 5 strategy sell orders took place (not including RT). No further trades will happen until you re-enable the pair. The  COUNT_SELL  counter gets reset after a pair is re-enabled. tip This parameter is irrelevant for futures trading. Values:  numerical – represents a number of strategy sell orders. Default value:  9999 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  COUNT_SELL Maker Fees ​ Description Values Order types Name Futures platforms:  When set to true, limit orders will placed as post only orders. If the order can be (partially) filled immediately, it will get cancelled by the exchange. Using  PRE_ORDER  you can configure how far from bid/ask the order gets placed, you must use a negative value for  PRE_ORDER_GAP  for post only orders. Other exchanges:  When set to true, limit buy orders are placed at bid, limit sell orders are placed at ask. This increases the likelyhood that the trade is executed with maker fees. Values:  true or false Default value:  false Affects Does not affect Strategy buy Stop limit RT buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  MAKER_FEES Ignore Trades Before ​ Description Values Order types Name Optional parameter to force Gunbot to not consider any trades before the set timestamp. Only ever use this when you know exactly what you are accomplishing, and for example want to prevent RT from being started on a pair where the last sell order resulted in a loss. Use  https://currentmillis.com/  to convert human readable time to unix timestamps, make sure to use the timestamp in milliseconds. Values:  unix timestamp in milliseconds Default value:  0 Parameter name in  config.js :  IGNORE_TRADES_BEFORE Bought price ​ Description Values Order types Name Exchanges often don't provide order information anymore on trades that happened longer ago. This parameter exists to manually specify a reference price per unit that Gunbot should consider when selling an asset for which no bought price is provided by the exchange.  In short, with bought price you tell Gunbot the minimum price to sell your assets for. This parameter should only be used as an override. The override is only valid when no bought price can be retrieved from the exchange. In case you want to forcefully override an available bought price, you can apply  IGNORE_TRADES_BEFORE  and remove the pairs state json file after doing so. tip This parameter is irrelevant for futures trading Values:  numerical, represents a price per unit in base currency. Default value:  n/a Affects Does not affect Strategy sell RT buy Stop limit RT buyback DCA buy Close RT sell Parameter name in  config.js :  BOUGHT_PRICE Liquidity maker ​ Use any strategy as a liquidity provider on spot markets, by using a simple staggered orders strategy that places orders at many positions in the order book. Liquidity maker ​ Description Values Order types Name Enables a staggered orders strategy variant that continuously places up to 9 orders on the bid side of the order book. If there is enough quote balance, up to 9 orders are placed on the ask side as well. You profit from the spread between bid and ask, provided the spread is higher than your trading fees. Each order is in value of 1x  TRADING_LIMIT . Potentially it can use your whole balance. This works in addition to your regular strategy. You can disable the regular strategy by setting both buy and sell enabled to ""false"". Values:  true or false Default value:  false Affects Does not affect Strategy buy Stop limit Strategy sell RT Buy RT buyback RT sell Close DCA buy Parameter name in  config.js :  LIQUIDITY Liquidity taker ​ Description Values Order types Name In addition to maker orders, use taker orders when reaching your targets or to DCA. When  GAIN  is reached, every round a market sell order of 1x  TRADING_LIMIT  gets placed to reduce your position in profit. When price drops below the average bought price, every round a market buy order of 1x  TRADING_LIMIT  gets placed to bring down the average price per unit. Values:  true or false Default value:  false Affects Does not affect Strategy buy Stop limit Strategy sell RT Buy RT buyback RT sell Close DCA buy Parameter name in  config.js :  LIQUIDITY_TAKER Liquidity gain ​ Description Values Order types Name Option to enforce sell orders to be placed at or above break-even. 
 Disable this to provide pure liquidity. Values:  true or false Default value:  true Affects Does not affect Strategy sell Stop limit RT Buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  LIQUIDITY_GAIN Max invested base ​ Description Values Order types Name Limits the total position size for liquidity maker and taker orders. When the maximum value is reached, no more liquidity maker or taker orders that would add to the position are placed . Values:  numerical - represents a value in base currency Default value:  0.1 Affects Does not affect Strategy buy Stop limit Strategy sell RT Buy RT buyback RT sell Close DCA buy Parameter name in  config.js :  MAX_INVESTMENT Order type settings ​ On exchanges that support market orders, you can select which types of orders should be sent as limit or market. tip Not all exchanges support market orders Test if your market orders execute before leaving your strategy run unattended. Market Buy ​ Description Values Order types Name When set to true, strategy buy/long orders will be placed as market order. Values:  true or false Default value:  false Affects Does not affect Strategy buy Stop limit RT buy RT buyback RT sell Close DCA buy Strategy sell Parameter name in  config.js :  MARKET_BUY Market Sell ​ Description Values Order types Name When set to true, strategy sell/short orders will be placed as market order. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Stop limit RT buyback RT sell Close DCA buy Strategy buy Parameter name in  config.js :  MARKET_SELL Market RT Buy ​ Description Values Order types Name When set to true, RT_BUY orders will be placed as market order. Values:  true or false Default value:  false Affects Does not affect RT buy Stop limit Strategy sell RT buyback RT sell Close DCA buy Strategy buy Parameter name in  config.js :  MARKET_RTBUY Market RT Sell ​ Description Values Order types Name When set to true, RT_SELL orders will be placed as market order. Values:  true or false Default value:  false Affects Does not affect RT sell Stop limit Strategy sell RT buyback RT buy Close DCA buy Strategy buy Parameter name in  config.js :  MARKET_RTSELL Market Buyback ​ Description Values Order types Name When set to true, RT Buyback orders will be placed as market order. Values:  true or false Default value:  false Affects Does not affect RT buyback Stop limit Strategy sell RT sell RT buy Close DCA buy Strategy buy Parameter name in  config.js :  MARKET_BUYBACK Market DU ​ Description Values Order types Name When set to true, DU orders will be placed as market order. Values:  true or false Default value:  false Affects Does not affect DCA buy Stop limit Strategy sell RT sell RT buy Close RT buyback Strategy buy Parameter name in  config.js :  MARKET_DU Market Close ​ Description Values Order types Name When set to true, position close orders at Bitmex will be placed as market order. Values:  true or false Default value:  false Affects Does not affect Close Stop limit Strategy sell RT sell RT buy DCA buy RT buyback Strategy buy Parameter name in  config.js :  MARKET_CLOSE Market Stop ​ Description Values Order types Name When set to true, position stop orders at Bitmex will be placed as market order. Values:  true or false Default value:  false Affects Does not affect Stop limit Close Strategy sell RT sell RT buy DCA buy RT buyback Strategy buy Parameter name in  config.js :  MARKET_STOP Market FOK ​ Description Values Order types Name When set to true, FOK orders will be placed as market order. This refers to orders placed within  CANCEL_ORDERS_CYCLE_CAP . Values:  true or false Default value:  false Parameter name in  config.js :  MARKET_FOK Previous TrailMe Next AutoConfig Settings parameters Stop Limit SL Disable Buy SL Disable Sell Panic Sell Trades Timeout Count Sell Maker Fees Ignore Trades Before Bought price Liquidity maker Liquidity maker Liquidity taker Liquidity gain Max invested base Order type settings Market Buy Market Sell Market RT Buy Market RT Sell Market Buyback Market DU Market Close Market Stop Market FOK Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Reversal Trading (RT), https://wiki.gunthy.org/trading-strategy-options/rt,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Reversal Trading (RT) On this page Reversal trading (RT) Reversal trading (RT) is a Gunbot technique to keep on trading profitably when prices move downwards after an asset has been purchased. The principle is to use the already invested amount of base currency to accumulate more units of the quote currency after prices have moved downwards. When prices keep going down, or go sideways at a lower level than the initial purchase, RT can keep accumulating until prices move up enough to sell the accumulated amount for an overall profit. Trading fees paid while in reversal trading are all accounted for. Note that this example is kept simple intentionally. Prices don't have to go straight down for RT to successfully accumulate. How it works ​ Reversal trading starts when the current price is a set percentage lower than the last bought price, this is defined with  RT_GAIN . The initial bag gets sold for base currency (RT_SELL) and the invested amount is reserved for buying back more units when prices drop further. When the price then drops by a percentage defined with  RT_BUY_LEVEL , quote currency gets bought (RT_BUY). You now own more quote currency than you initially bought, at a lower price per unit. This process will repeat when prices keep dropping, enabling you to keep accumulating quote currency without investing additional assets. Required funds are locked for the pair in reversal trading, and can't be used by other pairs. With  TM_RT_SELL , or when using  bb  as selling strategy, it's possible to place an RT_SELL at a higher rate than the previous RT_BUY, enabling you to reach a profitable exit point much faster. When prices reach an overall profitable price (EXIT POINT), a normal sell order is placed using the sell criteria of your strategy. In case prices recover to the break even point before an RT_BUY could be made, the initial bag will be bought back to continue normal trading (RT_BUYBACK). Alternatively, you can set a custom level for buying back quote with  RT_BUY_UP_LEVEL . Tips before using ​ Do not activate reversal trading on existing bags that are already down a lot unless you use TM_RT_SELL ! The decision to run reversal trading or not should best be made before you start trading a pair, this way the process can kick in timely. Reversal trading math is done based on your trading history, if your last sell order was at loss (and not caused by stop limit), reversal trading would immediately start when you enable it and continues until it manages to profitably end the RT cycle - even when you've disabled RT again.  To prevent unwanted reversal trading, make sure to either have a profitable last sell order or to have set  IGNORE_TRADES_BEFORE  at a time after your last sell order at loss. You can use  https://currentmillis.com/  to generate the needed timestamp. To be sure, delete the pairs state JSON file after setting  IGNORE_TRADES_BEFORE .  You can set a maximum price difference between current price and average bought price with  RT_MAXBAG_PROTECTION , to prevent RT from starting on pairs that already lost a lot of value. RT flowcharts ​ There are three different ways Gunbot handles reversal trading, based on main strategies used for a pair. The chosen buy strategy affects the way RT_BUY orders are executed, the sell strategy affects RT_SELL orders. Optional steps in the flowcharts are only relevant when  TM_RT_SELL  and/or  RT_TREND_ENABLED  are enabled. 1. Simplified flow for RT ​ This flowchart shows the basic steps for reversal trading, not considering additional options like trailing or strategy specific conditions. 2. RT process for all strategies except  bb ​ 3. RT process for  bb ​ LOW_BB / HIGH_BB   in reversal trading use the same settings as with regular trading on   bb . Relevant settings ​ Following settings options are available for reversal trading. None of them are relevant in margin strategies. RT Enabled ​ Description Values Order types Name When set to true and prices drop, reversal trading will try to use the assets originally invested in your bag to accumulate more units, which can be sold for profit earlier than the original bag. When double up is enabled, RT will start when DU_CAP_COUNT is reached. Values:  true or false Default value:  false Affects Does not affect RT buy Strategy buy RT buyback Strategy sell RT sell Close DCA buy Stop limit Parameter name in  config.js :  RT_ENABLED RT Gain ​ Description Values Order types Name Defines the percentage drop after initial buy or RT_BUY to trigger an RT_SELL. Make sure to set this higher then the spread between bid and ask to prevent unwanted buybacks. When set to 2 and the last buy had a price of 100, an RT_SELL occurs when price is 98 or lower. Reversal trading will then wait for prices to drop by  RT_BUY_LEVEL  and buy more units back. When prices move upwards instead of downwards it can happen that the bag gets bought back at the break-even price. Values:  numerical - represents a percentage. Default value:  1.5 Affects Does not affect RT sell Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT buy Parameter name in  config.js :  RT_GAIN RT Buy Level ​ Description Values Order types Name This defines the percentage the price has to drop after RT_SELL to trigger RT_BUY. When set to 2 and the last RT_SELL happened at a price of 100, an RT_BUY occurs when price is 98 or lower. Reversal trading will then wait to sell for profit, or for another RT_SELL when prices keep dropping. Values:  numerical - represents a percentage. Default value:  2 Affects Does not affect RT buy Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT sell Parameter name in  config.js :  RT_BUY_LEVEL RT Sell Up ​ Description Values Order types Name This sets the starting point for trailing up an RT_SELL. Only works when  TM_RT_SELL  is enabled. When you set this to 1 and price increases 1% after an RT_BUY, sell trailing gets activated to place the next RT_SELL as high as possible. The sell range is configurable with  TRAIL_ME_RT_SELL_RANGE . Optionally, you can use  RT_TREND_ENABLED  to only proceed with RT_SELL_UP when forecast trend indicates a strong uptrend. Values:  numerical - represents a percentage above the last buy price. Default value:  0.3 Affects Does not affect RT sell Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT buy Parameter name in  config.js :  RT_SELL_UP RT Buy Up Level ​ Description Values Order types Name This sets the price to place an RT_BUY order above the last RT_SELL order, the price must be below the break-even point for this to work. The default value of 0 disables this feature. When you set this to 3 and price increases 3% after an RT_SELL, an RT_BUY order will be placed there instead of waiting for the price to hit the buyback point. (Technically, this type of order is a buyback order, not a regular RT_BUY). Beware that will have a negative effect on the amount of quote units accumulated during RT, it functions as a kind of stop loss for reversal trading. Values:  numerical - represents a percentage above the last sell price. Default value:  0 Affects Does not affect RT buyback Strategy buy Strategy sell Close DCA buy Stop limit RT sell RT buy Parameter name in  config.js :  RT_BUY_UP_LEVEL RT Trend Enabled ​ Description Values Order types Name Enables the use of trend forecast for placing RT_BUY or RT_SELL orders when using  TM_RT_SELL  and/or  TRAIL_ME_RT . The forecast trend indicator combines smacross, xtrend and the time series forecast to provide an indication of the strength of a trend. This can be used to only place RT_BUY or RT_SELL orders when there is respectively a strong down- or uptrend. An RT_SELL order will be placed when the trailing stop hits and forecast trend shows 6 green arrows. An RT_BUY order will be placed when the trailing stop hits and forecast trend shows 6 red arrows. Values:  true or false Default value:  false Affects Does not affect RT buy Strategy buy RT sell Strategy sell Close DCA buy Stop limit RT buyback Parameter name in  config.js :  RT_TREND_ENABLED RT Once ​ Description Values Order types Name Set this to true to only allow one full RT cycle (until final strategy sell), after that the pair is set to not cycle again. At the end of the RT cycle, the pair  enabled  setting will be set to false. Values:  true or false Default value:  false Parameter name in  config.js :  RT_ONCE RT Once And Continue ​ Description Values Order types Name Set this to true to only allow one full RT cycle (until final strategy sell), after that RT will be disabled to continue normal trading. At the end of the RT cycle, the  RT_ENABLED  setting will be set to false for the pair. Values:  true or false Default value:  false Parameter name in  config.js :  RT_ONCE_AND_CONTINUE RT Maxbag Protection ​ Description Values Order types Name Sets the maximum difference between the average bought price and current price for starting RT. When the difference is bigger, RT orders won't be placed. This is used as a protection against starting reversal trading on bags that already dropped too much for the process to work effectively. Values:  numerical - represents a percentage. Default value:  10 Parameter name in  config.js :  RT_MAXBAG_PROTECTION Reversal trading depends on several TrailMe settings to reach better entry points for RT_BUY and to make RT_SELL_UP work. The relevant settings are listed below. Trail Me RT ​ Description Values Order types Name Use this to enable tssl-style trailing for RT_BUY orders. Values:  true or false Default value:  false Affects Does not affect RT buy Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT sell Parameter name in  config.js :  TRAIL_ME_RT Trail Me RT Sell ​ Description Values Order types Name Use this to enable tssl-style trailing for RT_SELL orders above the last RT_BUY rate. Values:  true or false Default value:  false Affects Does not affect RT sell Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT buy Parameter name in  config.js :  TM_RT_SELL Trail Me Buy Range ​ Description Values Order types Name This sets the buy range for TrailMe. Setting a range of 0.5% at a starting price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving downwards, the range moves down along with the price. As soon as prices start going upward, the range freezes and a buy order is placed when the price crosses the upper boundary of the range. Values:  numerical – represent a percentage. Default value:  0.5 Affects Does not affect Strategy buy RT sell RT Buy Strategy sell DCA buy Close Stop limit RT buyback Parameter name in  config.js :  TRAIL_ME_BUY_RANGE Trail Me RT Sell Range ​ Description Values Order types Name This sets the sell range for TrailMe. Setting a range of 0.5% at a current price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving upwards, the range moves up along with the price. As soon as prices start going downward, the range freezes and a sell order is placed when the prices crosses the lower boundary of the range. Values:  numerical – represent a percentage. Default value:  0.5 Affects Does not affect RT sell Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT buy Parameter name in  config.js :  TRAIL_ME_RT_SELL_RANGE Previous Dollar Cost Avg (DCA) Next TrailMe How it works Tips before using RT flowcharts 1. Simplified flow for RT 2. RT process for all strategies except  bb 3. RT process for  bb Relevant settings RT Enabled RT Gain RT Buy Level RT Sell Up RT Buy Up Level RT Trend Enabled RT Once RT Once And Continue RT Maxbag Protection Trail Me RT Trail Me RT Sell Trail Me Buy Range Trail Me RT Sell Range Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
macdh, https://wiki.gunthy.org/trading-strategy-options/spot/macdh,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies macdh On this page macdh This strategy is based on the  MACD histogram , taking advantage of signals that indicate a MACD signal line crossover is likely. A buy order is placed when the MACD histogram crosses up the zero line. A sell order will be placed when the MACD histogram drops below 0. To refine this strategy, other indicators are available to be used as confirmation for both buying and selling. For example you could have Gunbot buy on a bullish signal and RSI is 30 or lower. tip Gain protection is optional for this strategy. Be aware that this can lead to sell orders below your break-even point. Normal constraints like ""buy once, sell once"" don't apply to this strategy: each time buying criteria occur, Gunbot will place a buy order as high as set in your balance settings. Trading example ​ Example of how trading with this strategy can perform.   Details and settings How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. Strategy parameters ​ Following settings options are available for  macdh  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  macdh . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  macdh  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Single Buy ​ Description Values Order types Name Enable this to restrict  macdh  to placing just a single buy order on the first crossup, then it will go in sell mode. Useful when you combine  macdh  with a different sell method or use other parameters that prevents sell orders from happening at every crossdown. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  SINGLE_BUY Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  macdh  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ Relevant indicators for trading with MACDH. These settings have a direct effect on trading with  macdh . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD MACD Short ​ Description Values Order types Name The number of periods used for calculating the short-term moving average for MACD. Values:  numerical, represents a number of periods. Default value:  5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_SHORT MACD Long ​ Description Values Order types Name The number of periods used for calculating the long-term moving average for MACD. Values:  numerical, represents a number of periods. Default value:  20 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_LONG MACD Signal ​ Description Values Order types Name The number of periods used for calculating the MACD signal line. Values:  numerical, represents a number of periods. Default value:  10 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  MACD_SIGNAL TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. Because this strategy trades on crosses happening in a single cycle, it is not recommended to use additional trailing for normal buy and sell orders. Trades will only happen when both the trailing stop and strategy cross happen in the same round. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous macd Next pp Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled NBA Single Buy Take Buy TBuy Range Buy Level Sell settings Sell enabled Take Profit TP Range TP Profit Only Double Check Gain Gain Indicator settings Period MACD Short MACD Long MACD Signal TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
pp, https://wiki.gunthy.org/trading-strategy-options/spot/pp,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies pp On this page pp This strategy can be used for pairs that move up and down between a predictable price range for longer periods. You set fixed prices at which Gunbot should buy and sell, Gunbot will buy or sell as soon as the exact target is hit or exceeded. To refine this strategy, other indicators are available to be used as confirmation for both buying and selling. For example you could have Gunbot buy at a specific price only when RSI is 30 or lower. This strategy can be also used to trade purely on signals from confirming indicators, by setting unrealistic buy and sell prices. danger Gain protection is optional for this strategy. Be aware that this can lead to sell orders below your break-even point. When you want to allow sell orders at loss, make sure to set a negative value for  GAIN. Trading example ​ Example of how trading with this strategy can perform.   Details and settings Strategy parameters ​ Following settings options are available for  pp  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  pp . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  pp  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED PP Buy ​ Description Values Order types Name This sets the exact target price for placing a buy order. A buy order will be placed as soon as this price is hit or an even better price is available. For example: when trading a BTC-x pair with  PP_BUY  set to 0.00123456, a buy order will be placed in the first cycle where the ask price is 0.00123456 or lower. Values:  numerical – represents a price in base currency. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  PP_BUY NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  pp  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED PP Sell ​ Description Values Order types Name This sets the exact target price for placing a sell order. A sell order will be placed as soon as this price is hit or an even better price is available. For example: when trading a BTC-x pair with  PP_SELL  set to 0.00123456, a sell order will be placed in the first cycle where the bid price is 0.00123456 or higher. Values:  numerical – represents a price in base currency. Default value:  0 Affects Does not affect Strategy sell Strategy buy Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  PP_SELL Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ As  pp  is purely price based, there are no indicators that directly influence trading with  pp . TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TAKE_PROFIT Placeholder. TBUY_RANGE Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous macdh Next smacross Trading example Strategy parameters Buy settings Buy enabled PP Buy NBA Sell settings Sell enabled PP Sell Double Check Gain Gain Indicator settings TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
smacross, https://wiki.gunthy.org/trading-strategy-options/spot/smacross,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies smacross On this page smacross This strategy is based on  SMA , enabling Gunbot to buy when prices start moving up - indicated by fast SMA crossing over slow SMA. Selling takes place as soon as fast SMA crosses down slow SMA. To refine this strategy, other indicators are available to be used as confirmation for both buying and selling. For example you could have Gunbot buy when slow SMA crosses up fast SMA and and RSI is below 30. danger Gain protection is optional for this strategy. Be aware that this can lead to sell orders below your break-even point. Normal constraints like ""buy once, sell once"" don't apply to this strategy: each time buying criteria occur, Gunbot will place a buy order as high as set in your balance settings. Trading example ​ Example of how trading with this strategy can perform.   Details and settings How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. Strategy parameters ​ Following settings options are available for  smacross  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  smacross . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  smacross  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Single Buy ​ Description Values Order types Name Enable this to restrict  smacross  to placing just a single buy order on the first crossup, then it will go in sell mode. Useful when you combine  smacross  with a different sell method or use other parameters that prevents sell orders from happening at every crossdown. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  SINGLE_BUY Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  smacross  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ Relevant indicators for trading with SMA cross. These settings have a direct effect on trading with  smacross . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Slow SMA ​ Description Values Order types Name The number of periods used for calculating the slow SMA. Values:  numerical, represents a number of periods. Default value:  2 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  SLOW_SMA Fast SMA ​ Description Values Order types Name The number of periods used for calculating the fast SMA. Values:  numerical, represents a number of periods. Default value:  1 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  FAST_SMA TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. Because this strategy trades on crosses happening in a single cycle, it is not recommended to use additional trailing for normal buy and sell orders. Trades will only happen when both the trailing stop and strategy cross happen in the same round. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ADX_ENABLED Placeholder. ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous pp Next spotgridadvanced Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled NBA Single Buy Take Buy TBuy Range Buy Level Sell settings Sell enabled Take Profit TP Range TP Profit Only Double Check Gain Gain Indicator settings Period Slow SMA Fast SMA TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
spotgrid, https://wiki.gunthy.org/trading-strategy-options/spot/spotgrid,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies spotgrid On this page spotgrid A grid like strategy with dynamic trading targets and integrated trailing for both buying and selling. The idea of this strategy is to always be in a position, use market orders only, average down when prices goes down, take profit when price exceeds break even. And do so with an absolute minimum number of settings. tip This strategy is a bit different than all other Gunbot strategies: there are just a handful configurable options and it's ""always in position"": instead of waiting for the perfect entry it is always looking for chances to average down.   If you want to customize settings a lot, this strategy is not for you. Trading behavior ​ When you run spotgrid on a pair in an uptrend, this is the kind of trading behavior to expect: Let's break down what actually happens: When the strategy first runs and there is no balance to sell, it immediately places a market buy order If price goes down and it exceeds the spotgrid line in the chart, buy trailing is activated. As soon as trailing finishes, a buy order is placed. The break even price is now lower. If price reaches the Sell target on the chart, sell trailing is activated and the complete position is sold at profit when trailing finishes. After having sold, the strategy immediately starts buy trailing. If price goes up it will quickly open a new position, if price goes down it will place a buy order below the last sell rate. You will see that the first few buy orders happen fairly quickly when price starts going down. After a few trades, the price distance between buy orders gets much bigger. All targets are set automatically. When the market goes down, the strategy starts to accumulate units at ever lower prices: The bot will continue to accumulate until max buy count is hit, or when it run out of available funds. Every new buy order will lower the break even price. As soon as price hits the sell target and finishes trailing above break even, a sell order is placed. Balance management is very important, make sure you can afford the planned number of buy orders. tip The next trading targets are always visible on the chart.  Keep in mind the targets lines are moving over time, they represent the current targets. How to create a spotgrid strategy ​ Using the advanced strategy editor: create a new strategy and select spotgrid as buy and sell method Using Easy Edit: create a new strategy and select spotgrid as buy method Essential settings ​ To use spotgrid, there are just three essential settings: Setting Description Trading limit                            The amount to invest per buy order. On an USDT-BTC pair, a trading limit of 20 means that every buy order is for 20 USDT. Always make sure that trading limit is set higher than min volume to sell. Max buy count Limits how many buy orders are allowed. Setting a max buy count of 10 means that the bot may do up to 10 buy orders in a row, to average down in ever increasing price distance. Min volume to sell To ignore tiny balances.  Set this to the minimum order size of the pair, to make the bot ignore small balances that cannot be sold. There are a few more settings that can optionally be used with this strategy, described below Additional settings ​ There are a few additional settings you can use with this strategy. Setting Description Stop after next sell                               To stop trading a pair after the position closes When enabled, no buy orders are placed when there is no balance left to sell. Averaging down of the current position continues. Auto gain  Activates dynamic sell target  Enabled by default. The dynamic target is based on the distance between support and resistance, capped at a minimum profit of 2x trading fees. The target decreases when position size increases. Overrules a manually set target. Gain Manual sell target value Set a manual sell target, as a percentage above the break even price. The sell target is where trailing starts. With 0.5 as value, the sell target is 0.5% above break even. Grid multiplier Controls the distances between buy orders  Can be used to increase or decrease the distance between buy orders. The default value 1 means that the hardcoded levels are used. 1.5 would increase the levels with a factor 1.5x, a value of 0.5 would halve the default levels. Period Sets the chart interval The default period is 15. Make sure to only use  supported period values. SMA period How many candles are used for calculating support and resistance levels  By default 50 candles are used to calculate support and resistance. Keep quote Keep a number of units when selling  By setting keep quote at any number above 0, this number of units will be held back when the next sell order happens. tip Other parameters  Buy and Sell enabled options can be set as pair overrides. Watch mode is respected. Besides settings mentioned on this page, no other strategy setting has any effect on spotgrid. Previous spotgridadvanced Next stepgain Trading behavior How to create a spotgrid strategy Essential settings Additional settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
spotgridadvanced, https://wiki.gunthy.org/trading-strategy-options/spot/spotgridadvanced,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies spotgridadvanced On this page spotgridadvanced A grid like strategy with dynamic trading targets and integrated trailing for both buying and selling.  Based on  spotgrid , with additional configuration options, trend detection and 'continuous trading'. Regular trading behavior ​ When you run spotgrid on a pair in an uptrend, this is the kind of trading behavior to expect: Let's break down what actually happens: When the strategy first runs and there is no balance to sell, it immediately places a market buy order If price goes down and it exceeds the spotgrid line in the chart, buy trailing is activated. As soon as trailing finishes, a buy order is placed. The break even price is now lower. If price reaches the Sell target on the chart, sell trailing is activated and the complete position is sold at profit when trailing finishes. After having sold, the strategy immediately starts buy trailing. If price goes up it will quickly open a new position, if price goes down it will place a buy order below the last sell rate. You will see that the first few buy orders happen fairly quickly when price starts going down. After a few trades, the price distance between buy orders gets much bigger. All targets are set automatically. When the market goes down, the strategy starts to accumulate units at ever lower prices: The bot will continue to accumulate until max buy count is hit, or when it run out of available funds. Every new buy order will lower the break even price. As soon as price hits the sell target and finishes trailing above break even, a sell order is placed. Balance management is very important, make sure you can afford the planned number of buy orders. tip The next trading targets are always visible on the chart.  Keep in mind the targets lines are moving over time, they represent the current targets. Continuous trading behavior ​ CT, short for 'continuous trading', is a mechanism that lets you keep trading profitably even when the current price is far below the overall break even price.  The principle is very simple: if price is above the price of the last buy order, up to the number of units bought in this trade can be sold for a small profit in base and in quote. The base profits you keep, the quote profits can help bring down break even of the overall position. Besides the small profits from these partial trades, it allows your strategy to follow the market price more closely and sometimes fit in more DCA trades in one price range, compared to only waiting for prices to go down further to DCA. The chart above shows several CT trades. Each sell order on this chart is only working with the units bought with the previous buy order. The number of units to 'CT sell' is configurable using the continuous trading limit multiplier, setting this to 1 would sell approx. the same number of units as last bought, 0.5 would sell approx. half of the units last bought.  What happens when? ​ Assuming your settings allow CT orders: When price goes down after a DCA order: another DCA order gets placed when grid DCA target is hit. When price goes up after a DCA order: CT sell target is set above last buy rate, using 'gain' or 'auto gain'. When the target is reached, a CT sell order is placed. When price goes down after a CT sell order: if grid DCA target is reached, a 'CT buy' order is placed for approx. the same number of units as the CT sell order. The position size after this order is more or less identical compared to before the CT sell order. When price goes down after a CT buy order: a normal DCA order is placed when the DCA target hits. When price goes up after a CT sell order: if price is below break even and the distance between last sell rate and current price is more than the distance between first support and resistance, a new CT buy order gets placed. tip Manual trading or changing settings related to trading limit can disrupt continuous trading. If you use CT, make it a habit to only change trading limit settings after a complete sell order. How to create a spotgridadvanced strategy ​ Using the advanced strategy editor: create a new strategy and select spotgridadvanced as buy and sell method Using Easy Edit: create a new strategy and select spotgridadvanced as buy method Essential settings ​ To use spotgridadvanced, there are just three essential settings: Setting Description Trading limit                            The amount to invest per buy order. On an USDT-BTC pair, a trading limit of 20 means that every buy order is for 20 USDT. Always make sure that trading limit is set higher than min volume to sell. Max buy count Limits how many buy orders are allowed. Setting a max buy count of 10 means that the bot may do up to 10 buy orders in a row, to average down in ever increasing price distance. Min volume to sell To ignore tiny balances.  Set this to the minimum order size of the pair, to make the bot ignore small balances that cannot be sold. There are a few more settings that can optionally be used with this strategy, described below Additional settings ​ There are a few additional settings you can use with this strategy. Setting Description Stop after next sell                               To stop trading a pair after the position closes When enabled, no buy orders are placed when there is no balance left to sell. Averaging down of the current position continues. Auto gain  Activates dynamic sell target  Enabled by default. The dynamic target is based on the distance between support and resistance, capped at a minimum profit of 2x trading fees. The target decreases when position size increases. Overrules a manually set target. Gain Manual sell target value Set a manual sell target, as a percentage above the break even price. The sell target is where trailing starts. With 0.5 as value, the sell target is 0.5% above break even. Grid multiplier Controls the distances between buy orders  Can be used to increase or decrease the distance between buy orders. The default value 1 means that the hardcoded levels are used. 1.5 would increase the levels with a factor 1.5x, a value of 0.5 would halve the default levels. Period Sets the chart interval The default period is 15. Make sure to only use  supported period values. SMA period How many candles are used for calculating support and resistance levels  By default 50 candles are used to calculate support and resistance. Keep quote Keep a number of units when selling  By setting keep quote at any number above 0, this number of units will be held back when the next sell order happens. Trading limit multiplier Controls the invest per DCA trade Can be used to increase or decrease the invested amount with each consecutive buy order. Examples with trading limit 100 USDT and max buy count 3: 1: each buy order is for 100 USDT 1.5: first buy 100, second buy 150, third buy 225 2: first buy 100, second buy 200, third buy 400' Trailing range multiplier Controls how big trailing ranges are Can be used to increase or decrease the trailing range for all order types. Default value 1 means that the hardcoded range is used. 1.5 would increase the range with a factor 1.5x, a value of 0.5 would halve the default trailing range Start continuous trading  Controls from which number of buy orders continuous trading is allowed A value of 3 means that when the position is 3x trading limit in size, the next sell target is placed above the last buy rate instead of above break even. Set a very high value to effectively disable this feature. Continuous trading limit multiplier Controls how much funds to use for CT Sets the ratio between last buy order invest in base, and the amount used for trades during continuous trading. Value between 0 and 1. When set to 0.5, halve of the base amount used for the previous DCA trade will be used for continuous trading. Setting 1 would use the same amount as the last DCA buy order. Continuous trading restart multiplier Sets the minimum distance between a CT sell and a buy above that Default is 1, should usually not be changed. Examples: 1: buy target above last sell rate is placed once price is 1x the distance between sup/res above last sell rate 0.5: buy target above last sell rate is placed once price is 0.5x the distance between sup/res above last sell rate There is a hardcoded minimum distance of 2x trading fees. This strategy can use a built in trend watches that monitors various indicators on 15m and 4h charts. You can use this to easily try to trade more when the market is actually favorable, and reduce risks when the market is going down. Of course no trend detection is perfect, this one will be no exception. If you have a strong personal opinion about trend, it's probably a good idea to stick to that. Setting Description Only open when trend is bullish Avoid opening a new trade when market looks down When enabled, new positions are only opened when both 4h and 15m charts indicate a bullish market. This check is independent from the PERIOD in your strategy. Requires the exchange to offer both 15m and 4h candle data No DCA when trend not bullish Don't DCA while the market is bearish When enabled, DCA trades are only allowed when both 4h and 15m charts indicate a bullish market This check is independent from the PERIOD in your strategy. Requires the exchange to offer both 15m and 4h candle data Double DCA distance when trend not bullish Increase DCA distance while the market is bearish When enabled, the DCA distance gets doubled when the 4h and/or 15m chart do not indicate a bullish market This check is independent from the PERIOD in your strategy. Requires the exchange to offer both 15m and 4h candle data Trend CT grid multiplier Use a different CT buy target when trend is not bullish Multiplier to adjust CT buy target while trend is not bullish and TREND_LOWER_DCA is used A value of 2 would double the distance, a value of 1 results in the same behavior as when TREND_LOWER_DCA is disabled Trend grid multiplier Use a different grid multiplier when trend is not bullish Multiplier to adjust the next DCA target while trend is not bullish and TREND_LOWER_DCA is used A value of 2 would double the distance, a value of 1 results in the same behavior as when TREND_LOWER_DCA is disabled tip Other parameters  Buy and Sell enabled options can be set as pair overrides. Watch mode is respected. Besides settings mentioned on this page, no other strategy setting has any effect on spotgridadvanced. Previous smacross Next spotgrid Regular trading behavior Continuous trading behavior How to create a spotgridadvanced strategy Essential settings Additional settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
stepgain, https://wiki.gunthy.org/trading-strategy-options/spot/stepgain,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies stepgain On this page stepgain Stepgain follows the markets prices and trend, and buys or sells as soon as the trend reverses. Assuming a trend reversal (from downtrend to uptrend) usually takes place close to the bottom of a price movement, this allows you to buy shortly after a price bottomed. Similarly, selling takes place when an uptrend turns into a downtrend. Buying with Stepgain is based on  EMA , enabling Gunbot to start looking for a trend reversal after a set percentage below the lowest EMA is reached. Trends are calculated automatically by XTrend and are visible in your logs. XTrend results can vary depending on your setting for  PERIOD . Using XTrend is optional, you can also have stepgain trigger purely on price reversals above/below the configured level. You can optionally use indicators like RSI or Stochastic as confirmation to only buy or sell when both a trend reversal and a specific indicator level occur. Trading example ​ Example of how trading with the stepgain strategy can perform.   Details and settings How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. In this example both BUYLVL and SELLLVL would be set to 2. A change of price movement direction is assumed a trend reversal in this example, in reality not every change of price direction will be considered a trend reversal because the strength of the trend is considered as well. Strategy parameters ​ Following settings options are available for  stepgain  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  stepgain . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  stepgain  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Stepgain Buy Lvl ​ Description Values Order types Name This sets which step should be considered for buying: 1: Buy when price drops below  BUYLVL1  and the trend reverses or price hits  BUYLVL2 . 2: Buy when price drops below  BUYLVL2  and the trend reverses or price hits  BUYLVL3 . 3: Buy when price drops below  BUYLVL3  and the trend reverses. Values:  1 / 2 / 3 – represents steps. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL Stepgain Buy Lvl 1 ​ Description Values Order types Name Defines the first level below the lowest EMA to be considered for buying. Only used when  BUYLVL  is set to 1. When set to 1, this means that the price needs to be at least 1 percent below the lowest EMA. Values:  numerical – represents a percentage. Default value:  0.6 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL1 Stepgain Buy Lvl 2 ​ Description Values Order types Name Defines the second level below the lowest EMA to be considered for buying. Used when  BUYLVL  is set to 1 or 2. When set to 2, this means that the price needs to be at least 2 percent below the lowest EMA. Values:  numerical – represents a percentage. Default value:  2 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL2 Stepgain Buy Lvl 3 ​ Description Values Order types Name Defines the third level below the lowest EMA to be considered for buying. Used when  BUYLVL  is set to 2 or 3. When set to 10, this means that the price needs to be at least 10 percent below the lowest EMA. Values:  numerical – represents a percentage. Default value:  70 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUYLVL3 NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  bb  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Stepgain Sell Lvl ​ Description Values Order types Name This sets which step should be considered for selling: 1: Sell when price rises above  SELLLVL1  and the trend reverses or price hits  SELLLVL2 . 2: Sell when price rises above  SELLLVL2  and the trend reverses or price hits  SELLLVL3 . 3: Sell when price rises above  SELLLVL3  and the trend reverses. Values:  1 / 2 / 3 – represents steps. Default value:  1 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL Stepgain Sell Lvl 1 ​ Description Values Order types Name Defines the first level above the break-even point to be considered for selling. Only used when  SELLLVL  is set to 1. When set to 1, this means that the price needs to be at least 1 percent above the average bought price. Values:  numerical – represents a percentage. Default value:  0.6 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL1 Stepgain Sell Lvl 2 ​ Description Values Order types Name Defines the second level above the break-even point to be considered for selling. Used when  SELLLVL  is set to 1 or 2. When set to 2, this means that the price needs to be at least 2 percent above the average bought price. Values:  numerical – represents a percentage. Default value:  2 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL2 Stepgain Sell Lvl 3 ​ Description Values Order types Name Defines the third level above the break-even point to be considered for selling. Used when  SELLLVL  is set to 2 or 3. When set to 10, this means that the price needs to be at least 10 percent above the average bought price. Values:  numerical – represents a percentage. Default value:  70 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELLLVL3 Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name This is an extra check that looks at your recent trading history to verify  SELLLVL  will be reached before placing a sell order. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Indicator settings ​ Relevant indicators for trading with gain. These settings have a direct effect on trading with  gain , because  BUY_LEVEL  is dependant on EMA. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 XTrend Enabled ​ Description Values Order types Name Disable this to use stepgain the legacy way: act on price reversals only - not considering XTrend. When disabled, stepgain will trade when a price reversal above/below the set level happens. When enabled, stepgain will trade when a price reversal above/below the set level happens and the direction of the trend is confirmed by XTrend. Values:  true or false Default value:  false Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  XTREND_ENABLED TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. Because stepgain trades when trends reverse, it is not recommended to use additional trailing for normal buy or sell orders. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUY_LEVEL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. RT_BUY_LEVEL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous spotgrid Next stepgrid Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled Stepgain Buy Lvl Stepgain Buy Lvl 1 Stepgain Buy Lvl 2 Stepgain Buy Lvl 3 NBA Take Buy TBuy Range Sell settings Sell enabled Stepgain Sell Lvl Stepgain Sell Lvl 1 Stepgain Sell Lvl 2 Stepgain Sell Lvl 3 Take Profit TP Range TP Profit Only Double Check Gain Indicator settings Period Slow EMA Medium EMA XTrend Enabled TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
stepgrid, https://wiki.gunthy.org/trading-strategy-options/spot/stepgrid,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies stepgrid On this page stepgrid A grid like strategy that trades when price moves more than a defined step size. You can choose between using auto step size or setting a manual step size. Price trailing is completely automatic and happens every step up or down. The idea of this strategy is to trade every meaningful price movement. Even while below the overall break even price of a position, it will still take advantage of small steps upwards to sell parts of a bag at rates profitable compared to their corresponding buy orders. tip This strategy is a bit different than most other Gunbot strategies: there are just a handful configurable options, confirming indicators are not a thing. Trading behavior ​ When you run  stepgrid  with auto step size, this is the kind of trading behavior to expect: Let's break down what actually happens: Steps up and down are placed around last order rate, in case the trading pair has never traded before the reference price for steps is the price the pair had at the moment the strategy started running. If price moves down a step, it automatically starts buy trailing and places a buy order for 1x 'trading limit' as soon as trailing finishes. If price moves up a step while  below  break even, it automatically starts sell trailing and places a sell order when trailing finishes. Below break even each sell order is 1x 'trading limit' in size. If price is  above  break even, the behavior is the same but the order quantities can exceed 1x 'trading limit. If price reaches a full step above break even, it will close a bag at once. If price increases enough to reach the point where the next buy step is above break even, the buy step acts as stop in profit for positions bigger than 4x 'trading limit'. When in no position, the bot will buy again when either the next buy or sell step is reached. The bot will continue to accumulate until max buy count is hit, or when it run out of available funds. Every new buy order will lower the break even price. Balance management is very important, make sure you can afford the planned number of buy orders. The easiest way to start running stepgrid is by not owning any of the coins it is about to buy: starting with an existing balance is not recommended. tip The next trading targets are always visible on the chart. Keep in mind the targets lines are moving over time, they represent the current targets. How to create a stepgrid strategy ​ Using the advanced strategy editor: create a new strategy and select stepgrid as buy and sell method. Essential settings ​ To use stepgrid, there are just three essential settings: Setting Description Trading limit The amount to invest per buy order. On an USDT-BTC pair, a trading limit of 20 means that every buy order is for 20 USDT. Always make sure that trading limit is set higher than min volume to sell. Max buy count Limits how many buy orders are allowed. Setting a max buy count of 999 means that the bot may do up to 999 buy orders in a row. Min volume to sell To ignore tiny balances. Set this to the minimum order size of the pair, to make the bot ignore small balances that cannot be sold. There are a few more settings that can optionally be used with this strategy, described below Additional settings ​ There are a few additional settings you can use with this strategy. Setting Description Auto step size Enables using automatic step size Auto step size attempts to determine steps that just work. When not in a position, auto step size is smaller than when in a position. When disabled, you can set a manual step size instead. Step size Sets a manual step size Manual step size for buy and sell orders. Value represents price: setting 500 on USDT-BTC makes the bot trade each time price moves 500 USDT Enforce step size Restricts buy and sell trailing to step size When enabled, price trailing is not allowed to trigger trades at rates less then the current step size. This ensures a minimum distance between orders. Stop after next sell To stop trading a pair after the position closes When enabled, no buy orders are placed when there is no balance left to sell. Averaging down of the current position continues, partial sell orders do not make the bot stop afterwards. Period Sets the chart interval The default period is 15. Make sure to only use  supported period values. SMA period How many candles are used for calculating support and resistance levels By default 50 candles are used to calculate support and resistance. In this strategy, support and resistance are used to determine appropriate trailing ranges ATR period How many candles are used for calculating ATR (average true range) ATR is used for determining auto step size. By default it's set to use a 50 period ATR. Using lower values might cause step size to fluctuate too fast. Keep quote Keep a number of units when selling By setting keep quote at any number above 0, this number of units will be held back when the next sell order happens. Protect partial sell Keeps track of buy history Prevents partial sell orders from being fired at rates where there is no remaining buy volume below it, and would cause a loss. This relies on Gunbot having the full order history for the current position, for example it cannot work when you deposit funds and use stepgrid to sell them. tip Other parameters Buy and Sell enabled options can be set as pair overrides. Watch mode is respected. Besides settings mentioned on this page, no other strategy setting has any effect on stepgrid. Previous stepgain Next stepgridhybrid Trading behavior How to create a stepgrid strategy Essential settings Additional settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
stepgridhybrid, https://wiki.gunthy.org/trading-strategy-options/spot/stepgridhybrid,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies stepgridhybrid On this page stepgridhybrid This strategy borrows the grid logic from the  stepgrid strategy  and combines it with a trend monitor that constantly evaluates the market on 15m, 1h and 4h timeframes. Besides offering a lot of options for customizations, stepgridhybrid has: 'trading modes' that control when to start and stop trading a pair the ability to keep track of how much unsold buy volume remains below the current price the ability to automatically skip grid steps, for example when price is dropping out of a recently traded range the ability to place additional orders based on trend triggers, next to grid orders the ability to be combined with manual trades on the same pair Trading behavior ​ In it's pure form, stepGridHybrid is basically like stepGrid with one difference: sell amounts are based on remaining buy volume below the current price.
This means that it is possible to skip buy steps (either intentionally or by accident), as soon as trading resumes at a lower level it will not attempt to sell units bought at higher rates unless the overall break even price is reached. The integrated trend module offers settings to influence trading behavior like: when it's allowed to open a new trade place additional buy orders during a pump skip buy steps when price action is negative increase sell target and sell trailing range when price action is positive When you run  stepgridhybrid , this is the kind of trading behavior to expect: Let's break down what actually happens: Most trades follow the exact same logic as the  stepgrid strategy Sell amounts are not static, each sell order sells the remaining volume bought at lower prices * 'partial sell ratio' When price was moving downwards rapidly, several buy steps were skipped with the goal to spend the funds later When in no position, the bot will buy again when either the next buy or sell step is reached - as long as the current trading mode allows opening new trades at that time Skipping steps ​ The marked zones in the screenshot above are intentionally skipped buy steps. There are different triggers for skipping steps, some of them are settings configurable, some are hardcoded. Non grid orders ​ The marked zones in the screenshot above are examples of additional buy orders that were triggered by conditions detected in the trend module. Such orders do not move the then active grid targets. Trading modes ​ Settings for trading modes mainly define when to start and stop grid trading. By default the strategy runs in an unrestricted mode, allowing it to open a new trade anytime. By using one of the available trading modes, opening new trades is restricted by the entry and exit criteria of the selected mode. Meaning that as soon as all assets have been sold, a new trade can only be opened when the mode allows for it. Modes are meant to be used one at a time, enabling multiple modes on a single pair can lead to unexpected behavior. info Trading modes can be extremely restrictive.
Sometimes there can be several weeks or more between two 'entry signals' detected on the same pair. Manual trading range mode ​ Manually set a price range in which new trades are allowed. Optionally a stop limit price can be used. TA mode ​ Starts trading when the entry conditions for one of a collection of TA fractals is detected, disallows opening new trades when one or more exit scenarios have been detected. Think of 'fractals' as an attempt to detect a variety of bullish reversal patterns.  This mode includes an optional stop loss trigger. Volatility mode ​ Attempts to look for pairs that are currently in an uptrend on the 4h timeframe, and in the lower area of a volatility zone. Allows trading from near to the bottom to the top of an expected volatility range. This mode includes a stop in profit mechanism that automatically gets activated near the top of the zone, as well as an optional stop loss trigger. Pullback mode ​ When one of several pullback scenarios is detected on the 4h timeframe, new trades are allowed until 15 minutes after the scenario loses validity.  This mode automatically increases the invested amount for the first few trades. Balance settings ​ Setting Description Trading limit The standard amount to invest per buy order. On an USDT-BTC pair, a trading limit of 20 means that every buy order is for 20 USDT. Always make sure that trading limit is set higher than min volume to sell. With this strategy some buy orders will use a different amount than specified as trading limit, the possible range is between 0.25x and 2x the standard amount. Trading limit multiplier Controls the invest per DCA trade Can be used to increase or decrease the invested amount with each consecutive buy order. Examples with trading limit 100 USDT and max buy count 3: 1: each buy order is for 100 USDT 1.5: first buy 100, second buy 150, third buy 225 2: first buy 100, second buy 200, third buy 400' Auto TL ratio Change TL dynamically. When enabled, the strategy will use a dynamic buy amount depending on if price is relatively high (lower amount) or relatively low (higher amount). Amount ranges between 0.3x and 1x trading limit. If you use this, make sure to set a value for trading limit that is at least ~3.3x the minimum order size. Auto Partial sell ratio Change partial sell amount dynamically. When enabled, the strategy sets partial sell ratio automatically. It will use a higher value when price is relatively low, and a lower value when price is relatively high. What this means is that when prices are relatively high, partial sell orders will use less of the available balance at these rates, and aim to bring more sell volume to higher prices. When prices are relatively low, each partial sell order will sell almost the full amount of the previous buy order. Partial sell ratio Change partial sell amount dynamically. The strategy is aware of how much volume was bought below the current price, and how much remains to be sold profitably. If a sell step is reached where nothing can be sold profitably, the step is skipped. When placing a sell order below the overall break even rate, the sell volume is defined by partial sell ratio. If for example 200 units were bought at rates lower than the current price, a partial sell of 0.4 will lead to a partial sell order of 80 units. Max buy count Limits maximum trade size. When max is reached, the strategy goes in sell mode only. A value of 40 means that the total trade size may not exceed 40x the amount set as 'trading limit'. When max is reached, the strategy goes in sell mode only. Min volume to sell To ignore tiny balances. Set this to the minimum order size of the pair, to make the bot ignore small balances that cannot be sold. tip Dynamic invest per order In this strategy, the invest per buy order is not static. The user setting for trading limit is the base amount for several multipliers in the strategy, deviations between 0.3x and 2x trading limit are possible. Customize grid settings ​ Setting Description Period Sets the chart timeframe Sets which candles are used to calculate auto step size and trailing range. A lower value increases trading frequency and risk. This strategy additionally uses a hardcoded trend module that watches 15m, 1h and 4h timeframes. Auto step size Enables using automatic step size. Lets the bot automatically determine a grid step size that fits the pairs current volatility, Based on Average True Range (ATR). Step size Sets a manual step size. Manually defined grid step size for buy and sell orders, when auto step size is not enabled.  Normally set as a price: setting 500 on USDT-BTC makes the bot trade each time price moves 500 USDT. When using Pct step size, the value represents a percentage:  setting 2 will lead to having steps of 2% of current price. Pct step size Use a percentage based step size. When enabled, the value for step size represents a percentage. Enforce step size. Predictable minimum distance between orders. Used to ensure orders are not placed at a rate worse than step target. Price trailing can sometimes finish at a rate worse than the current grid step up or down. With this option enabled, orders may only get fired when trailing finishes at a better rate than the current step target. This can be useful for very precise balance management. Unit cost Determines how the break even price is calculated. When enabled, break even target represents the average price per unit of remaining units in balance. When disabled, break even target represents the point at which the remaining units can be sold for the total trade sequence to break even. Dynamic exit logic Different targets for different market situations. Use this to dynamically change the exit logic used for the strategy. In uptrends the target is unit cost, in any other market situation the break even price for the complete order sequence is used. Disable unit cost to use this option. Customize trailing settings ​ Setting Description Pct trailing range Use custom trailing range By default trailing ranges are set automatically based on the current distance between support and resistance. With this option you can set a percentage as custom trailing range to be used for buy and sell trailing. Custom trailing range Set trailing range as percentage When Pct trailing range is enabled, setting 0.5 will lead to having trailing ranges of 0.5% of current price. Trend settings ​ Setting Description Trend sync Use custom trailing range When enabled, new trades may only be opened when the trends on 4h and 1h are aligned and bullish. Does not apply to dca trades. This can be very restrictive. Trend basic Enables dynamic strategy behavior based on price action Uses the trend module to modify the following part of the strategy: using an increased sell step and trailing range when the market seems good for it placing immediate buy orders (regardless of hitting a step) when price action is very positive using a higher partial sell ratio after an immediate buy skipping certain buy steps when price action is very negative This option will usually lead to more trading volume and makes it more complex to plan capital allocation. Trend plus Enables dynamic strategy behavior based on trend Uses the trend module to modify the following part of the strategy: placing immediate buy orders (regardless of hitting a step) when there seems to be a short term opportunity using higher partial sell ratio after an immediate buy This option will usually lead to more trading volume and makes it more complex to plan capital allocation. Trend orders Disable immediate orders When disabled, immediate orders triggered by trend basic and/or trend plus are not allowed. Trailing range multiplier Control dynamic changes to trailing range This multiplier is used when trend basic and/or trend plus are enabled, and the trend module detects a situation where increased targets make sense. Setting trailing multiplier to 2, multiplies the trailing range by 2 in specific situations. This multiplier also applies to custom pct trailing ranges. Trend orders Disable immediate orders When disabled, immediate orders triggered by trend basic and/or trend plus are not allowed. Auto trend orders Allows additional trend orders in uptrends When used together with ""trend orders: true"", such trend initiated orders are restricted to be allowed only during a 4h uptrend Sell step multiplier Control dynamic changes to trailing range `This multiplier is used when trend basic and/or trend plus are enabled, and the trend module detects a situation where increased targets make sense. Setting setting sell step multiplier to 1.2 makes the a sell step 1.2x times as big in specific situations. This multiplier also applies to a custom step size. Trend trailing Use much bigger buy trailing range during downtrend Automatically use different buy trailing ranges for bearish situations. The aim is to spend less on buy orders when price is not moving upwards, by using much bigger trailing ranges. Trend trailing multiplier (small) Controls buy trailing range Trailing range multiplier to use when 4h structure is bullish, but 15m structure is bearish. Sets buy trailing range to ""multiplier * ATR"", or if you use a custom pct trailing range, to ""multiplier * pct trailing range"" Trend trailing multiplier (big) Controls buy trailing range Trailing range multiplier to use when 4h structure is bearish and 15m structure is not bullish or is bearish. Sets buy trailing range to ""multiplier * ATR"", or if you use a custom pct trailing range, to ""multiplier * pct trailing range"" Trading mode settings ​ Setting Description Custom trading range Set a price range to allow opening new trades in With this mode you can define the price zone in which you want the strategy to operate, and optionally set a stop target. With the settings like in the defaults, new trades may only be opened when price is between 8000 and 10000. DCA trades can be placed at any price. In case price drops below 7000 all funds get sold. Set stop target to 0 to effectively disable it. Trading range low Lower range limit Lower limit of manual trading range. When not in a trade and price is below the lower limit, no new trades will get opened. Trading range high Upper range limit Upper limit of manual trading range. When not in a trade and price is above the upper limit, no new trades will get opened. Trading range stop Stop loss target Stop loss target of manual trading range. When in a trade and price drops below this target price, all assets get sold immediately. Trading range DCA stop Lower limit for allowing DCA orders. Use this to block DCA orders below a specified price. Pullback mode Trade only during/after 4h pullbacks When enabled, a pair may only open new trades when a pullback happens.  Monitored on 4h charts, independent of the period you set in this strategy. This can be very restrictive. Volatility mode Trade only within certain volatility ranges When enabled, only bullish pairs are traded in a controlled volatility range: it will attempt to start trading relatively low and stop trading when price is about to peak. This mode comes with a built in stop mechanism near the top to often allow for a clean exit with minimal loss on the last sell order. This stop mechanism is separated from the dynamic stop loss option, and cannot be disabled in this mode. This can be very restrictive. TA mode Trade only during certain TA fractals When enabled, only pairs are traded after they hit one or more TA fractals. This can be very restrictive. Dynamic stop loss Stop loss mechanism for volatility and TA modes This option is meant to be used together with volatility mode or TA mode and tries to provide a meaningful stop target. Can also be used with other, or no active modes. You cannot see the stop target before it hits. This can lead to losses. Advanced settings ​ Setting Description Stop after next sell To stop trading a pair after the position closes. When enabled, no buy orders are placed when there is no balance left to sell. Averaging down of the current position continues, partial sell orders do not make the bot stop afterwards. Forever bags Force identical behavior below and above break even. Used to 'ride trends up'. The default strategy behavior is to exit a trade in one or a small number of sell orders above the break even price. Using the 'forever bags' option the break even price is completely ignored. Buy enabled Allow or disallow placing buy orders. When disabled, no buy orders will be placed at all. Sell enabled Allow or disallow placing sell orders. When disabled, no sell orders will be placed at all. SMA period How many candles are used for calculating support and resistance levels. By default 50 candles are used to calculate support and resistance. In this strategy, support and resistance are used to determine appropriate trailing ranges. ATR period How many candles are used for calculating ATR. Number of candles used to calculate Average True Range, which is used to calculate auto step size. Default value of 50 should usually not need tuning. Keep quote Keep a number of units when selling By setting keep quote at any number above 0, this number of units will be held back when the next sell order happens. Ignore trades before Ignore part of the order history Optional parameter to force Gunbot to not consider any trades before the time set Value represents a unix timestamp in milliseconds. Get a current timestamp on currentmillis.com Warning: this setting can lead to all kinds of unexpected behavior. Only use it when you know you need it. tip Other parameters Besides settings mentioned on this page, no other strategy setting has any effect on stepgridhybrid. Previous stepgrid Next stepgridscalp Trading behavior Skipping steps Non grid orders Trading modes Manual trading range mode TA mode Volatility mode Pullback mode Balance settings Customize grid settings Customize trailing settings Trend settings Trading mode settings Advanced settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
stepgridscalp, https://wiki.gunthy.org/trading-strategy-options/spot/stepgridscalp,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies stepgridscalp On this page stepgridscalp This strategy is a next iteration of stepgridhybrid and its trend module, trying to find a balance between scalping (quick, small trades with high probabilities of winning) and grid trading (DCA in more or less predictable steps). The trend module used in this strategy builds on several existing concepts, but is entirely new and now accomodates for user set timeframes. 
 Ideal scenario: trading grid style with very adaptive trailing and a clean exit. Next initial buy would happen after the market cools down Key features: truly multi timeframe: user configurable low, medium und high timeframes for monitoring aspects like trend changes, momentum strength and more. For example you could trade on 5m charts, while also monitoring 15m and 4h. different trading styles that are automatically used when opportune:  normal grid trading  cautious 'scalping' in upper ranges: aiming to exit the zone with no or a very small sized bag, using a smaller amount per buy order, strict buydowns for DCA and very cautious sell trailing trade supports: when the market looks very bad, grid buy trading stops and the strategy moves into a mode where it trades higher timeframe supports with limit orders different sell trailing styles that are automatically used when opportune:  regular trailing, with dynamic trailing ranges candle low trailing, to trail bigger moves upwards micro stop loss style, to quickly start sell trailing after riskier buy orders, accepting a tiny loss as outcome better at selling more volume at higher prices, due to 'partial sell ratio cap' and better sell trailing quick detection of trend direction changes can be very cautious about when it opens new trades info Cancel orders must be disabled in the global bot settings when you use the 'trade supports' option (you can do that on the setup page). About the trend module ​ The trend options are what set this strategy apart from other similar strategies. The exact details are not public to protect the work of the author, but how the data is used is a lot simpler and more transparent than in previous strategies that use black box data. 
 All data mentioned below, is visible in the right sidebar on the chart page Phase system ​ Using data from three configurable timeframes, one out of six phases gets recognized at any time: 1: very bearish
2: bullish reversal
3: bullish
4: very bullish
5: bearish reversal
6: bearish Trend sync  uses the phase system to determine if any of the following is allowed: opening new trades, coming from a situation where there is no balance to sell grid trading pausing grid trading, and placing limit orders at higher timeframe supports Trend plus  uses the phase system to apply dynamic trailing ranges, for example by increasing the sell trailing range in a very bullish market. Trend scalping  uses the phase system to go into 'scalping mode' when the market is either bullish, or very bullish. This mode using a more careful sell trailing mechanism (including tiny, partial stop losses), and reduces the number of 'high' buy orders, and instead buying more when price is slightly moving down again.  All trend options can be used together, or individually. Overbought status and momentum ​ By monitoring higher timeframes to determine if (and how much) the market is overbought and if the current momentum is bullish or bearish, the strategy can be either more careful with new trades, or extend trailing ranges to aim for more profit.  The  strict entry  and  strict dca  options depend heavily on longer term momentum status. Overview of restrictions ​ This strategy offers several settings that put restrictions on when new trades may be opened and when DCA is allowed, most of these settings can be used together.  When all restrictions are disabled, the strategy behaves like a more configurable version of stepgrid with small hardcoded limits on repeated buy orders in the same price zone, with much better sell trailing. The overview below describes the main impact of each restrictive setting. Setting Restrictions on new trades Restrictions on any buy order Price action analysis New trades not allowed in phases 'very bearish' and 'bearish'  Grid buy trades not allowed in phases 'very bearish' and 'bearish' Strict entry New trades not allowed when money flow, momentum and volatility are not favorable on the upper timeframe None Strict DCA None Grid buy trades not allowed when momentum is not favorable on the upper timeframe Exhaustion sensitivity None Grid buy trades not allowed when any of the timeframes is overbought, up to the specified timeframe (none, short, medium or long). For example when exhaustion sensitivity is set to 'medium', then buy orders are not allowed while the short, medium or both of these timeframes are overbought Trade supports None Grid buy trades not allowed in phases 'very bearish' and 'bearish'. During this time limit orders are placed at medium or long term supports Trend scalping New trades not allowed on upper step when in phases 'bullish' or 'very bullish' and short term trend is bullish Enforce additional grid buydown in phases 'bullish' and 'very bullish' Custom trading range New trades not allowed when price is not between 'trading range low' and 'trading range high' Grid buy trades not allowed when price is below 'trading range DCA stop' Strategy settings ​ Balance settings ​ Setting Description Trading limit The standard amount to invest per buy order. The amount used for each regular buy order. This value is also used to calculate 'buy count'. If you use 'trend sync' and/or 'trend scalping', some orders types can use different amounts using trading limit multiplier settings. The base amount these multipliers use, is the amount set as 'trading limit'. Trading limit multiplier Controls the invest per DCA trade Setting 1 (default) effectively disables this option. It can be used to increase or decrease the invested amount with each consecutive buy order. Examples with trading limit 100 USDT and max buy count 3: 1: each buy order is for 100 USDT 1.5: first buy 100, second buy 150, third buy 225 2: first buy 100, second buy 200, third buy 400' Always use trading limit multiplier Controls when to apply the multiplier When disabled: regular tl: (TRADING_LIMIT * TL_MULTIPLIER)^buy count situation where a ratio applies: TRADING_LIMIT * xxx_TL_RATIO When enabled: regular tl: (TRADING_LIMIT * TL_MULTIPLIER)^buy count situation where a ratio applies: ((TRADING_LIMIT * TL_MULTIPLIER)^buy count) * xxx_TL_RATIO Max buy count Limits maximum trade size. When max is reached, the strategy goes in sell mode only. A value of 40 means that the total trade size may not exceed 40x the amount set as 'trading limit'. When max is reached, the strategy goes in sell mode only. Min volume to sell To ignore tiny balances. Set this to the minimum order size of the pair, to make the bot ignore small balances that cannot be sold. Profit settings ​ Setting Description Gain Profit target for full sell orders Minimum gain percentage target above active unit cost / break even, depending on which of these targets is used. When set to 1, full sell is only allowed when hitting a sell step at least 1% above current unit cost / break even target. Partial sell gain Gain target for partial sell orders Minimum gain target for partial sell orders. When set to 0.5, only buy orders at least 0.5% (+ trading fees) below current price are considered when calculating partial sell volume Partial sell ratio Defines partial sell amounts. The strategy is aware of how much volume was bought below the current price, and how much remains to be sold profitably. If a sell step is reached where nothing can be sold profitably, the step is skipped. When placing a sell order below the overall break even rate, the sell volume is defined by partial sell ratio. If for example 200 units were bought at rates lower than the current price, a partial sell of 0.4 will lead to a partial sell order of 80 units. Partial sell cap Use a maximum value for partial sell amounts. Set an upper limit to partial sell order quantity per sell step. When disabled, only 'partial sell ratio' applies to partial sell order. When enabled, 'Partial sell cap ratio' is additionally applied. Partial sell cap ratio Caps partial sell amounts. Allows for putting a maximum on partial sell amounts, as well as selling higher volumes after effective sell trailing. Setting 1 as cap value means that a partial sell order may not exceed 1x 'trading limit' in value per step. Example for the 'per step' part: this means that in a case where sell trailing is very effective and the distance of 3 steps is covered before selling, the cap value internally gets multiplied by 3. Unit cost Determines how the break even price is calculated. When enabled, break even target represents the average price per unit of remaining units in balance. When disabled, break even target represents the point at which the remaining units can be sold for the total trade sequence to break even. Dynamic exit logic Different targets for different market situations. Use this to dynamically change the exit logic used for the strategy. Unit cost is used when the detected trend phase is 'bullish', 'very bullish' or 'bearish reversal'. In any other market situation, the break even target will be used. Disable this and enable 'unit cost', when you do not want to accept individual losing trades on final sell orders. Disable unit cost to use this option. Period settings ​ Setting Description Period Trading timeframe Sets which timeframe to use for short term market data. This is the main trading timeframe. Period medium Sets which timeframe to use for medium term market data. Period long Sets which timeframe to use for long term market data. Customize grid ​ Setting Description Auto step size Enables using automatic step size. Lets the bot automatically determine a grid step size that fits the pairs current volatility, Based on Average True Range (ATR). Step size Sets a manual step size. Manually defined grid step size for buy and sell orders, when auto step size is not enabled.  Normally set as a price: setting 500 on USDT-BTC makes the bot trade each time price moves 500 USDT. When using Pct step size, the value represents a percentage:  setting 2 will lead to having steps of 2% of current price. Minimum step pct Minimum value for auto step size. Minimum percentage size for steps, to overrule automatic step size. Setting 1 means that a step is set to 1% of price, unless auto step size is higher than 1% Pct step size Use a percentage based step size. When enabled, the value for step size represents a percentage. Enforce step size. Predictable minimum distance between orders. Used to ensure orders are not placed at a rate worse than step target. Price trailing can sometimes finish at a rate worse than the current grid step up or down. With this option enabled, orders may only get fired when trailing finishes at a better rate than the current step target. This can be useful for very precise balance management. Customize trailing ​ Setting Description Pct buy trailing range Use custom buy trailing range By default trailing ranges are set automatically set to 0.2 x ATR. With this option you can set a percentage as custom trailing range to be used for buy trailing. Custom buy trailing range Set trailing range as percentage When 'Pct buy trailing range' is enabled, setting 0.5 will lead to having trailing ranges of 0.5% of current price. Pct sell trailing range Use custom sell trailing range By default trailing ranges are set automatically 0.2 x ATR. With this option you can set a percentage as custom trailing range to be used for sell trailing. Custom sell trailing range Set trailing range as percentage When 'Pct sell trailing range' is enabled, setting 0.5 will lead to having trailing ranges of 0.5% of current price. IRIS-Trend  |  Price action ​ Setting Description Price action analysis Trend phase awareness. When enabled, trend data using the configured timeframes for short, medium and long term is used to: - (dis)allow opening new and DCA trades - switch between normal grid trailing and grid trailing with increased trailing ranges  Price action TL ratio Can be used to modify buy amounts when price action is very positive. Setting 2 places buy orders for 'trading limit' * 2 Price action threshold ATR percentage rank threshold used in the conditions to allow 'price action tl multiplier' and 'Price action analysis (during phase bullish reversal)' Setting 0.5 means that the current medium period ATR percentage rank value must be at least 50% and the current candle is green. Strict entry When enabled, more conservative criteria are used to (dis)allow opening new trades. This can lead to times of inactivity after a final sell, by design. Strict DCA When enabled, more conservative criteria are used to (dis)allow placing grid buy trades. Exhaustion sensitivity This setting controls up to which timeframe exhaustion must pass before a next DCA buy is allowed. - NONE: no exhaustion restrictions - SHORT: do not allow buy orders when short term is exhausted - MEDIUM: do not allow buy orders when short OR medium term is exhausted - LONG: do not allow buy orders when short OR medium OR long term is exhausted IRIS-Trend  |  Trade supports ​ Setting Description Trade supports Trade only supports in certain phases When enabled, grid trading gets disabled during phases 'bearish' and 'very bearish'. During these phases the strategy trades higher timeframe supports using limit orders. S1 TL ratio Defines order size for support buys on first support. When trend sync is enabled and multiple timeframes move downwards, buy targets are placed at medium or high timeframe supports. This setting determines the buy order value for support targets, it multiplies 'trailing limit' Setting 2 places buy orders for 'trading limit' * 2 S2 TL ratio Defines order size for support buys on second support. When trend sync is enabled and multiple timeframes move downwards, buy targets are placed at medium or high timeframe supports. This setting determines the buy order value for support targets, it multiplies 'trailing limit' Setting 2 places buy orders for 'trading limit' * 2 IRIS-Trend  |  Micro scalping ​ Setting Description Trend scalping Micro scalp higher price regions. When enabled, trend data using the configured timeframes for short, medium and long term is used to: - reduce risk by disallowing opening new trades in high, risky zones - switch between normal grid trailing micro scalping - place non grid orders, based on detected market conditions (for example buy after a dip below ema 50) During micro scalping partial stop loss orders are possible. This means that when sell trailing starts, the initial trailing stop is placed slightly below the last buy rate and the amount to sell is roughly equal to the last buy amount (overriding settings for partial sell ratio). Scalp TL ratio Defines order size for scalp buys. When trend scalping is enabled and a scalping zone is reached, buy and sell amounts are based on this ratio. This setting determines the buy order value for support targets, it multiplies 'trailing limit'. Setting 0.5 places buy orders for 'trading limit' * 0.5 Dynamic SL Stop loss for small positions. This is a stop loss option for small and risky positions (up to 2x 'trading limit', rounded), accumulated in higher regions. Does not trigger often. The goal is to accept a relatively small loss sometimes, before a trade gets hard to DCA effectively. IRIS-Trend  |  Multiple timeframes ​ Setting Description Multiple timeframes mode Increase trading frequency by using a second set of timeframes When enabled, the strategy switches to a lower set of timeframes when it detects favorable conditions during a 'bullish reversal' phase, with the aim of reaching a higher trading frequency. When the lower set of timeframes all have exhausted market conditions, it switches back to the regular set of timeframes. Multi timeframes mode TL ratio Defines order size for scalp buys. Trading limit ratio to use for buy trading using the lower set of timeframes This setting determines the buy order value for support targets, it multiplies 'trailing limit'. Setting 0.5 places buy orders for 'trading limit' * 0.5 Lower set low period Low period of lower set of timeframes. Lower set medium period Medium period of lower set of timeframes Lower set high period High period of lower set of timeframes Regular set low period Low period of regular set of timeframes. Should normally be set identically to the period settings in the indicator section. Regular set medium period Medium period of regular set of timeframes. Should normally be set identically to the period settings in the indicator section. Regular set high period High period of regular set of timeframes. Should normally be set identically to the period settings in the indicator section. IRIS-Trend  |  Accumulation cycle ​ Setting Description Accumulation cycle Mode to accumulate without partial sell orders When enabled, no partial sells below break even are allowed, full sell only allowed when gain target is reached and the market is exhausted on all timeframes. New trades are only opened during the 'bullish reversal' phase. Micro scalping is disabled. IRIS-Trend  |  Advanced trailing ​ Setting Description Trend plus Dynamic trailing ranges When enabled, trend data using the configured timeframes for short, medium and long term is used to in- and decrease trailing ranges based on the currently detected market phase. This overrules a trailing modifier in 'trend sync'. Buy multiplier small Smallest buy trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Buy multiplier medium Medium buy trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Buy multiplier large Largest buy trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Sell multiplier small Smallest sell trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Sell multiplier medium Medium sell trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Sell multiplier large Largest sell trailing range multiplier. Multiplies the currently active trailing range: auto or custom pct. 1x auto trailing range equals 0.2x ATR. Custom trading range ​ Setting Description Custom trading range Set a price range to allow opening new trades in With this mode you can define the price zone in which you want the strategy to operate, and optionally set a stop target. With the settings like in the defaults, new trades may only be opened when price is between 8000 and 10000. DCA trades can be placed at any price. In case price drops below 7000 all funds get sold. Set stop target to 0 to effectively disable it. Trading range low Lower range limit Lower limit of manual trading range. When not in a trade and price is below the lower limit, no new trades will get opened. Trading range high Upper range limit Upper limit of manual trading range. When not in a trade and price is above the upper limit, no new trades will get opened. Trading range stop Stop loss target Stop loss target of manual trading range. When in a trade and the current candle open price is below this target price, all assets get sold immediately. Trading range DCA stop Lower limit for allowing DCA orders. Use this to block DCA orders below a specified price. Advanced ​ Setting Description Buy enabled Allow or disallow placing buy orders. When disabled, no buy orders will be placed at all. Sell enabled Allow or disallow placing sell orders. When disabled, no sell orders will be placed at all. Stop after next sell To stop trading a pair after the position closes. When enabled, no buy orders are placed when there is no balance left to sell. Averaging down of the current position continues, partial sell orders do not make the bot stop afterwards. Forever bags Force identical behavior below and above break even. Used to 'ride trends up'. The default strategy behavior is to exit a trade in one or a small number of sell orders above the break even price. Using the 'forever bags' option the break even price is completely ignored. ATR period How many candles are used for calculating ATR. Number of candles used to calculate Average True Range, which is used to calculate auto step size. Default value of 50 should usually not need tuning. Keep quote Keep a number of units when selling By setting keep quote at any number above 0, this number of units will be held back when the next sell order happens. Ignore trades before Ignore part of the order history Optional parameter to force Gunbot to not consider any trades before the time set Value represents a unix timestamp in milliseconds. Get a current timestamp on currentmillis.com Warning: this setting can lead to all kinds of unexpected behavior. Only use it when you know you need it. tip Other parameters Besides settings mentioned on this page, no other strategy setting has any effect on stepgridscalp. Previous stepgridhybrid Next supportresistance About the trend module Phase system Overbought status and momentum Overview of restrictions Strategy settings Balance settings Profit settings Period settings Customize grid Customize trailing IRIS-Trend  |  Price action IRIS-Trend  |  Trade supports IRIS-Trend  |  Micro scalping IRIS-Trend  |  Multiple timeframes IRIS-Trend  |  Accumulation cycle IRIS-Trend  |  Advanced trailing Custom trading range Advanced Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
supportresistance, https://wiki.gunthy.org/trading-strategy-options/spot/supportresistance,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies supportresistance On this page supportresistance Buy at support, sell at resistance. That's all this strategy does. You can configure a distance from support and resistance, to configure a range where it will trade. How to work with this strategy ​ There is just a single setting that defines the entry point for this strategy:  SupRes_SPREAD This setting represents a percentage (of price) above the first support level (when buying), or below the first resistance level (when selling). As soon as price crosses this threshold, it will place an order. If the balance settings allow for multiple orders, a buy order gets placed every time the buy conditions are met. In the example below,  SupRes_SPREAD  is set to 0.1, the ""buy at"" line visualizes the target. The sell target would be 0.1 % below the first resistance level. Keep in mind that support and resistance are not static targets. This makes the  SupRes_SPREAD  setting more or less a trailing range. It's very important to set a value that makes sense for the current pair and the price range it is in: too big of a spread can cause immediate trades. The strategy sells when price crosses  SupRes_SPREAD  and  GAIN  is reached. This strategy can buy multiple times, it can be capped with  SupRes_MAX . Formula ​ Gunbot uses the following formula to calculate support and resistance levels. The number of candles uses as input is user configurable with the  SMAPERIOD setting. P = (H + L + C) / 3  R1 = (P  2) - L  R2 = P + (H - L)  S1 = (P  2) - H  S2 = P - (H - L) Less options than usual This strategy is a bit different from other strategies, it has much less configurable options. Confirming indicators or additional trailing are disabled. Strategy parameters ​ Following settings options are available for  supportresistance  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  supportresistance . Accepted values are all strategy names as listed  here . Buy & sell settings ​ Buy settings are the primary trigger for buy orders. Sell settings control how sell orders are placed. These parameters control the execution of buy orders when using  supportresistance  as buy & sell method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Gain ​ Description Values Order types Name This sets the minimum target for selling. Gunbot will sell once price reaches the set percentage above the break-even point. and  SupRes_SPREAD  is reached. If you want to have at least 2% profit per trade, set this to 2. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Sup / Res spread ​ Description Values Order types Name Sets the distance from support/resistance levels, in which orders may be placed. For buying: this value is a percentage above the first support level. For selling: this value is a percentage below the first resistance level. Values:  numerical, represents a percentage (of price) Default value:  0.1 Affects Does not affect Strategy sell Stop limit Strategy buy RT sell RT buy RT buyback Close DCA buy Parameter name in  config.js :  SupRes_SPREAD Sup / Res max ​ Description Values Order types Name Use this setting to limit how many times the strategy is allowed to buy, by setting a maximum allowed position size in base currency. If the combined value of quote balance, open orders and the next order to place are higher than  SupRes_MAX , then no further buy orders will be placed. Values:  numerical, represents a value in base currency Default value:  0 Affects Does not affect Strategy sell Stop limit Strategy buy RT sell RT buy RT buyback Close DCA buy Parameter name in  config.js :  SupRes_MAX Indicator settings ​ These indicator settings have a direct effect on trading with  supportresistance . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD SMA Period ​ Description Values Order types Name This defines the number of candles used for calculating support and resistance level. Values:  numerical – represents a number of candlesticks. Default value:  50 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy order Parameter name in  config.js :  SMAPERIOD Balance settings ​ Balance settings Misc settings ​ Misc settings DCA settings ​ This strategy cannot use DCA. 
 Averaging down is natively implemented by allowing multiple buy orders. Reversal trading ​ This strategy cannot use reversal trading. TrailMe settings ​ This strategy cannot use TrailMe. Confirming indicators ​ This strategy cannot use confirming indicators. Previous stepgridscalp Next tsa How to work with this strategy Formula Strategy parameters Buy & sell settings Buy enabled Sell enabled Gain Sup / Res spread Sup / Res max Indicator settings Period SMA Period Balance settings Misc settings DCA settings Reversal trading TrailMe settings Confirming indicators Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
tsa, https://wiki.gunthy.org/trading-strategy-options/spot/tsa,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies tsa On this page tsa Using a time series analysis, this strategy attempts to forecast the close price of the next period. This information is combined with xtrend and smacross to indicate the strength of an expected price move. Gunbot places a buy order when the ask price crosses under the forecasted price. A sell order is placed when the bid price crosses up the forecasted price. To refine this strategy, other indicators are available to be used as confirmation for both buying and selling. For example you could have Gunbot buy when the forecasted price crosses up ask and RSI is 30 or lower. Strategy parameters ​ Following settings options are available for  tsa  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  tsa . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  tsa  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  tsa  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Gain ​ Description Values Order types Name This sets the minimum target for selling. Gunbot will sell only once price reaches the set percentage above the break-even point. Additionally, the bid price must cross up the forecasted price. If you want to have at least 2% profit per trade, set this to 2. A sell order will be placed when the current price is at least 2% higher than the average bought price. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name This is an extra check that looks at your recent trading history to verify  GAIN  will be reached before placing a sell order. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Indicator settings ​ Relevant indicators for trading with tsa. This setting has a direct effect on trading with  tsa . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. Because this strategy trades on crosses happening in a single cycle, it is not recommended to use additional trailing for normal buy and sell orders. Trades will only happen when both the trailing stop and strategy cross happen in the same round. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TRAIL_ME_BUY Placeholder. TRAIL_ME_SELL_RANGE Placeholder. TRAIL_ME_SELL Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous supportresistance Next tssl Strategy parameters Buy settings Buy enabled NBA Take Buy TBuy Range Buy Level Sell settings Sell enabled Gain Take Profit TP Range TP Profit Only Double Check Gain Indicator settings Period TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
tssl, https://wiki.gunthy.org/trading-strategy-options/spot/tssl,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies tssl On this page tssl Set a range to trail for better entry or exit points, by following prices while they are moving down- or upwards. This way Gunbot won't trade while prices are still moving in the same direction. Trading example ​ Example of how trading with this strategy can perform.   Details and settings How to work with this strategy ​ The infographics below describes what triggers trades with this strategy. You can select an option to only sell at profit, to avoid the risk of a stop limit sell at loss while you're still in the initial range around bought price. This is called  TSSL_TARGET_ONLY . Minimum profit =  tssl  -  SELL_RANGE You can optionally use additional indicators like RSI for extra confirmation on entry and exit points. Strategy parameters ​ Following settings options are available for  tssl  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  tssl . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  tssl  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Buy Level ​ Description Values Order types Name This sets the minimum target for buy trailing at a percentage below the lowest EMA. Trailing must finish below this level. When you set this to 1, trailing for a buy order must finish at least 1% below the lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Buy Range ​ Description Values Order types Name This sets the buy range for trailing. Setting a range of 0.5% at a starting price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving downwards, the range moves down along with the price. As soon as prices start going upward, the range freezes and a buy order is placed when the price crosses the upper boundary of the range. Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_RANGE NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  tssl  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Gain ​ Description Values Order types Name This sets the starting point for sell trailing. Gunbot will start trailing once price reaches the set percentage above the break-even point. When you set this to 1, trailing for a sell order starts when price reaches a point 1% above the average bought price. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Sell Range ​ Description Values Order types Name This sets the sell range for trailing. Setting a range of 0.5% at a starting price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving upwards, the range moves up along with the price. As soon as prices start going downward, the range freezes and a sell order is placed when the prices crosses the lower boundary of the range. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  SELL_RANGE Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name This is an extra check that looks at your recent trading history to verify  GAIN  will be reached before placing a sell order. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Indicator settings ​ Relevant indicators for trading with tssl. These settings have a direct effect on trading with  tssl , because  BUY_LEVEL  is dependant on EMA. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Because tssl already trails for buy and sell orders, there is no benefit of enabling further trailing for strategy buy or sell orders. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. USE_RENKO Placeholder. Previous tsa Next adx Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled Buy Level Buy Range NBA Take Buy TBuy Range Sell settings Sell enabled Gain Sell Range Take Profit TP Range TP Profit Only Double Check Gain Indicator settings Period Slow EMA Medium EMA TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
TrailMe, https://wiki.gunthy.org/trading-strategy-options/trailme,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options TrailMe On this page TrailMe TrailMe is a group of features that allows you to trail different types of trades to reach better entry or exit points. This page describes all available configuration options. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. TrailMe settings parameters ​ Trail Me Buy ​ Description Values Order types Name Use this to enable tssl-style trailing for strategy buy orders. Values:  true or false Default value:  false Affects Does not affect Strategy buy RT buy Strategy sell Close DCA buy Stop limit RT buyback RT sell Parameter name in  config.js :  TRAIL_ME_BUY Trail Me Sell ​ Description Values Order types Name Use this to enable tssl-style trailing for strategy sell orders. Values:  true or false Default value:  false Affects Does not affect Strategy sell RT buy Strategy buy Close DCA buy Stop limit RT buyback RT sell Parameter name in  config.js :  TRAIL_ME_SELL Trail Me DU ​ Description Values Order types Name Use this to enable tssl-style trailing for DU orders. Values:  true or false Default value:  false Affects Does not affect DCA buy RT buy Strategy sell Close Strategy buy Stop limit RT buyback RT sell Parameter name in  config.js :  TRAIL_ME_DU Trail Me RT ​ Description Values Order types Name Use this to enable tssl-style trailing for RT_BUY orders. Values:  true or false Default value:  false Affects Does not affect RT buy Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT sell Parameter name in  config.js :  TRAIL_ME_RT Trail Me RT Sell ​ Description Values Order types Name Use this to enable tssl-style trailing for RT_SELL orders above the last RT_BUY rate. Values:  true or false Default value:  false Affects Does not affect RT sell Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT buy Parameter name in  config.js :  TM_RT_SELL Trail Me Buy Range ​ Description Values Order types Name This sets the buy range for TrailMe. Setting a range of 0.5% at a starting price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving downwards, the range moves down along with the price. As soon as prices start going upward, the range freezes and a buy order is placed when the price crosses the upper boundary of the range. Values:  numerical – represent a percentage. Default value:  0.5 Affects Does not affect Strategy buy RT sell RT Buy Strategy sell DCA buy Close Stop limit RT buyback Parameter name in  config.js :  TRAIL_ME_BUY_RANGE Trail Me Sell Range ​ Description Values Order types Name This sets the sell range for TrailMe. Setting a range of 0.5% at a current price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving upwards, the range moves up along with the price. As soon as prices start going downward, the range freezes and a sell order is placed when the prices crosses the lower boundary of the range. Values:  numerical – represent a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy Close DCA buy Stop limit RT buyback RT sell Parameter name in  config.js :  TRAIL_ME_SELL_RANGE Trail Me RT Sell Range ​ Description Values Order types Name This sets the sell range for TrailMe. Setting a range of 0.5% at a current price of 0.1 would set a range between 0.0995 and 0.1005. As long as prices keep moving upwards, the range moves up along with the price. As soon as prices start going downward, the range freezes and a sell order is placed when the prices crosses the lower boundary of the range. Values:  numerical – represent a percentage. Default value:  0.5 Affects Does not affect RT sell Strategy buy Strategy sell Close DCA buy Stop limit RT buyback RT buy Parameter name in  config.js :  TRAIL_ME_RT_SELL_RANGE Previous Reversal trading (RT) Next Misc settings TrailMe settings parameters Trail Me Buy Trail Me Sell Trail Me DU Trail Me RT Trail Me RT Sell Trail Me Buy Range Trail Me Sell Range Trail Me RT Sell Range Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Bot does not trade, https://wiki.gunthy.org/troubleshooting/bot-does-not-trade,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Critical errors Bot does not trade Reset password Restore backup Config marketplace Troubleshooting Bot does not trade On this page Bot does not trade A common question among new users is ""why does my bot not trade? There could be complicated reasons why this is the case, but often it's really simple. Checklist if your bot does not trade ​ Before you ask for help, go over this checklist: Verify that your bot is correctly running. If you see a ""grid"" output with trading data in the console window, then your bot is usually correctly processing pairs.  Make sure that you have the  Watch Mode  option disabled. Make sure that your trading strategy has both buying and selling enabled. You can find these settings in the Strategy Configurator. Double check that the  essential balance settings  are set correctly, above the exchange minimum trade size. Try reducing the setting for  Buy Level . The default setting of 1 can be very restrictive on some pairs or days where the market does not move much. If you use trailing for selling, try reducing the sell range. Previous Critical errors Next Reset password Checklist if your bot does not trade Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Reset password, https://wiki.gunthy.org/troubleshooting/reset-password,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Critical errors Bot does not trade Reset password Restore backup Config marketplace Troubleshooting Reset password Reset password To reset your password or 2FA, go through the following steps: Stop the Gunbot process completely Open the folder where you've installed Gunbot Remove the file called gunbotgui.db Restart the bot, open it in your browser and set a new password Previous Bot does not trade Next Restore backup Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Restore backup, https://wiki.gunthy.org/troubleshooting/restore-backup,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Critical errors Bot does not trade Reset password Restore backup Config marketplace Troubleshooting Restore backup On this page Restore a backup config Anytime you use the Gunbot interface to change the configution of the bot, a copy of the last working config gets saved to a backup folder. This article shows how to restore a backup config. Detailed steps ​ Make sure Gunbot is not running. Open your gunbot folder with a file explorer. Go to the  backups/config  folder and locate the file you want to restore, the files last change date is when it got backed up. Open the backup file with a text editor like Notepad, then select all and copy all text. In the main Gunbot folder, open the  config.js  file with a text editor. On some Windows installations the file may appear as just  config  without the .js file extension. Remove all text in this file and replace it with the contents of the backup file. Save changes to  config.js  and start Gunbot again. Previous Reset password Next Config marketplace Detailed steps Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Backups, https://wiki.gunthy.org/various/backups,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Acronyms Backups Handling bags Logs Troubleshooting Config marketplace Various Backups On this page Backups Each time you apply saved settings, a copy of the previously working  config.js  file is backed up. Backups are automatically saved in the /backups folder within your Gunbot folder. Restore a backup ​ To restore a backup, follow these steps: Open the desired backup config file with a text editor like Notepad++. Select and copy everything in the document. Open the main  config.js  file with a text editor like Notepad++. Replace the complete contents of this file with the copied contents of the backup file. Previous Acronyms Next Handling bags Restore a backup Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Handling bags, https://wiki.gunthy.org/various/handling-bags,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Acronyms Backups Handling bags Logs Troubleshooting Config marketplace Various Handling bags On this page Handling bags Every trader will have to deal with the situation that sometimes after a buy order has been successfully placed, the price drops and you're stuck with assets that lost value and cannot be sold for profit soon. Such assets block further trade activity for that pair, and are commonly called bags. There are several things you can do to prevent this from happening, or to deal with bags. Use a strategy like stepgrid ​ The  stepgrid  strategy is able to continue trading below the overall break even price of a trade, the profits it makes at lower rates contribute to lowering the break even price efficiently. The downside is that the strategy must handle the complete trade, do not start  stepgrid  on an existing bag. Wait it out ​ Not the most appealing option, but a common way to deal with bags is to just wait it out for the market to reach a profitable price level again. This of course won't always work, but it often does. Try to always keep enough base currency balance, to be able to keep on trading while you wait for one or more bags to recover. Keep in mind that it is not possible to retrieve old bought prices from the exchange API. At some point, usually after 30 days, you have to provide  BOUGHT_PRICE  manually as an override for your pair. On Poloniex Gunbot is able to retrieve older bought prices than 30 days. Reversal trading ​ With reversal trading Gunbot automatically accumulates quote currency while prices drop. It does this by first selling your assets at a lower price, then buying back more units when prices dropped further. This enables you to sell the bag profitably at a lower price than you initially bought it for. Stop limit ​ A common way to prevent accumulating bags is to cut your losses fast. With Gunbot you can set a  STOP_LIMIT  to sell a pair automatically after it loses x% of it's value. Averaging down ​ By buying more assets at a lower price than the initial price, you get a lower average buy price - this allows you to sell at a lower price than the price you initially bought for and get rid of your bags with profit. You can do this manually, or automatically by using  DOUBLE_UP . When averaging down, it is recommended to invest a lot more than your initial investment. The more you invest, the lower the average price to sell will be and the sooner you can get rid of your bags. Because of this, it is not recommended to enable  DOUBLE_UP  for many pairs at the same time. You can control how much funds is used to average down by configuring  DOUBLE_UP_CAP . This is how a typical trading history looks when  DOUBLE_UP  has been used: Previous Backups Next Logs Use a strategy like stepgrid Wait it out Reversal trading Stop limit Averaging down Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Logs, https://wiki.gunthy.org/various/logs,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Acronyms Backups Handling bags Logs Troubleshooting Config marketplace Various Logs On this page Logs Gunbot logs contain most of the information it works with. This article provides an overview of the different sections in these logs, and explains how to read them. This article applies to all strategies except Emotionless, which has intentionally limited log output. Log files per trading pair are automatically saved in the gunbot_logs folder and automatically rotated to zipped backups after reaching a filesize of 25MB. Up to three backup logfiles are kept per trading pair. Trailing ​ When you are using a strategy that contains trailing, a few sections of a log cycle contain all information related to trailing. Log entries for TrailMe trailing and TSSL look almost identical and follow the same logic, only the starting points for trailing are different. Buy trailing ​ Entry Description TrailingBuy limit The lower limit for trailing, as defined by the set buy range. This value is updated every cycle, following price movement for  Last price . Last price Current lowest ask price. Target to buy Starting point for buy trailing, a percentage from the lowest EMA as defined with  BUY_LEVEL . Stop limit The upper limit for trailing, as defined by the set buy range. This value is updated every cycle, following price movement for  Last price . A buy order will occur when  Last price  crosses up  Stop limit  and is below the lowest EMA. When the logs state that the price is in range, that means the current price is between  Stop limit  and  TrailingBuy limit . Sell trailing ​ Entry Description TrailingStop limit The upper limit for trailing, as defined by the set sell range. This value is updated every cycle, following price movement for  Last price . Last price Current highest bid price. Target to sell Starting point for sell trailing, a percentage from the averaged bought price as defined with  GAIN . StopLoss limit The lower limit for trailing, as defined by the set sell range. This value is updated every cycle, following price movement for  Last price . A sell order will occur when  Last price  crosses down  StopLoss limit  after it was in range and respects  GAIN . When the logs state that the price is in range, that means the current price is between  StopLoss limit  and  TrailingStop limit . If you've set  TSSL_TARGET_ONLY  to false, sell orders would also be placed without respecting  GAIN . This can only be used for TSSL, not for TrailMe The ""grid"" ​ The so called grid area contains all information about core checks, indicators and trading checks. This section should always show for cycles processed correctly (except for  emotionless , no grid is shown for this strategy). Core checks ​ Entry Description Stop limit hit Indicates if current prices hit or exceeded the set  STOP_LIMIT . Can we buy Shows YES when you don't own quote currency and market conditions meet one or more of the strategy buying criteria. Can we sell Shows YES when you own quote currency and market conditions meet one or more of the strategy selling criteria. Panic sell Indicates if  PANIC_SELL  is enabled or not. Can average When  DOUBLE_UP  is enabled, this shows YES when doubling up is possible according to  DU_METHOD  and  DU_CAP_COUNT . REVERSAL TRADE Indicated if a pair is in reversal trading. Shows YES when  REVERSAL_TRADING  is enabled and an  RT_BUY  has been performed and no buyback order took place yet. Indicators ​ The indicators section shows all indicators as calculated by Gunbot. Trading checks ​ Entry Description Ask Current lowest ask price. Bid Current highest bid price. Base Balance Total available balance of base currency. Quote Balance Total available balance of quote currency. Quote On Orders Amount of quote currency currently in open orders. BreakEven point The break-even point, including trading fees paid. ENTRY POINT The price to buy, according to your strategy settings. For example with a pure Bollinger Bands strategy, you'd see a price x% above the lower Bollinger Band. For strategies without a clear entry point, for example when additional confirming indicators are used, the price to buy according to  BUY_LEVEL  is shown here. EXIT POINT The price to sell, according to your strategy settings. For example with a pure Bollinger Bands strategy, you'd see a price x% below the upper Bollinger Band. For strategies without a clear exit point, for example when additional confirming indicators are used, the price to sell according to  GAIN  is shown here. RT BUY The price to buy for the next RT_BUY. When trailing is enabled this price is the starting point for trailing. RT SELL The price to buy for the next RT_SELL. When trailing is enabled this price is the starting point for trailing. BUYBACK The break-even point where reversal trading will buy back a bag to continue regular trading. STOP LIMIT The stop limit calculated as average bought price minus  STOP_LIMIT . XTREND Shows the trend as measured by XTREND. Only used for Stepgain. BAG VALUE IN BASE Shows the value of your ""bag"" in base currency. It can happen that this value does not disappear after a sell order, this does not matter and it will be updated after the next buy order. LAST TRADE P/L Percentage of profit or loss of the last strategy sell order. BASE LAST TRADE P/L Absolute profit or loss of the last strategy sell order. Profit/Loss ​ This section shows accurate profit/loss statistics per trading pair. Fees are already deducted. All trades fetched from the exchange are analysed, using  IGNORE_TRADES_BEFORE  can cause that only trades from a certain time and date are fetched and analysed. Entry Description Pair P/L The sum of all proceeds for a pair (buy orders have negative proceeds). Only realized P/L. Normal Trading Profit/Loss for all trades except trades made during reversal trading. Buy orders without a sell order following are counted as unrealized profit, the full sum of the buy order is considered a loss. Reversal Trading Profiti/Loss for trades made during reversal trading only. Buy orders without a sell order following are counted as unrealized profit, the full sum of the buy order is considered a loss. Last 24h Same as  Pair P/L , but filtered for trades made in the last 24 hours. Note that this can be wrong when multiple buy orders happened before selling and one or more of these fall outside the filtered time frame. Last week Same as  Pair P/L , but filtered for trades made in the last 7 days. Note that this can be wrong when multiple buy orders happened before selling and one or more of these fall outside the filtered time frame. Last month Same as  Pair P/L , but filtered for trades made in the last 30 days. Note that this can be wrong when multiple buy orders happened before selling and one or more of these fall outside the filtered time frame. Previous Handling bags Next Critical errors Trailing Buy trailing Sell trailing The ""grid"" Core checks Indicators Trading checks Profit/Loss Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Archive, https://wiki.gunthy.org/about/changelog/changelog-archive,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Changelog New in latest version Archive Supported exchanges System requirements Purchasing Gunbot Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace About Changelog Archive On this page Archived changelogs This page is a summary of old changelogs. Only the most important changes are listed. New in v24.6.7 New features ​ New dashboard:  better looking dashboard with more data. Stats for inactive trading pairs are now available, as well as hourly, daily and weekly snapshots of asset balances. New spot strategy:   stepgridscalp  is a next iteration of stepgridhybrid and its trend module, trying to find a balance between scalping (quick, small trades with high probabilities of winning) and grid trading (DCA in more or less predictable steps) Stepgridhedge:  make it possible to override buy/sell enabled when using 'use trend'. Add more setting  options : 'Minimum step up pct', 'Minimum step down pct', 'Minimum step asymmetric', 'Instant open threshold (long)', 'Instant open threshold (short)'  Stepgridhybrid:  add 'Minimum step pct' option to use auto step size with a fixed minimum % step, option to set upper limit to partial sell quantity. Add settings to control minimum gain on partial and full sell orders Custom order arrow colors:  configure custom colors for chart order arrow icons Simulator:   Optionally configure custom starting balances Trading settings:  add option to copy pair settings to all pairs with the same assigned strategy  Bugfixes / Improvements ​ Fix webhooks cases for long/short at limit/market for all exchanges.  Fix closeLimit for customStrat.  Refactor handing of ABP/unit cost target in GUI. Fixes the jumpy break even line  Fix issue in trend module that prevented data being updated Update API endpoints for several external platforms Stepgridhedge: fix mark text and notification text when a dca order gets blocked by buy/sell enabled, while use trend is on Fix market buy percentage buttons in trading terminal Trading terminal: fix displayed symbol for market buy/sell orders on bybit Grid family strats: map current grid buy and sell targets to 'price to buy / sell' on dashboard Fix nonsensical buy count value in sidebar when using forever bags Fix problem with entering values starting with 0, in strategy editor for 'IGNORE_TRADES_BEFORE', 'NBA', 'TRADES_TIMEOUT', 'KEEP_QUOTE' New in v24.3.2 New features ​ Stepgrid:  add optional protection against losing partial sell orders Stepgridhybrid:  several new default settings to automatically trade less in bearish markets, and allow for more custom trading behavior Stepgridhedge:  new 15m/1h based trend mode to determine the side to trade. Option to configure the previously hardcoded buydown rate. Futuresgrid:  add 4h and 15m/1h trend variants as a way to determine trading side. Configurable minimum buydown option. Chart timescale marks:  show trades, pnl and strategy actions per candle GUI notifications for grid strategies:  easily get strategy info like why an order was not placed at a certain time Option to hide all balance data in GUI:  want to show off your bot, but not show your balances? Now you can Improve trading settings configurator:  search function for individual settings, add support for viewing and editing user defined strategy parameters Option to disable S/R lines on chart:  you can now disable the previously hardcoded support and resistance lines on the chart, using the chart right click settings dialog Custom strategies:  new methods to define completely custom chart lines, timescale marks and GUI notifications Mobile app:   Android & iOS app for all users with a Gunbot Ultimate (unlimited slots) license. Easily monitor many bot instances. Experimental new features ​ These are expected to be in active development in the coming time. Webhook support for TradingView add-on:  receive alerts by webhooks intead of email Gunbot simulator:  simulated trading with real strategies and market data, with fake money and no risks Bugfixes / Improvements ​ Fix OKX market buy orders Fix OKX/okGunbot telegram notifications charts link Fix for bittrex market orders Fix problem that didn't show parts of console logs (like console.error) in the GUI debug logs Fix problem with PNL calculation on OKX with market order that filled in several parts Trading settings: fix several conditions that could crash the page Fix issue in GUI api key validation that could let unvalid keys get verified.  Setup page: fix problem that prevented entering exchange delay >60s.  New in v24 New features ​ New supported exchanges:  okGunbot, FTX US, Gate.io New spot strategy:   stepgridhybrid New futures strategy:   stepgridhedge Unified release:  there is now a single release for all current Gunbot Editions (One, Standard, Pro, Ultimate) Better PNL stats:  completely reworked profit and loss calculation for spot and futures trading New trading settings editor:  the old  pairs ,  strategies  and  easy edit  pages are succeeded by a single new editor:  Trading settings .  The new editor should make it easier to find interesting pairs to trade, and quickly configure a strategy. New global settings editor:  the old  profile  and  global settings  pages are combined into a single page:  setup . The new editor should make it easier to quickly configure essential settings when setting up the bot for the first time. View debug logs:  the browser interface can now show the same debug logs as visible in the main process window Breaking changes ​ Normally Gunbot releases are completely backwards compatible, but this time there are a few breaking changes. Reserved strategy names:  the following strategy names are treated differently by the GUI: they can only be used with buy and sell methods set to fitting values for this strategy. Adding a pair with any of these strategy names leads the GUI overwriting the strategy and placing default values. Reserved:  stepgrid ,  spotgrid ,  spotgridadvanced ,   stepgridhybrid ,  tenkan ,  futuresgrid ,  market_maker ,  market_maker (spot) ,  custom ,  stepgridhedge . If you have any existing strategies with customized settings using a reserved name (for example a strategy called 'spotgrid' with buy and sell methods set to 'tenkan'), there are two things to do if you want to keep using it in combination with the new trading settings editor: rename it to something else than a reserved name, and make sure the buy and sell methods are identical. Lower case strategy names:  If you use the browser interface, it will rename every strategy name, buy and sell methods to lower case characters. Only lowercase strategy names are accepted in the new trading settings editor. If you use autoconfig to set or change strategy names, it will also use lowercase names only. Custom strategy file location:  custom JS strategies need to be saved in the  ./customStrategies  folder from now on. The filename you set in  STRAT_FILENAME  must be from a file that exists in this folder. Info for manual config.js handling If you use the new default config.js file and configure Gunbot without using the GUI, then make sure to keep only one of these lines in the bot section: orderNumber 
OR
 gunthy_wallet Bugfixes / Improvements ​ fix reported issues related to order execution on various exchanges fix reported issues related to break even calculation for spot strategies, especially for extremely long order histories improve gui performance, especially with a high number of active trading pairs fix new pairs on kraken, these should now no longer require software updates autoconfig: fix problem with missing 24h volatility data on several exchange, fix ticker collection for kraken, allow ticker jobs to run at gdax custom strategies: wait for async user code to complete before persistently saving any user data to customStratStore countless small fixes New in v23 ​ Core / GUI changes ​ New spot strategy:   stepgrid  allows for almost zero settings trading Exchange connectivity:  support for OKX v5 API, fix breaking change on Kucoin API. Migrate Beaxy endpoint to their new schema.  OKX and Beaxy changes require user feedback. Code editor:  using the new  code editor  you can read and edit config files, internal data and custom strategies right from the Gunbot interface.  Kraken:  add support for all newly introduced markets GUI performance : much faster loading times, less resource usage, smoother charts Bugfixes / Improvements (core) ​ Fix CEX candles ParseFloat leverage parameter on Bitmex Add postOnly orders for all limit orders at FTX More love to telegram bot pnl spotgridadvanced: improve handling of CT order amounts, fix a problem that prevented CT trades Fix an old bug that could flip a position with repeated attempts to close at ROE Bugfixes / Improvements  (GUI) ​ Fix all custom strategy target lines Fix pnl not updating for new orders on gui dashboard Fix incorrect form background width on pairs and strategy page Fix issue that could crash the pairs page when removing a pair Fix ROE not resetting in GUI after futuresgrid closes a position Fix missing items for FTX futures pairs: margin ratio, unrealized pnl and maintenance margin Fix automatic loading of ichimoku indicator when MM _ TENKAN is used Fix leverage sometimes being displayed as negative number  Add subaccount field for ftx to gui profile page Rearrange chart line label positions for better chart readability Fix recent orders not updating automatically in overview sidebar Fix mobile save button not appearing Show potential moto entry prices on chart.  Fix exporting chart entities to alert module v21 ​ Core / GUI ​ Bybit support:  you can now trade futures on Bybit New strategies : spotgrid, futuresgrid, spotgridadvanced, tenkan Custom strategies : code your own trading strategies with JavaScript DCA method for futures trading : every futures strategy can now use the Tenkan method to DCA Improved profit and loss stats : in telegram alerts and in the interface Bugfixes ​ Fix various order execution problems Fix issue in ""prevent crossover"" when adding pairs with AutoConfig Fix various GUI bugs v20 ​ Core / GUI ​ Completely new GUI:  improved performance, easier to use, better charting, improved trading terminal, more stats, additional config wizard for novice users Seamless config changes:  pair cycling is no longer interrupted when a config change happens. New settings take effect the next cycle New partner exchanges:  Bitget and Nash New strategy for spot trading : Support / Resistance PND close : an alternative to ROE trailing to aim for bigger profits in margin strategies. PND attempts to wait until a move plays out before closing position Alternate ROE trailing method for margin strats:  with  ROE_SCALPER  the trailing range is an absolute ROE value Liquidity maker for spot trading:  provide liquidity and profit from bid/ask spread Easier config sharing : import parts of  config.js  or  autoconfig.json  using the GUI Store more order history:  to improve profit/loss calculations and prevent unneeded ""bought price"" warnings, the complete order history is now locally saved over time TradingView alerts : option to change strategy by alert, enable  TV_TRADING_LIMIT_CAP  for Bitmex, better handling of multiple incoming emails Alerts (beta):  build your own strategy in a visual way using built-in TradingView charts New in v20.7: ​ New exchanges supported : FTX, Beaxy and Txbit Coin margined futures : now supported on Binance Futures. Set market type: delivery Improved resource usage and cycling speed:  migrating from Node v9 to v14. Delete your gunbotgui.db file and set a new password to take full advantage Improved profit and loss stats : in telegram alerts and in the interface Improved GUI styling and behavior:  stability fixes, performance improvements, and saving more state info to local storage Market Maker ​ New strategy variants : Grid, Support/Resistance, Fibonacci, Pullback, One Scalper, x125 & Moto AutoConfig ​ Editor and stats in the GUI : every single AutoConfig feature is now editable through the GUI, every config change is visible on the AutoConfig dashboard More filter types : add pairs with linear regression filters, more options to filter your own variables Use your own logic:  most values in Autoconfig jobs can now optionally use custom JavaScript expressions. Expressions have access to almost all internal bot data Silent mode : disable console logs for AutoConfig Bugfixes ​ Numerous exchange specific trading execution fixes Fix closelong / closeshort alerts for Kraken Futures and Binance Futures Work around Kraken cloudflare issue in ccxt library Add support for all new pairs on Kraken (on other exchange this happens automatically) Prevent firing orders if MM bots receive sudden strange balance or ROE values Fix problem that prevented proper handover from DU to RT Fixed in v20.7 ​ Fix MM orders at Bitget Various GUI bugfixes and small improvements Automatic fetching of pair lists for Binance Futures and Kraken Fix problem with execution of stop limit orders on Binance Futures Fix problem with execution of short alerts with TradingView add-ons Fix 'length of undefined' error that sometimes caused a restart when trying to read the gui auth databased v18 ​ Core ​ Fixed all pending reports for OKX and Kraken Futures trading competitions Various fixes for XRP pairs on Kraken Futures Fix MARKET _ CLOSE Fix binanceFutures for Market Maker Re-enable dudone: true in pair states Fix cycling issues with EOS Fix Binance futures close orders issues fix Tradingview alerts for binance futures Fix Kraken pairs not getting balances Fix kumex grid for Market Maker Autoconfig, fix non-existing check for pair passed filters for changing delay with manageOverrides job Fix Autoconfig support for ARM v16 ​ Core ​ Support for our exchange:   Gunthy New partner exchange:  Binance New Autoconfig features:   New filter: linear regression channel Option to filter on pair variables from another exchange Support for Bittrex credits:  automatically used when enabled at Bittrex and there is a balance for BTXCRD New features / changes ​ New partner exchange:  Kraken Futures partnered with Gunbot and is now fully supported in Gunbot. Many new Autoconfig features: Reduce average processing time for jobs with ticker filters. Add an option to reset user variables, without having to create a separate job for it. New filter types:  bearishStandardDeviationChannel (+  * History variants) many time based filters filters based on last order type for specific pairs strategy name filter variableNotExist: to check if a variable is not set allowsHedging: only add pairs that allow for direct hedging between a specified hedge pair Per pair user variables, allowing you to create pair specific interactions between jobs. Option to disable Telegram notifications per job. Option to change exchange delay with a manageOverrides job. New job types: manageBotSettings: to make changes in global bot settings hedgeGB & hedgeGB2 allow for hedging with Gunbot bugfixes ​ Fix UTA for H20/M20 pair on Bitmex. Better tuning for timely fetching Kucoin tickers. Fix many profit calculations in CryptoSight, fix admin rights issue. Add support for ALGO and USDC pairs on Kraken. Fix TV being stuck after an incoming close alert when there is no position to close. Better handling of DU count. Fix an issue with TakeProfit that sometimes made it falsely trigger when prices moved up. Autoconfig fixes:  Fix backtesting for jobs using  * History filters. Fix issue with processing Huobi tickers in case new pairs are introduced on the exchange. Better handling of removing the last pair on an exchange. Fix parsing of markdown elements in telegram alerts. Automatically purge old history data when history value in config gets reduced. Also look for mvts value in pair overrides. Various fixes that improve performance on Kraken Futures v15 ​ New features / changes ​ Trading fees setting moves to exchange section:  for easier strategy handling, the TRADING _ FEES setting is now configurable per exchange. It's no longer a strategy setting. Limit orders for TradingView add-on:  optionally you can now let the TradingView add-on place limit orders instead of market orders. Pre-release of AutoConfig:  with AutoConfig you can automate all kinds of things you previously could only do by hand. For example you can use it automatically add high volume trading pairs, assign a bag handling strategy for pairs that are not performing well, or automatically update pair overrides. It's called a pre-release because there no GUI for it yet, it's fully functional though. Bugfixes ​ Bring back Telegram integration for the ARM edition. Porting many small exchange fixes from bitRage to Gunbot. Fix an issue that could cause unwanted restarts on Poloniex. Fix ""bought already"" problem that prevented trading for some users. Fix two long standing bugs that caused trailing to sometimes not trigger an order. Fix an issue on Kraken and Bittrex that caused all pairs to wait when there was an open order for a single pair. Fix an issue that could sometimes invert ROE on Bitmex. Fix for TV stoploss alerts. v13 / v14 ​ New features ​ New exchanges:  Gunbot now supports trading on Idax and Cobinhood. Please note that Cobinhood only has an API key, not an API secret - use an IP restriction for your key for added security. Restrict buying with  smacross  :  you can now restrict  smacross  to only place a single buy order, instead of buying on every cross up. Set  SINGLE_BUY  true to only allow a single buy order. Improved privacy for Cryptosight:  restrict who is allowed to view and interact with your Telegram bot.  Use the  admin_id  setting to specify one or more user IDs that are allowed to use your Telegram bot. Improved GUI template:  better optimized for mobile usage, different color schemes and support for setting a custom highlight color. Changes to margin trading on Bitfinex (TV add-on):  all amounts should now be specified in quote.  Different alert syntax for closing positions on Bitmex (TV add-on):  longs are now closed with CLOSELONG _ , shorts with CLOSESHORT _  instead of CLOSE _  for both. New path for log files:  per pair log files are now saved in the /gunbot _ logs folder. Additional changes in patch release (v14) ​ Improved ROE calculation for Bitmex : values now closely match the  leveraged ROE values on Bitmex  itself. If you're unsure what value to use in Gunbot, refer to the examples on the margin strategy pages for  ROE . TradingView alerts on Bitmex Testnet:  email alerts can now also be used on Testnet. Close entire positions on Bitmex using alerts:  enable  TV_CLOSE_ALL  to close an entire position when a close alert arrives, instead of closing the amount specified in trading limit settings. SL_DISABLE_SELL  :  Disabled the sell side after a short position hit  STOP_LIMIT . Lending Rate (Poloniex):  Allow for entering a maximum lending rate for margin positions. Bugfixes ​ Better support for new currencies on Kraken, whatever shitcoin they are going to list, Gunbot will be ready to trade without needing an update Fix reversed orders array at Bittrex and Huobi Fix an issue that would cause multiple buys at Binance Fix an issue that would wrongly calculate trading map values on Binance Improve backward compatibility of ABP calculations Fix Huobi ABP Fix ""lowerCase of undefined"" error Improve SMACROSS behavior Cancel all stop orders if ROE is reached, on Bitmex Various fixes for manual orders through the GUI Fix buy/sell stop orders on Bitmex, for both market and limit orders. Fix STOP _ LIMIT sometimes not working on Kraken Fix stop orders triggering ""waiting for open orders"" Fix Tl _ ALLIN for long orders on Bitmex. Fix MACD-H display on custom strat Fix ""toLowerCase"" error Available funds are now used only after an RT _ SELL.  Fix FUNDS _ RESERVE not being respected Fix clientId issue on KuCoin If a buy gets canceled then set off double buy protection.  Correct an error that sometimes caused orders to be cancelled too early Improved triggering of DU orders Fix RT _ SELL, RT _ BUY triggering Fix ""just bought"" Fix price precision for CoinBase Pro Additional fixes in patch release (v14) ​ Fix rate NaN for some stop orders Fix invalid tickSize for limit orders at Bitmex with USD-ETH. Fix market sell orders with stop sell higher than zero.  Fix an issue that would keep stacking orders at Bitmex. Fix an issue that would send wrong quantity for market buy at Bitmex. Fix an issue that would silently fail to send sell market orders at Bitmex. Fix to ""min volume not matched"" message.  Fix tick size for stop orders.  Fix Huobi fiat pairs Fix stop order being sent at ask for stop buy. Show  MARKET_CLOSE  in the GUI if is margin strat.  Fix ROE _ TRAILING priority over ROE close.  Fix stop loss when a position is not even built yet because of exchanges delay.  Fix ""just bought"" not resetting, preventing further trades. Fix ROE close and ROE trailing. Fix send sell at ask and buy at bid, for certain trades. Various fixes for order rounding and price precision for different exchanges. TradingView add-on bugfixes ​ Fix TV plugin LONG orders amounts Fix TV buy order at Bittrex Fx an issue that would prevent some buy orders at Bitfinex using TV plugin Fix CLOSELONG,CLOSESHORT for Bitfinex. All amounts for Bitfinex margin are now defined in quote Better respect order amounts in LONG and SHORT alerts on Bitfinex. Fix occasional errors for LONG,SHORT,CLOSELONG,CLOSESHORT on Bitmex. GUI changes ​ Notable bugfixes and changes to the GUI: New style and searchable dropdown selections Add GUI Tone color-picker in theme Fix navbar default active tab Fix imap tooltips Add themes for mobile Add Notification panel for mobile Update jquery cdn Major graphic update Improve mobile layout Redesign login page Update all the setting sections Improved tooltip texts Hide ROE _ CLOSE for strategies that don't use it Telegram changes ​ Notable changes to the Telegram bot: Fix notification profit percentage Hide wrong data in overview with multiple base Ability to restrict Cryptosight access to one or more Telegram users Fix creation/deletion of pairs. Changes are saved after going back to the main menu. Show contracts and liquidation price for margin v12 ​ New features / changes ​ Bitmex support:  Gunbot now supports leveraged trading at Bitmex and Bitmex testnet. The new  PRE_ORDER  function lets you get ahead of the order book to increase the chance limit orders get filled. With  MAKER_FEES  all trades can be placed as post only orders, making Gunbot a market maker! Margin trading strategies:  Strategies for Bitmex offer triggers to go long, short, stop and close on the desired ROE - or trail ROE up! Blockchain license verification : Using GUNTHY token, it is now possible to self-manage your API keys for free.  Improved ichimoku:  Both the regular and margin version of the ichimoku strategy got a lot more powerful, you can now choose to open and close trades using either Tenkan-Sen, Kumo or Kijun-Sen. Market orders:  Option to use market orders instead of limit orders, customizable for all order types. Works on exchanges that support Market orders: Binance, Bitfinex, Bitmex, Coinbase Pro, Kraken and Poloniex. List view in GUI dashboard : New list view for pairs on the dashoard: all relevant info in one quick overview, improves load times especially for setups with many trading pairs. Chart improvements : The GUI can now show all Gunbot supported indicators. Trading targets are now shown in charts. Renko candles:  You can now use Renko candles instead of regular candle sticks (Currently only works for margin trading with ichimoku). Deprecating   CANCEL_ORDERS_CYCLE_CAP   except when using   MAKER_FEES : orders are now only automatically cancelled if bid/ask are above/below the order rate. Retain GUI access on startup errors : Automatically stop Gunbot core when ran without pairs. If startup errors occur, a Telegram notification is sent and core gets stopped. Dark theme for the settings page : the settings page in the GUI is now dark. Renamed executables : the main executable files got renamed to be more coherent between operating systems. Various small changes Bugfixes ​ Many critical issues were already patched in the bugfix releases for v11. Notable new fixes: Fix an issue that would not save some settings changes made in the GUI. Work around Binance ""minPrice"" / ""maxPrice"" being 0. Improved handling of PAX & TUSD as base currency. Improved handling of sell orders at Binance. Fixes to SMACROSS, MACD and MACDH that prevented trades in specific conditions. Fix ""RSI undefined"" callback. Make sure a pair actually sold before letting  COUNT_SELL  disable it. Fix support for TUSD as base currency at Binance. Fix libraries for Raspberry Pi support. Reduced data/resource usage for the GUI. Workaround for an issue with Bitfinex not accepting close orders. Fix an issue that reset DU count after a partial sell order. Fix an issue with marging trading through TV add-on on Huobi. Various smaller fixes. Fixes non triggering behavior of:  SL_DISABLE_BUY ,  RT_ONCE ,  RT_ONCE_AND_CONTINUE  and  COUNT_SELL Fix amounts for long orders on Bitmex when using  MARKET_BUY  or TradingView alerts. v11 ​ New features ​ Huobi support:  Gunbot now supports trading at Huobi. Improved indicators and charts:  tuning of indicators to better match TradingView, indicators shown in the GUI now match the indicator data Gunbot works with. Mobile optimization:  the GUI is now optimized for use on mobile devices. TV margin trading:  margin trading using the TradingView add-on is now supported at Huobi and Bitfinex. Multiple base:  the new  MULTIPLE_BASE  lets you trade the same coin with multiple base currencies. Override trading limit for TV:  specify the trading limit in buy alerts to override your config: BUY _ POLONIEX _ BTC-ETH _ 0.01 Stop trading after a number of sell orders : with  COUNT_SELL  you can disable trading after a configurable number of executed strategy sell orders. Automatically disable bought price override:  you can now leave a  BOUGHT_PRICE  in place after you've set it, it is automatically disabled as soon as a valid price is available at the exchange. Configurable buyback level for RT:  with  RT_BUY_UP_LEVEL  you can specify when to buy back quote units, in previous versions this was hardcoded to the break-even point. Ichimoku:  implement  DISPLACEMENT . Improved portfolio value calculation:  portfolio value calculation no longer depends on a third party conversion service. Stop limit / panic sell orders as market:  where supported, stop limit orders are now placed as market orders to increase the likelyhood of filling them asap. Gain protection for all strategies:  every sell method can now optionally use gain protection. Stepgain XTrend:  the use of XTrend to confirm orders with stepgain is now optional, trading without this confirmation roughly equals the legacy stepgain behavior. Numerical DCA method:  Double Up can now be used without any indicators, working purely with price changes. Never buy above:  only allow buy orders at a configurable percentage below the last sell rate. New strategy presets:  every new installation now includes several new strategy presets. Bugfixes ​ Most critical issues were already patched in the bugfix releases for v10. Notable new fixes: Improved load times for the GUI on the dasbhoard and charts pages. Mitigating timeout errors during GUI load. Allow Bittrex International users to use Gunbot on the new platform. Several fixes for  KEEP_QUOTE . Depreciating the separate RT process for stepgain. The normal RT process is now used. Fix several issues where partially filled orders would mess with RT. v10 ​ New features ​ Completely new GUI:  integrated in the main Gunthy executable: easier installation, easier settings management, easier pair management, dashboard with portfolio overview, detailed charts, manual trading, 2FA & more! KuCoin support:  Gunbot now supports trading at KuCoin. Faster pair cycling:  cycling got over 40% faster. Parallel cycling for pairs from multiple exchanges in one Gunbot instance. Much improved Reversal trading:  full rework of how reversal trading works for various strategies, now enabling you to keep on accumulating after the market first drops then goes sideways. Airdrop is now depreciated. New strategies:  Average Directional Index, Average True Range Trailing Stop, Bollinger Bands (TA), EMA spread, Time series analysis. Previously beta strategies are now considered stable: MACD, MACDH and SMA cross. Freely combine any strategy:  all strategies can now be freely combined for buying and selling, including Emotionless, Ichimoku and previously custom strategies. New balance options:  Option to set trading limit as a percentage, option to keep an amount of quote when selling. New confirming indicators:  ADX, EMASPREAD, StochRSI. New triggers for Stochastic and RSI:  both can now be used in oscillator or cross mode. Valid P/L calculations for each pair:  daily, weekly and monthy stats available. Separate P/L stats for reversal trading. Disable/enable pairs:  trading pairs can now be disabled without removing them from your configuration, they won't cycle until reenabled. Improved RSI calculation:  tuning RSI calculation to get closer to values at exchanges and TradingView. Separate period settings for all indicators:  all indicators now have their own period settings, removing the dependency on SMAPERIOD. Kumo sentiments for Ichimoku:  choose if trades with Ichimoku are allowed to take place below/under Kumo. Xtrend tuning:  the trendwatcher for Stepgain got tuned to behave less laggy. Take Buy / Take Profit:  introducing a way to also buy and sell when prices came close to strategy entry or exit points. Test Telegram notifications:  after setting up Telegram notifications you can now send a test message. Confirm orders via Telegram:  you can optionally confirm if Gunbot should place specific orders via Telegram. TradingView add-on improvements:  implementing TV _ MVTS and an option to use all available base balance for each buy order. Margin positions on Poloniex can now be closed with an alert. Better handling of mixed automatic/manual trading. Mixed mode for trading with TradingView alerts and Gunbot strategies simultaneously. Migrate GDAX to pro.coinbase.com:  API keys for GDAX remain valid for Coinbase Pro. Trades on Coinbase Pro are placed as post only orders. Logs:  each trading pair now generates a single logfile that is easier to read. Built-in logrotate keeps log size to a minimum. Wiki:  almost completely rewritten. Added Portuguese language. Bugfixes ​ Fix P/L calculation in Telegram notifications. Mitigate ""Timeout"" issue. Fix issue preventing orders for low satoshi valued coins. Various fixes for the TradingView add-on, notably improved handling of multiple incoming orders with TradingView add-on. Fix buying/selling behavior on previously custom strats like SMACROSS, EMASPREAD and MACD. Fix locked funds. Save trailing limits so they don't get lost on restarts. Using max array length to calculate indicators in case exchanges send less candles then expected. Literally hundreds of other bugfixes. v9 ​ Core changes ​ GDAX support:  Gunbot now supports trading at GDAX. Reversal trading:  Enables trading in downtrends by accumulating quote currency without investing extra base. New indicators:  You can now use the Stochastic oscillator and per pair MFI as additional confirmation in all strategies. TrailMe:  Most strategies can now use TSSL-style trailing. Additionally, you can use trailing for reversal trading and double up. Custom strategies (beta):  Introducing custom strategies. In this first release of custom strategies it is possible to define your own strategy based on SMA-cross, MACD or MACDH - optionally combined with MFI, RSI or Stochastic. Trading fees:  You can now define the fees Gunbot needs to account for in  TRADING_FEES .  GAIN  is now a percentage above the expected fees paid. Pair suggestions:  Based on trading volume and volatility, Gunbot suggests possible good pairs to trade on. Automatic retry for TV orders:  Implementing  RETRY_TV_ORDER  to automatically retry orders when processing multiple alerts. TradingView:  Introducing margin trading at Poloniex. All buy orders are now placed as market orders. Dust handling:   MIN_VOLUME_TO_SELL  is expressed in base currency again. GUI changes ​ Performance improvements:  much better responsiveness, reduced CPU load and memory usage. New design:  new dark color theme, various design refinements. Native charts:  charts based on the same data Gunbot processes, including trades visualization. Log rotation:  automatic rotation of out.log files. No more ""empty logs"" errors. Bugfixes ​ Fixes for multiple orders on TV:  improved handling of multiple incoming signals. Kraken:  Multiple fixes for Kraken. Bittrex:  Fixing ""Available of undefined"" error. Emotionless  Fixing various issues with Emotionless. TSSL:  Prevent selling while price is still in range. Preventing buy orders above lowest EMA. ""Waiting for open orders"":  Fixing an issue where the bot would wait for open orders, even if orders got deleted. RSI calculation:  improved RSI calculation when  OKKIES_MODE  is disabled. Kraken:  Fix for Kraken candles. Unable to check master key"":  Better error handling. The  * Unable to check master key"" now only occurs on local errors (wrong pair, wrong api key, etc.). Binance:  using api.binance.com instead of  www.binance.com Reduce data usage and API calls:  dramatically reduce the amount of API calls and data usage while still updating indicators each cycle. Deprecating  TA_ALWAYS_ON . TV charts (GUI)  showing charts and pair data faster on the dashboard. Dashboard:  Fixing order notifications with a volume of 0. v8 ​ Core changes ​ New exchange:  Gunbot now support trading at CEX.io Native Telegram trade notifications:  receive notifications on Telegram of every trade Gunbot places. Works on all exchanges and includes (USD) profit per trade, as well as current DU count. Calculate indicator data each cycle:  with  TA_ALWAYS_ON  enabled, indicator data is calculated each cycle instead of each period. Only use this if you have unmetered bandwidth available. Separate RSI level for DU:  with  RSI_DU_BUY  you can set a different RSI level for Double Up buy orders. Timeout for order recalculation:  with  CANCEL_ORDERS_CYCLE_CAP  you can set the number of cycles to wait before Gunbot can cancel open oders. Reserve pile up:  automatically add your profits to your funds reserve. Optional: withdraw BTC profits  you can now automatically withdraw your BTC profits. USE THIS AT YOUR OWN RISK. Pyramid buying for TV add-on  the TradingView add-on now support pyramid buying. GUI changes ​ Running multiple instances:  you can now run multiple setups from the GUI, each setup runs it's own Gunbot instance. TradingView charts for Binance:  added support for loading TradingView charts for Binance pairs. TradingView charts and basic stats on dashboard:  each pair on the dashboard now shows TradingView charts, basic Gunbot stats and trade notifications. Improved onboarding:  it is now much easier to walk through the essential first steps of setting up Gunbot. Various smaller improvements:  better grouping of items on the settings page, PM2 is no longer used, improved description texts for strategy parameters. Bugfixes ​ Parsing Bittrex history using PricePerUnit (Actual Price) instead of Limit. Improved handling of promise rejections. Fix trading for coins with no recent trading history. Fix bittrex ""available of undefined"". Round down amounts to sell at Cryptopia (workaround for an issue at Cryptopia). Fix an issue that would trigger soft reboot too early. Allow panic sells during safety switch period. Fix ""Already bought enough"" issue for TradingView add-on. Fix Ichimoku strategy: buy/sell on TENKAN and KIJU crossing above and below KUMO (confirmed by KUMO sentiments). Fix Double Up if a partial sell is filled Fix an issue that would emit websocket for buy order before the order is actually placed Improved calculation of average bought price. Always log average bought price on console. Fix for trading at Kraken. Fix forever ""waiting for open orders"" issue v7 ​ Core changes ​ New exchange : Gunbot now supports trading on Binance. New strategies : introduction of the Emotionless strategy. based on the Ichimoku cloud. This strategy ""just works"" and has no user configurable parameters, except tradings limits and the use of Double Up. Additionally, the Ichimoku strategy has been added. Improved speed and data usage : more market data is saved offline, massively increasing cycling speed and reducing data usage. Secondary API key:  you can now activate a new API key without help from the support admins! Double Up improvements:  you can now limit the amount of times Double Up buys, choose between HIGH BB and RSI as triggers for averaging down and set a % below last bought price for Double Up buy orders to be placed. Easier pair syntax:  pair notation now has the same syntax for all exchanges. Funds reserve:  new parameter to keep an amount of base currency reserved at all times, not available for trades by Gunbot. RSI:  Adding RSI to (almost) all strategies, as an optional extra trigger for buying and/or selling. Gain:  new default values for Gain. TSSL : various fixes. Stepgain : improved strategy tuning. TradingView:  fixes for handling multiple incoming trading signals. Logs:  various log changes. Various:  Cache cleaning no longer triggers the safety switch. Various:  fix an issue that would fail to show base currency balance. Various:  many bugfixes for smaller issues. GUI changes ​ Pair syntax validation : pairs added to a setup are now checked for proper syntax. Upgrades:  improved upgrade experience by the option to keep db.sqlite between versions TradingView charts:  fix charts for Kraken and Bitfinex. Disable charts for Cryptopia and Binance (not supported by TradingView). API Keys:  improved API key management. Various:  added version number to the interface. Various:  improved handling of wrong passwords. New in v6 ​ New strategies ​ BB-RSI : Trade on combined BB and RSI indicators, making sure buy orders are only placed on oversold market conditions, and sell orders are only placed when the market is overbought. TSSL:  Introducing the concept of trailing stop - stop loss for buy and sell orders. Buy lower, sell higher! Maximize your gains by trailing price movements and only buy or sell when the trend has reached its tipping point. Various ​ Much improved indicator calculation:  market info is now automatically pulled from Gunthy API when not available on the exchange, enabling fast and accurate calculation of indicators like Bollinger Bands. Predictable pair cycling:  Gunbot now cycles through your pairs in the same sequence as in your configuration. You can prioritize pairs by changing the order in your configuration. New trend watcher for stepgain:  Xtreme Trend Watcher does what it's supposed to do and is configurable by setting  PERIOD  and  SMAPERIOD  to your desired timeframe. Configurable ratio for averaging down:  with  DOUBLE_UP_CAP  you can set a ratio for each  DOUBLE_UP  buy order, compared to your current balance for your pair. Use this if you want to average down in a slower, more controlled way. New configurable trades timeout:  with  TRADES_TIMEOUT  you can define the minimum amount of time between trades for a pair, eliminating double buy orders during normal trading or fast consecutive buy orders when averaging down. Older ​ 🦕 Previous Changelog Gunbot v25 Next Supported exchanges New features Bugfixes / Improvements New features Experimental new features Bugfixes / Improvements New features Breaking changes Bugfixes / Improvements New in v23 Core / GUI changes Bugfixes / Improvements (core) Bugfixes / Improvements  (GUI) v21 Core / GUI Bugfixes v20 Core / GUI New in v20.7: Market Maker AutoConfig Bugfixes Fixed in v20.7 v18 Core v16 Core New features / changes bugfixes v15 New features / changes Bugfixes v13 / v14 New features Additional changes in patch release (v14) Bugfixes Additional fixes in patch release (v14) TradingView add-on bugfixes GUI changes Telegram changes v12 New features / changes Bugfixes v11 New features Bugfixes v10 New features Bugfixes v9 Core changes GUI changes Bugfixes v8 Core changes GUI changes Bugfixes v7 Core changes GUI changes New in v6 New strategies Various Older 🦕 Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
New in latest version, https://wiki.gunthy.org/about/changelog/latest,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Changelog New in latest version Archive Supported exchanges System requirements Purchasing Gunbot Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace About Changelog New in latest version On this page New in v25 Gunbot v25 marks the first version of Gunbot that can trade on decentralized exchanges: dYdX is supported, more DeFi platforms will get added in the future.  Only the most important changes are listed on this page. Steps to upgrade without losing data download  the full release file Unzip to a new folder Stop the old version of a running bot completely Make a backup of the working bot folder, just by copying the whole folder Place the Gunbot executable file from the newly downloaded release, into the working gunbot folder (the file called  gunthy-win.exe ,  gunthy-macos  or  gunthy-linux ) Start Gunbot like you would normally New features ​ DeFi trading support:  Gunbot Ultimate users can now trade on the decentralized  dYdX exchange . Important information: dYdX does not provide a liquidation price in their API, the value Gunbot shows is an approximation. New user made spot strategy:   Quanta G-Type  is a new kind of strategy in Gunbot: a bundled custom strategy available for Gunbot Ultimate users. This strategy is a geometric market maker hybrid designed to bootstrap and long term trade very large market price movements. Many thanks to @flightcommander for making and maintaining this strategy and giving it to the community! New futures strategy:   sgsfutures  is like stepgridscalp, but for futures. Works in one direction mode on exchanges like Binance Futures or dYdX.
--  New exchange:  Bitget is now supported in Gunbot. Custom strategies:  add methods for placing post only orders and retrieving pair state data from other running pair. Make exchange parameter in order methods configurable, so that a strategy running on one pair can place orders on many pairs accros multiple exchanges. Optionally fetch more candle data for charts:  get up to 4k candles in charts. Can be enabled on setup page. Custom trading settings editor templates:  with  custom editor templates   you can build the perfect editor for your style of configuring Gunbot. Stepgridhybrid:  add TL multiplier option. Stepgridhedge:  add option for custom trend variant, add panic close option. Compare pair stats:  new configurable table on the dashboard to compare stats from different pairs. Bybit:  add support for pair lists on trading settings page, instead of needing to manually enter pair names. Add support for AutoConfig jobs that use tickers data. Configurable API rate limit:  a new setting (next to exchange credentials on the setup page) lets you configure a custom rate limit value that is enforced between any two API calls. Can be used to speed up processing. Bugfixes / Improvements ​ Newest TradingView charting library:  the charting library got upgraded to the latest version, bringing UX and performance improvements. Refactor mobile chart page:  improve chart page navigation for small screens. Simulator starting balances editor:  you can now easily configure simulator starting balances on the setup page. Rework settings for stepgridscalp:  reconfigure settings layout to better group settings for various aspects of the  stepgridscalp  strategy. Notable settings changes: add 'NONE' option for exhaustion sensitivity, add option to only apply TL multiplier on grid buy orders. Add master_passphrase option:  to differentiate between master and slave key, for exchanges using a passphrase like Coinbase Pro. set it in config.js same place where passphrase is set. Allow adding user defined parameters:  in pair settings in the overview sidebar on the chart page. Improve GUI initial load time:  make the bundle smaller by removing unused views (like /strategies) and optimizations in the bundling process. Total base assets chart:  fix data collection for various futures exchanges. Coin-M Futures improvements:  fix various items on chart and dashboard pages, to properly display data for Coin-M futures. Trading terminal:  various fixes to improve the trading terminal, especially for Coin-M markets. Previous Quickstart guide Next Changelog archive for Gunbot New features Bugfixes / Improvements Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Supported exchanges, https://wiki.gunthy.org/about/supported-exchanges/,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Changelog Supported exchanges Supported exchanges Creating API keys System requirements Purchasing Gunbot Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace About Supported exchanges Supported exchanges On this page List of supported exchanges Partner exchanges ​ These exchanges are official Gunbot partners. We are in direct contact with their teams. Exchange Name in config Native strategies TradingView alerts Gunthy mex_gunthy / futures_gunthy spot & futures spot & futures okGunbot okgunbot spot & futures spot & futures Bybit bybit spot & futures spot & futures Bitget bitget spot & futures spot & futures Binance binance  /  binanceus spot spot Binance Futures binanceFutures futures futures Gate.io gateio spot spot Huobi Global huobi spot spot HitBTC hitbtc spot spot Kraken Futures krakenFutures futures futures KuCoin kucoin spot spot MEXC mexc spot spot OKX okex5 spot & futures spot & futures Txbit txbit spot spot Free API slot The following exchanges currently do not require registering an api key in your license: bitmex_testnet, txbit, mexc, beaxy, mex_gunthy, futures_gunthy, okgunbot.  Certified exchanges ​ These exchanges have been supported in Gunbot for a long time, you can expect high quality API support. Exchange Name in config Native strategies TradingView alerts Bittrex bittrex spot spot Bitfinex bitfinex spot spot Bitmex bitmex futures futures Bitmex testnet bitmex_testnet futures futures CEX cex spot spot Coinbase Pro gdax spot spot dYdX dydx futures futures Kraken kraken spot spot Poloniex poloniex spot spot Supported exchanges ​ Additional exchanges are connected through the  ccxt library . They may not have been fully tried and tested in Gunbot yet, proper working is not guaranteed. These exchanges may support spot trading only, margin/futures support is not yet connected in Gunbot.
You can use any of these exchanges for spot trading alerts using the TradingView add-on. Previous Changelog archive for Gunbot Next How to create an API key Partner exchanges Certified exchanges Supported exchanges Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Creating API keys, https://wiki.gunthy.org/about/supported-exchanges/create-api,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Changelog Supported exchanges Supported exchanges Creating API keys System requirements Purchasing Gunbot Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace About Supported exchanges Creating API keys On this page Creating API keys To use Gunbot you need to create an API key at your exchange. Through the API Gunbot can connect to the exchange and trade on your behalf. Gunbot uses the exchange assigned API key as license key to prevent fraud. On most exchanges you can find the option to create API keys on their account or settings page. This page shows the minimum required settings for often used exchanges to create a working API key. Binance ​ Binance Futures ​ Bitfinex ​ Bitmex ​ Bittrex ​ CEX ​ Coinbase Pro ​ dYdX ​ Connecting Gunbot to dYdx is different than connecting to centralized exchanges.  By connecting your MetaMask wallet, API credentials are automatically generated and stored in your browser. You will need to use a MetaMask wallet that is not tied to a hardware wallet. This is because the private key of the wallet is needed for signing messages, and the private key of a hardware wallet does not leave the device by design. In order to ensure the security of your credentials, Gunbot stores them using encryption in the config file. Once you have finished configuring Gunbot, be sure to delete the plain text credentials that you collected during the setup process. Step 1: connect wallet ​ Go to  https://trade.dydx.exchange/ .
Select 'Connect wallet' to start connecting a wallet. Step 2: choose MetaMask ​ Select 'MetaMask' to proceed. Step 3: choose connect ​ Select 'Connect' to proceed. Step 3: enter MetaMask password ​ Enter your password to login to MetaMask. Step 4: select remember me and give permissions ​ Select the 'Remember me' option before clicking 'Send requests'. This is important. MetaMask will now show various prompts to allow the connection with dYdX. After you have successfully connected, log out and then log back in with the same MetaMask wallet address. If the wallet remembers the account, you can proceed. If not, repeat the process and make sure the wallet remembers the account. Step 5: export private key ​ To be able to force closing positions and withdrawing from the exchange, it is needed to regularly sign messages on L2 with your current position information. To do this, Gunbot needs to use the wallet private key.  If you do not want to use this functionality - which defies the benefits of being able to close positions and force withdrawing funds - then enter 0 as value for private key instead. The first credential to save is the wallet private key. To do this, open MetaMask and follow the following three steps: Select the three dots icon. Go to 'Account details'. Select 'Export private key'. Save the key. Step 6: open local storage manager ​ To get the rest of the needed credentials, open the browser developer tools while you are on the logged in page of the dYdX.  Depending on the browser, developer tools can usually be opened with the keyboard shortcut F12, or alternatively Ctrl-Shift-i. Now locate the local storage. In Google Chrome that is in 'Application' > 'Local Storage'. In Firefox it's 'Storage' > 'Local Storage'. Step 7: Stark private key ​ Save the value for 'privateKey' (selected in screenshot) in 'STARK_KEY_PAIRS', to use as 'Stark private key'. Step 8: Wallet address ​ Save the value for 'walletAddress' (selected in screenshot) in 'STARK_KEY_PAIRS', to use as 'Wallet address'. Step 9: API key ​ Save the value for 'key' (selected in screenshot) in 'API_KEY_PAIRS', to use as 'API key'. Step 10: API secret ​ Save the value for 'secret' (selected in screenshot) in 'API_KEY_PAIRS', to use as 'API secret'. Step 11: Passphrase ​ Save the value for 'passphrase' (selected in screenshot) in 'API_KEY_PAIRS', to use as 'Passphrase'. Huobi ​ Kraken ​ Kucoin ​ Poloniex ​ Previous Supported exchanges Next System requirements and license information Binance Binance Futures Bitfinex Bitmex Bittrex CEX Coinbase Pro dYdX Step 1: connect wallet Step 2: choose MetaMask Step 3: choose connect Step 3: enter MetaMask password Step 4: select remember me and give permissions Step 5: export private key Step 6: open local storage manager Step 7: Stark private key Step 8: Wallet address Step 9: API key Step 10: API secret Step 11: Passphrase Huobi Kraken Kucoin Poloniex Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
How to create a wallet, https://wiki.gunthy.org/about/system-requirements/create-wallet,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Changelog Supported exchanges System requirements Requirements & license info How to create a wallet Purchasing Gunbot Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace About System requirements How to create a wallet On this page How to create a wallet To create a GUNTHY wallet, you must add a custom token to an Ethereum wallet and enter this contract address:  0x3684b581db1f94b721ee0022624329feb16ab653 . It's possible to use an ERC-20 compatible wallet without adding the contract address, but then you usually won't be able to see the tokens in your wallet software. Below you'll find short descriptions on how to do that with a few of the most used Ethereum wallet clients. If you already have an Ethereum wallet, only the steps for adding a custom contract apply. danger Do not use an exchange wallet. Gunbot won't run when you have your tokens stored on an exchange. MyEtherWallet ​ Link  https://www.myetherwallet.com/ Step 1: create a wallet Create a new wallet and follow all the security advice given. Step 2: copy address Go to the account details page to view and copy your wallet address. Metamask ​ Link https://metamask.io/ Step 1: install browser add-on and create a wallet Follow the steps shown to be able to use Metamask. Create a new wallet and follow all the security advice given. Step 2: add custom token Click  Add Token  to add a new token. Enter the GUNTHY token contract address and confirm. Step 3: copy address Copy the account address shown on top left side of the page. Use this address in Gunbot. MyCrypto ​ Link https://mycrypto.com/ Step 1: create a wallet Follow the wizard and all the security advice given. Create a new wallet and follow all the security advice given. Step 2: add custom token Go to  View & Send  and then to  Token Balances  to add a custom token. Enter the GUNTHY token contract address and confirm it. Step 3: copy address Copy the account address shown on top of the page. Use this address in Gunbot. Previous System requirements and license information Next Download MyEtherWallet Metamask MyCrypto Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Requirements & license info, https://wiki.gunthy.org/about/system-requirements/license-info,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Changelog Supported exchanges System requirements Requirements & license info How to create a wallet Purchasing Gunbot Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace About System requirements Requirements & license info On this page License info & system specs Supported platforms & recommended system specs ​ Gunbot runs from your own Windows, macOS, Linux or ARMv7 computer or server. You are free to run multiple instances across multiple platforms and devices. CPU : 64-bit RAM : 2 GB Disk space : 10 GB free disk space Network : stable broadband network connection Blockchain based license system ​ Gunbot Standard and higher uses a blockchain based license validation system. It uses an own ERC-20 utility token called ""GUNTHY"". Using this system, you can  manage your own registered API keys  and change them anytime, or even sell your license to a third party. Your wallet address, combined with a number of tokens, is your Gunbot license key. Wallet registration and token distribution happens after the initial license purchase. danger You are responsible for your own API keys and GUNTHY wallet. Please understand that we might not be able to help you if you lose all your registered API keys and (access to) your wallet address. Make sure to follow all the security advise when setting up a wallet and properly save and backup the API key(s) used for Gunbot. Token airdrops and requirements ​ After you've registered your wallet address, you'll receive an airdrop with the required amount of tokens for your license type. Hold these tokens at all times to be sure your Gunbot can run. Tokens for new users are generally airdropped within 24 hours after registering the wallet address. These are the required amounts to be held, for currently available license types: One : 0  Standard : 500  Pro : 750  Ultimate : 2500  Extend license options using Gunthy tokens ​ If you own a  Gunbot Standard license , you can extend your license by holding more Gunthy tokens than were delivered to you after the initial purchase. You'll get a total of 3 API slots when you hold 1500 tokens. Some Gunthy modules are not for sale, they are only available to Gunbot license holder with a substantial token balance. This is the case for bitRage and Gunthy Market Maker. This token balance is the main factor in your ""user rank"", you see your user rank in the bot startup messages. If you reach rank 20, you automatically get access to bitRage. If you reach rank 10 you automatically get access to Market Maker. As long as your token balance does not decrease, access to these modules stays. The ranking system is not a competition between users, you can't lose your ranking when other users increase their token holding. FAQ ​ Are there costs involved when I update my API key? No, when you manage your own API keys there are no costs for changing them. How often can I update my API key? You can update your API keys as often as you want. Can I run multiple Gunbot instances using the same GUNTHY wallet? Yes. Can I run multiple Gunbot licenses using the same GUNTHY wallet? No, each license needs a unique GUNTHY wallet. I have more than one registered API key for the same exchange, what to do? If you have multiple registered API keys for the same exchange, each key needs to be registered to a different GUNTHY wallet. You must run multiple Gunbot instances to do so. Can I change my API key to another exchange? Yes, you can change to any supported exchange at any time. Is it mandatory to register a GUNTHY wallet for my API keys? Yes. Can't I just use any wallet address? Abuse will not be tolerated. Only use your own GUNTHY wallet address in Gunbot, not a wallet provided by an exchange. Using your own wallet address is the only way to receive and control the required amount of tokens. Previous How to create an API key Next How to create a wallet Supported platforms & recommended system specs Blockchain based license system Token airdrops and requirements Extend license options using Gunthy tokens FAQ Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Config marketplace, https://wiki.gunthy.org/config-marketplace,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Config marketplace On this page Config marketplace A trusted marketplace for Gunbot users, where experienced users share ready made config examples. Link https://marketplace.gunthy.io/ Only for verified Gunbot users ​ Please be aware that the registration process might take a little while, admins will verify the authenticity of every signup to make sure this marketplace is exclusive to Gunbot users. Vetted offers ​ To make sure the offers are legitimate, every item on the marketplace gets manually reviewed before publication. Previous Restore backup Only for verified Gunbot users Vetted offers Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
AutoConfig, https://wiki.gunthy.org/how-to-work-with-gunbot/extra-modules/autoconfig,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules AutoConfig Backtesting add-on Code editor Tradingview add-on IMAP listener Alerts Tradingview webhooks Various Troubleshooting Config marketplace Extra modules AutoConfig On this page AutoConfig Gunbot AutoConfig is a tool you can use to dynamically manage your config files.  You can create ""jobs"" to do something you would normally do by hand, for example to change a profit target or scan an exchange for potential pairs to add, and schedule the job in a cron-like format. Examples of things you can do with AutoConfig: Scan exchanges and automatically add pairs:  for example add pairs with volume > 500 BTC and for which price is rising. You can even filter on buy trailing stops for all pairs on an exchange. Simulate your filter settings for adding pairs:  you can collect your own data for backtesting and simulate all possible filters. Scan exchanges to remove pairs from your config : for example remove pairs without quote balance for which volume has dropped below 100 BTC. Change the strategy for pairs from your config:  for example set a bag handling strategy when the pair did buy but prices dropped a lot. Change the exchange delay . Monitor pair state information and automatically set pair overrides:  for example set a different  DU_BUYDOWN  after the first round of DU happened. Handle hedging in bitRage : use your own criteria to initiate hedging from BTC to USDT in bitRage (or the other way around). Set user variables as output for a filter job , which can be used to filter on in other jobs. Complete orchestration of complex trading setups : you can use javascript to create custom autoconfig filters and to set override or variable values. This allows for completely custom scenarios. How it works ​ There is a single config file for AutoConfig ( autoconfig.json ), which can contain one or many jobs. As soon as Gunbot (re)starts or the  autoconfig.json  file is changed, all jobs in the config are scheduled (any pre-existing scheduled job is removed in this process). When a job is processed, changes to  config.js  are only made for pairs that have passed every filter. The  autoconfig.json  file can contain one or many jobs, each with its own schedule. One job always applies to one exchange. One job can have one or many filters. Within a job, you can set filters for which pairs it applies. If a job successfully completes, the changes are written to  config.js  and Gunbot starts using the new settings. Most config changes, like pair override changes, are applied without causing a bot restart. If a job causes no changes, for example because it tries to place already existing overrides, it won't cause a Gunbot restart. Schedules are set per job in a  format similar to how cron jobs are set . If you're not used to the format, use a website like  https://crontab-generator.org/  to generate it. All config options are available in the browser interface. Even if you prefer manually editing the config file, it's recommended to create a config example using the interface, this way you can be sure all essential parameters exist. tip If you use a very fast schedule, for example with jobs that might update your bot config every few seconds, prevent unexpected config changes and make it a habit to not make manual settings changes using the browser while AutoConfig jobs are running. Filter options ​ Ticker filters ​ For job types:   addPairs ,  removePairs ,  changeStrategy Ticker filters use data collected from the exchange tickers, at the moment the job runs. You can use the following filter types for adding and removing pairs. Please note that not every filter type works on every exchange, due to the fact that some exchanges don't offer the required data. On Huobi AutoConfig uses ""last"" price instead of bid/ask for all filters that work with prices. Type Description Extras minPrice Filter returns true when price is higher than set. n/a maxPrice Filter returns true when price is lower than set. n/a minPricePctChangeInterval Filter returns true if the current price is at least x% higher than the average price of all snapshots: lastSnapshots maxPricePctChangeInterval Filter returns true if the current price is at least x% lower than the average price of all snapshots lastSnapshots minVolumePctChangeInterval Filter returns true if the current 24h volume is at least x% higher than the average 24h volume of all snapshots lastSnapshots maxVolumePctChangeInterval Filter returns true if the current 24h volume is at least x% lower than the average 24h volume of all snapshots lastSnapshots minVolume24h Filter returns true if 24h volume is higher than set, volume in base n/a maxVolume24h Filter returns true if 24h volume is lower than set, volume in base n/a minVolatilityPct24h Filter returns true if 24h price percentage change is higher than set n/a maxVolatilityPct24h Filter returns true if 24h price percentage change is lower than set n/a minSpreadPct Filter returns true if percentage difference between bid and ask is higher than set n/a maxSpreadPct Filter returns true if percentage difference between bid and ask is lower than set n/a minSlopePctInterval Filter returns true if the  slope  for all prices in snapshots is bigger than set. Slope is expressed as a percentage of the last price. A slope of 1 means that, according to a simple linear regression, the next collected ticker price is likely to be 1% higher than the last one lastSnapshots maxSlopePctInterval Filter returns true if the  slope  for all prices in snapshots is smaller than set. Slope is expressed as a percentage of the last price. A slope of 1 means that, according to a simple linear regression, the next collected ticker price is likely to be 1% higher than the last one. Only executed when max snapshot sample size is reached lastSnapshots minStandardDevPctInterval Filter returns true if the  Standard Deviation  for all prices in snapshots is bigger than set. Standard Deviation is expressed as a percentage of the last price. Only executed when max snapshot sample size is reached lastSnapshots maxStandardDevPctInterval Filter returns true if the  Standard Deviation  for all prices in snapshots is smaller than set. Standard Deviation is expressed as a percentage of the last price. Only executed when max snapshot sample size is reached lastSnapshots minVolumeRank Filter returns true if a pairs 24h volume rank (rankings are specific per base) is higher than set. This filter is only useful if you want to exclude some of the top ranking volume pairs, for example set it to 5 to only allow pairs that have a volume rank of 6 or higher n/a maxVolumeRank Filter returns true if a pairs 24h volume rank (rankings are specific per base) is lower than set. Setting it to 10, for example, would only include pairs that have a top10 volume ranking n/a bullishStandardDeviationChannel It works similar to described here:  http://www.forexpromos.com/what-is-standard-deviation-channel The filter passes when: slopePct is positive max snapshot count is reached price is within a defined range from the lower band (it would detect a downwards breakout from an upwards channel) Range 0 = same price as lower band Range 100 = same price as upper band lastSnapshots bearishStandardDeviationChannel It works similar to described here:  http://www.forexpromos.com/what-is-standard-deviation-channel The filter passes when: slopePct is negative max snapshot count is reached price is within a defined range from the upper band (it would detect an upwards breakout from a downwards channel) Range 0 = same price as upper band Range 100 = same price as lower band lastSnapshots linearRegressionChannel Same as ""Linear regression"" indicator on TradingView. Standard deviation is hardcoded to 2. The filter passes when: max snapshot count is reached price is within a defined range from the lower band Range 0 = same price as lower band Range 100 = same price as upper band lastSnapshots The extra input called  lastSnapshots  lets you use only the last x snapshots to calculate the filter. If for example your job collects 100 snapshots but you want a specific filter to only use the last 10 snapshots to calculate slope, you can do that. Usage examples: ""maxStandardDevPctInterval"" :   {    ""type"" :   ""minVolumePctChangeInterval"" ,     ""max"" :   1 ,     ""lastSnapshots"" :   3 } ""hedge"" :   { ""type"" :   ""allowsHedging"" , ""BTC"" :   ""USDT"" } Config building blocks for ticker filters: ""strat"" :   {      ""type"" :   ""minSpreadPct"" ,      ""min"" :   0.5 } , ""volume"" :   {      ""type"" :   ""belowMedianVolume"" } , ""stdev"" :   {      ""type"" :   ""maxStandardDevPctInterval"" ,      ""max"" :   0.3 } , ""channel"" :   {          ""type"" :   ""bullishStandardDeviationChannel"" ,          ""range"" :   -10 } Trailing filters ​ The filter types  buyTrailing  ,  volumeTrailing  and  slopeTrailing  are ticker filters that trails down prices or volume very  similar  to a regular Gunbot strategy with buy trailing, you can use it to add pairs to your config only after they have hit their trailing stop. Useful for trailing massive numbers of pairs without the downsides of long cycling times. These filter types can only be used in  addPairs  jobs on exchanges that provide ask prices or volume in tickers, only works when used in the first filter set of a job. Config example for buy trailing The example below will: Collect up to 60 ticker snapshots, adds a new snapshot every time the job runs (every minute) Uses the 60 collected bid prices for a pair to calculate an EMA Continuously trail down all pairs, using a  trailingRange  of 1% of the ask price The filter passes when the ask prices crosses over the trailing stop, while being below  buyLevel  (which is a percentage below the EMA calculated by this filter) Volume trailing works exactly as above, the only difference is that base volume is used where prices are used in buy trailing. Slope trailing works just like buy trailing, the only difference is that the slope percentage of a pair is trailed. Buy level is based on the same EMA as it is for buy trailing. {      ""trailingExample"" :   {          ""pairs"" :   {              ""exclude"" :   """" ,              ""include"" :   ""BTC-,USDT-"" ,              ""maxPairs"" :   10 ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""trailing"" :   {                  ""type"" :   ""buyTrailing"" ,                  ""buyLevel"" :   0.5 ,                  ""trailingRange"" :   1              }          } ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""addPairs"" ,          ""strategy"" :   ""instantBuy"" ,          ""enabled"" :   true ,          ""resume"" :   true ,          ""snapshots"" :   60      } , Ticker history filters ​ Most ticker filters are also available as  *History  variant. These work in the same way as described above, but they use a different data set as input. Available history filters: minPriceHistory maxPriceHistory maxVolumeRankHistory minVolumeRankHistory minPricePctChangeIntervalHistory maxPricePctChangeIntervalHistory minVolumePctChangeIntervalHistory maxVolumePctChangeIntervalHistory minVolume24hHistory maxVolume24hHistory minVolatilityPct24hHistory maxVolatilityPct24hHistory minSpreadPctHistory maxSpreadPctHistory minSlopePctIntervalHistory maxSlopePctIntervalHistory minStandardDevPctIntervalHistory maxStandardDevPctIntervalHistory bearishStandardDeviationChannelHistory bullishStandardDeviationChannelHistory History filters take one additional input, defining which history data should be used. the config for a history filter looks like: ""filter"": {                 ""type"": ""minPriceHistory"",                 ""min"": 10,                 ""historySource"": 6             } The  historySource  parameter in the example above means that it will use the price of the history entry with number 6. The oldest history entry has number 0. How the history is built up is defined by the following parameters in the root level: ""history"": 7, ""historyInterval"": 15, The example above would collect 7 history entries, with a minimum interval of 15 minutes. New history entries are saved as follows: When there is no history, the oldest ticker snapshot will be added as first history entry. When there is at least one history entry, a new one is added when the time difference between the oldest ticker snapshot and the latest history entry is bigger than the time defined in  historyInterval . The oldest ticker snapshot will be added as newest history entry. In case the maximum number of history entries is reached, the oldest history entry will get deleted once a new one gets added. The config example below shows a job that filters for: BTC pairs that currently ranks top10 for 24h volume The 5 history entries have a slope of at least 1% Pair must have ranked top10 24h volume in the oldest history entry If oldest snapshot is > 60 minutes older than newest history entry,  it gets moved to history                                                 Snapshots, 1m interval                                                  [s]  [s]  [s]  [s]  [s]   History entries, 60m interval                    |   [0]  [1]  [2]  [3]  [4]                          |                          ^-----------------------* ""addMoon"": {         ""pairs"": {             ""exclude"": """",             ""include"": ""BTC-"",             ""maxPairs"": 10,             ""exchange"": ""binance""         },         ""filters"": {             ""filter1"": {                 ""type"": ""maxVolumeRank"",                 ""max"": 10             },             ""filter2"": {                 ""type"": ""minSlopePctIntervalHistory"",                 ""min"": 1,                 ""historySource"": 4             },             ""filter3"": {                 ""type"": ""maxVolumeRankHistory"",                 ""max"": 10,                 ""historySource"": 0             }         },         ""schedule"": ""* * * * * *"",         ""type"": ""addPairs"",         ""strategy"": ""moon"",         ""snapshots"": 5,         ""history"": 5,         ""historyInterval"": 60,         ""resume"": true     }, tip Both snapshots and history cause a relatively high load on I/O operations. Depending on your system, allowing for too many saved entries can negatively impact performance. Pair state filters ​ For job types:  manageOverrides ,  changeDelay ,  removePairs2 ,  changeStrategy2 State filters use data from the internal ledger in Gunbot, which has all data for pairs that already cycled since Gunbot last (re)started. Formula used in  differenceBigger : 
 100 * ((ema2 - ema1) / ema1) > delta Formula used in  differenceSmaller : 
 100 * ((ema2 - ema1) / ema1) < delta Formula examples use ema1 and ema2 like set in the screenshot above. Of course you can compare any two keys. The position of the keys to compare in the config file do matter. Generic filters ​ Generic filters can be used in any job type, regardless if they primarily use ticker or state filters. Type Description variableExact Filter returns true when variable value is exactly as defined. variableNotExist Filter returns true when variable key does not (yet) exist. variableBiggerThan Filter returns true when variable value is bigger than target. variableSmallerThan Filter returns true when variable value is smaller than target. pairVariableSmallerThan Filter returns true when pair specific variable value is smaller than target. pairVariableBiggerThan Filter returns true when pair specific variable value is bigger than target. pairVariableExact Filter returns true when pair specific variable is exactly as defined. Can use an extra ""exchange"" input to check pair variables for another exchange. strategyName Filter returns true when strategy of an enabled pair is like defined. minTimeInConfig Filter returns true when pair is longer in config than a set value in minutes. maxTimeInConfig Filter returns true when pair is not longer in config than a set value in minutes. maxSameOrder Filter returns true when last x orders for different pairs do NOT have the same defined type minTimeSinceOrder Filter returns true when at least x minutes have passed since a defined order type, for the same pair. maxTimeSinceOrder Filter returns true when at most x minutes have passed since a defined order type, for the same pair. custom Use any custom javascript expression, when the expression returns true the filter passes. Custom filter examples: ""Seconds since last order"": {     ""type"": ""custom"",         ""target"": "" (function timeCheck(data){if(typeof data.orders==='undefined'){return false;} else if(typeof data.orders[0]==='undefined'){return false;} const lastOrderTime=data.orders[0].time;const secondsSinceLastOrder=(Date.now()-lastOrderTime)/1000;if(secondsSinceLastOrder<180){return true;}})(this)"" } ""Price and EMA"": {     ""type"": ""custom"",         ""target"": "" this.pair.ema1 > this.pair.Bid"" } Config building blocks for generic filters: ""timeSince"": { ""type"": ""maxTimeSinceOrder"", ""min"": 30, ""trigger"": ""StopLimit"" } Usage: ""change"": { ""type"": ""minPricePctChangeLastOrder"", ""delta"": 1, ""trigger"": ""StrategyBuy"" } ""time"": { ""type"": ""minTimeInConfig"", ""min"": 60 }, ""time"": { ""type"": ""maxTimeInConfig"", ""max"": 90 }  ""var"": { ""type"": ""variableNotExist"", ""hedge"": ""BTC"" } ""strat"": { ""type"": ""strategyName"", ""name"": ""moon"" } ""sameOrders"": { ""type"": ""maxSameOrder"", ""lastOrders"": 4, ""trigger"": ""StrategyBuy"" } Available trigger types for filters using triggers. Note: only the most recent order for each pair is available for analysis, the orders must be placed by a Gunbot strategy (market maker not supported). Data is kept between restarts, also for pairs that are no longer actively traded with Gunbot. StrategyBuy StrategySell StopLimit Close RTSell RTBuy RTBuyback DCA Cancelled User Variables ​ Each job can set one or more user defined variables, which can be used to filter on in other jobs. You can use both global variables, and pair specific variables. This allows for more complex filter setups, because: jobs can depend on another.    you don't need to repeat multiple filter conditions across multiple jobs.  You can have one job monitoring a specific condition (for example the distance between price and liquidation price) and set a variable like  ""liquidationStop"": true  in case its conditions happen. Other jobs that depend on this liquidation stop then only have to set one filter looking for an exact match for  ""liquidationStop"": true  instead of needing to repeat the same filters set in the job that monitors the the distance between price and liquidation price. A job sets a variable when: At least one pair passed all filters for this job. setVariable  is defined in the jobs config. setVariable  looks like this: ""setVariable"": {             ""userVariable1"": true         }, It can contain one or more variables, their value can be filtered as exact match only. Besides true/false, you could also set number values, or strings. To use pair specific variables, use a block like this: ""setPairVariable"": { ""awesomeVariable"": true, ""evenBetter"": true }, In case you set a variable that was previously set with a different value, the new value will overwrite the old one. Setting one variable has no effect on other possible variables that are already set. All variables are written to file and are imported anytime Gunbot restarts. Please be aware that this won't always work, file corruption can happen - for example when a write action is happening right in the moment that Gunbot is closed. It's a good idea to not fully depend on saved variables, and run the jobs that set them relatively frequently. To read a variable, use the filter type  variableExact . It can be used in all job types. ""filter"": { ""type"": ""variableExact"", ""userVariable1"": true } This filter type will return true when  userVariable1  has a value of  true . Pair variables can be read with a filter like this: ""pairVar"": { ""type"": ""pairVariableExact"", ""awesomeVariable"": true } tip Variables are entirely optional. It's no problem when no  setVariable  exists in a job. The same job that sets a variable, can also  reset  them in case no pairs passed all filters. This option is called  resetVariable . resetVariable  looks like this: ""resetVariable"": {             ""userVariable1"": true }, It can contain one or more variables, their value can be filtered as exact match only. Besides true/false, you could also set number values, or strings. To reset pair specific variables, use a block like this: ""resetPairVariable"": { ""awesomeVariable"": false, ""evenBetter"": false }, Multiple filter sets ​ Instead of using a single set of filters, you can also add multiple sets of filters in a job. Use this when you want to monitor for different conditions in a single job, if a pair passes all filters in any of the filter sets, changes are made. Besides the obligatory first set of filters, you can add up to 9 more sets. named  filters2  to  filters10 Config example: {     ""example"": {         ""pairs"": {             ""exclude"": """",             ""include"": """",             ""maxPairs"": 500,             ""noBag"": false,             ""exchange"": ""binance""         },         ""filters"": {             ""price"": {                 ""type"": ""minPrice"",                 ""min"": 0.0000001             }         },         ""filters2"": {             ""minVolume24h"": {                 ""type"": ""minVolume24h"",                 ""min"": 100             }         },         ""schedule"": ""*/30 * * * * *"",         ""type"": ""removePairs"",         ""enabled"": true     } } Calculated values and custom filters ​ Many elements in AutoConfig can be calculated at the time the job executes, this allows for completely dynamic scenarios for power users. Every valid javascript expression can be used. You can use calculated values for the following elements in AutoConfig: overrides variables pairVariables maxPairs target in filter type custom To use an expression instead of a string or number, enter your expression as string with a leading blank space: ""validExpression"": "" 1 + 2"" Many internal data is made available to custom expressions. Use these with caution though, it is very common to encounter undefined data sooner or later - you can handle such errors though - for example by first placing a filter that checks if the data you'll use in an expression exists and has a value bigger than 0. Use the following references to access internal data in your expressions: Reference Content this.config The complete Gunbot config this.pair All pair data the bot works with, the same as available in json state files this.pairName String of the pair currently processing this.variables All AutoConfig variables this.pairVariables All AutoConfig pair variables this.tickers All collected ticker snapshots, in case it's ran in a job type that works with tickers. this.userData User defined contents of  acUserData.json  in Gunbot root folder. Availability of pair specific data depends on the context where you're trying to access it. For example a pair override will have access to all pair specific data (because overrides are set per pair), but a global variable won't (because global variables are just set once). Examples of valid expressions ​ "" this.pair.Bid * this.pair.quoteBalance"" // returns bag value in base currency "" (this.pair.Bid * this.pair.quoteBalance) > this.pair.whatstrat.MIN_VOLUME_TO_SELL ? true : false"" // returns true if bag is bigger than MVTS, false if not "" (function doStuff(data) {       if (data.pair.Bid > 0){       return true       }       else {       return false       }     })(this)"" ---> this example needs to be minified before it would work, as all code needs to be in a single line to not break JSON formatting. Example of a custom filter ​ ""position bigger Than zero"": {   ""type"": ""custom"",   ""target"": "" this.pair.quoteBalance * this.pair.Bid > parseFloat(this.pair.whatstrat.MIN_VOLUME_TO_SELL)""  }, Job types (with config examples) ​ Each job type has a number of obligatory parameters, these are described below for each job type. Additionally, there are  optional parameters  you can use to extend the functionality of a job. Adding pairs ​ Type name in config:   addPairs This job type uses  ticker filters . Job output:  add trading pairs to a specific exchange. Pair options: include:  included pairs (processed first). Any pair on the exchange that matches any of the includes, will be processed .  In case you also use the exclude option, the resulting pairs after processing the includes is the starting point for processing excludes, which will remove items from this list of pairs. Included items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be included. Input as comma separated list, does not accept spaces between items. Can not be empty. exclude : excluded pairs (processed last). Any pair on the exchange that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. maxPairs:  maximum number of allowed pairs. In case a filter action would result in more pairs than this setting, the config will be filled up to the max number of allowed pairs. Only enabled pairs count towards maxPairs. Other obligatory parameters: ​ strategy:  this defines the strategy that will be assigned to pairs added by this job. It must be the exact name of an existing strategy in your  config.js  file. snapshots:  defines how many ticker snapshots are saved to perform calculations on. Relevant for filter types that include  Interval  in their name. For example: snapshots is set to 10, this means that the ticker data for the last 10 times the job runs are saved and some of the values in it are used for calculating average values over time. Config example ​ The example below shows a job that does the following: Scan Binance tickers every minute Automatically add BTC-x pairs (but not BTC-DOGE, which is excluded) that have a top 10 volume ranking and for which the bid/ask spread is below 0.2% Added pairs get the ""gain"" strategy assigned Allows for up to 25 active trading pairs on Binance {      ""addTopVolumePairs"" :   {        ""pairs"" :   {          ""exclude"" :   ""DOGE"" ,          ""include"" :   ""BTC-"" ,          ""maxPairs"" :   25 ,          ""exchange"" :   ""binance""        } ,        ""filters"" :   {          ""filter1"" :   {            ""type"" :   ""maxVolumeRank"" ,            ""max"" :   11            } ,          ""filter2"" :   {            ""type"" :   ""maxSpreadPct"" ,            ""max"" :   0.2            }        } ,        ""schedule"" :   ""* * * * *"" ,        ""snapshots"" :   1 ,        ""type"" :   ""addPairs"" ,        ""strategy"" :   ""gain""      }    } Removing pairs ​ Type names in config:   removePairs  (uses  ticker filters ) or  removePairs2  (uses  state filters ). You must have at least one pair set per exchange you use this job type on. Job output:  removes trading pairs from a specific exchange. Pair options: exclude : pairs that should not be scanned for possible removal. Any active pair that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. There is no include options for this filter type. Pairs in your config (that have already cycled in Gunbot) are basically the list of includes. noBag  (true/false): when true, only pairs with a balance below  MIN_VOLUME_TO_SELL  that have no open orders and are not in reversal trading, are filtered for possible removal. When set to false, all pairs in config are filtered. removeDisabled  (true/false): when true, each time a removePairs job is ran it will remove all disabled pairs for the exchange the job runs on - regardless of filter settings. Useful, for example, when you use  COUNT_SELL . Other obligatory parameters: ​ snapshots:  defines how many ticker snapshots are saved to perform calculations on. Relevant for filter types that include  Interval  in their name. For example: snapshots is set to 10, this means that the ticker data for the last 10 times the job runs are saved and some of the values in it are used for calculating average values over time. Config example ​ The example below shows a job that does the following: Scan Binance tickers every ten minutes Remove any pair that has has a volume ranking below 20, besides pairs containing BNB or XVG in their name. Additionally, remove all disabled pairs from the config. {    ""removeCrap"" :   {      ""pairs"" :   {        ""exclude"" :   ""BNB,XVG"" ,        ""noBag"" :   false ,        ""removeDisabled"" :   true ,        ""exchange"" :   ""binance""      } ,      ""filters"" :   {        ""filter1"" :   {          ""type"" :   ""minVolumeRank"" ,          ""min"" :   20        }      } ,      ""schedule"" :   ""*/10 * * * *"" ,      ""snapshots"" :   1 ,      ""type"" :   ""removePairs""    } } Change strategy ​ Type names in config:   changeStrategy  (uses  ticker filters ) or  changeStrategy2  (uses  state filters ). This job type is basically the same as how removePairs works, but this one changes a pairs strategy instead of removing the pair. You must have at least one pair set per exchange you use this job type on. Job output:  change assigned trading strategy for pairs on one exchange. Pair options: exclude : pairs that should not be scanned for possible removal. Any active pair that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. There is no include options for this filter type. Pairs in your config (that have already cycled in Gunbot) are basically the list of includes. bag  (true/false): when true, only pairs with a balance below  MIN_VOLUME_TO_SELL  that have no open orders and are not in reversal trading, are filtered for possible removal. When set to false, all pairs in config are filtered. Other obligatory parameters: strategy:  the target strategy to set for pairs matching all filters. snapshots:  defines how many ticker snapshots are saved to perform calculations on. Relevant for filter types that include  Interval  in their name. For example: snapshots is set to 10, this means that the ticker data for the last 10 times the job runs are saved and some of the values in it are used for calculating average values over time. Config example ​ The example below shows a job that does the following: Scan Binance tickers every 15 minutes Change the assigned strategy for any pair that has below median trading volume, except BTC-LTC Assign the strategy ""baghandler"" to these pairs {      ""changeStrat"" :   {          ""pairs"" :   {              ""exclude"" :   ""BNB-LTC"" ,              ""bag"" :   true ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""belowMedianVolume""              }          } ,          ""schedule"" :   ""*/15 * * * *"" ,          ""snapshots"" :   1 ,          ""type"" :   ""changeStrategy"" ,          ""strategy"" :   ""baghandler""      } } Managing overrides ​ Type name in config:   manageOverrides This job type uses  state filters. Job output:  changes overrides for pairs on a specific exchange. Pair options: include:  included pairs (processed first), can not be empty. Any active trading pair that matches any of the includes, will be processed .  In case you also use the exclude option, the resulting pairs after processing the includes is the starting point for processing excludes, which will remove items from this list of pairs. Included items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be included. Input as comma separated list, does not accept spaces between items. Can not be empty. exclude : excluded pairs (processed last). Any active trading pair that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. Other obligatory parameters: overrides : contain zero or more overrides, these will be set for each pair that passes all filters when a job is executed. clearOverrides  (true/false): when set to true, all existing overrides for a pair are removed before placing the new ones. Config example ​ The example below shows a job that does the following: Scan Binance pairs every minute, process filters on all active trading pairs that include ""USDT"" or ""BNB"" and do not include ""DOGE"" or ""ETH"" in their pair name. Set a  DU_BUYDOWN  override for all pairs that have  ducount  1 {      ""DynamicDU1"" :   {          ""pairs"" :   {              ""exclude"" :   ""DOGE,ETH"" ,              ""include"" :   ""USDT,BNB"" ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""ducount"" :   {                  ""type"" :   ""exact"" ,                  ""ducount"" :   1              }          } ,          ""overrides"" :   {              ""DU_BUYDOWN"" :   3          } ,          ""clearOverrides"" :   false ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""manageOverrides""    } } Change exchange delay ​ Type name in config:   changeDelay This job type uses  state filters. Job output:  changes the exchange delay for a specific exchange. Pair options: include:  included pairs (processed first), can not be empty. Any active trading pair that matches any of the includes, will be processed .  In case you also use the exclude option, the resulting pairs after processing the includes is the starting point for processing excludes, which will remove items from this list of pairs. Included items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be included. Input as comma separated list, does not accept spaces between items. Can not be empty. exclude : excluded pairs (processed last). Any active trading pair that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. Other obligatory parameters: delay : exchange delay in seconds, this value will be set when one or more pairs in the job pass all filters. Config example ​ The example below shows a job that does the following: Scan Binance pairs every minute, process filters on all active trading pairs that include ""USDT"" or ""BNB"" and do not include ""DOGE"" or ""ETH"" in their pair name. Set a the exchange delay for Binance to 10 in case at least one pair matches the filter {      ""DynamicDU1"" :   {          ""pairs"" :   {              ""exclude"" :   ""DOGE,ETH"" ,              ""include"" :   ""USDT,BNB"" ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""ducount"" :   {                  ""type"" :   ""exact"" ,                  ""ducount"" :   1              }          } ,          ""delay"" :   10 ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""changeDelay""    } } Manage bot settings ​ Type names in config:   manageBotSettings  (uses  state filters ). This job type is basically the same as how changeStrategy works, but this type is able to change the global bot settings. You must have at least one pair set per exchange you use this job type on. Job output:  change assigned parameters in the bot section. Happens when at least one pair passes all filters Pair options: exclude : pairs that should not be filtered. Any active pair that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. There is no include options for this filter type. Pairs in your config (that have already cycled in Gunbot) are basically the list of includes. Other obligatory parameters: bot:  the target bot settings. Config example ​ { ""botsettings"" :   { ""pairs"" :   { ""exclude"" :   """" , ""include"" :   ""BTC-"" , ""exchange"" :   ""binance"" } , ""filters"" :   { ""price"" :   { ""type"" :   ""biggerThan"" , ""Ask"" :   0.00000001 } } , ""bot"" :   { ""BOT_DELAY"" :   20 , ""BOT_CCLEAN"" :   9991 } , ""schedule"" :   ""* * * * *"" , ""type"" :   ""manageBotSettings"" } } Hedge (for Gunbot) ​ Type names in config:   hedgeGB  (uses  ticker filters ) or  hedgeGB2  (uses  state filters ). You must have at least one pair set per exchange you use this job type on. Job output: You can define a ""hedge pair"" like USDT-BTC, between which Gunbot should hedge when the market conditions are right for it. If you prefer hedging between completely other currrencies, like BTC-ETH - you can do that too. It works with two autoconfig jobs, in which you define when it should hedge and to which currency it should hedge. When a pair can be hedged without intermediate pair, autoconfig will change a pair like BTC-ETH to USDT-ETH and panic sell directly to ETH. When an intermediate pair is needed, the pair will be panic sold first and then traded on the defined hedge pair. Pair options: Pair filtering is hardcoded to the defined hedge pair. exclude : used as placeholder bag:  used as placeholder baseFrom:  base currency to hedge away from baseTo:  base currency to hedge to hedgePair:  pair used for hedging, like USDT-BTC Other obligatory parameters: setVariable:  hedging will only work when both hedging jobs set a variable with the currency it last hedged to, this makes sure that the direction can be tracked for the next hedging action. Config example ​ You'll need two jobs to do this, one for each hedging direction: { ""hedging"" :   { ""pairs"" :   { ""exclude"" :   """" , ""exchange"" :   ""binance"" , ""bag"" :   false , ""baseFrom"" :   ""BTC"" , ""baseTo"" :   ""USDT"" , ""hedgePair"" :   ""USDT-BTC"" } , ""filters"" :   { ""filter1"" :   { ""type"" :   ""yourTickerFilter"" , ""min"" :   ""0.0000000001"" } , ""filter2"" :   { ""type"" :   ""variableNotExist"" , ""hegdedTo"" :   ""BTC"" } } , ""filters2"" :   { ""filter1"" :   { ""type"" :   ""yourTickerFilter"" , ""min"" :   ""0.0000000001"" } , ""filter2"" :   { ""type"" :   ""variableExact"" , ""hegdedTo"" :   ""BTC"" } } , ""setVariable"" :   { ""hegdedTo"" :   ""USDT"" } , ""strategy"" :   ""gain"" , ""schedule"" :   ""1 */4 * * *"" , ""type"" :   ""hedgeGB"" , ""debug"" :   false } } The second job would be a mirror job, with all hedge currencies reversed. Two important notes: keep the hedge pair in your config at all times, prefably with buy/sell disabled to avoid crossover between base/quote. set the filter for ""type"": ""variableNotExist"", ONLY in the job that will take care of the next hedging action. For example, when you start out with BTC-x pairs only, add this filter to the job that hedges to USDT. Hedge (for bitRage) ​ Type name in config:   hedge This job type uses  state filters. Job output:  initiates hedging in bitRage. Pair options: include:  included pairs (processed first), can not be empty. Any active trading pair that matches any of the includes, will be processed .  In case you also use the exclude option, the resulting pairs after processing the includes is the starting point for processing excludes, which will remove items from this list of pairs. Included items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be included. Input as comma separated list, does not accept spaces between items. Can not be empty. exclude : excluded pairs (processed last). Any active trading pair that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. Other obligatory parameters: hedgeTo  (USDT/BTC): defines which currency to start hedging to. brStrat : defines which strategy is used for bitRage. Config example ​ The example below shows a job that does the following: Scan for a user variable, every minutes Once this variable is found, it places filteredBase, filteredQuote and filteredPair blocks as defined in the job, for kucoin (this part is optional) Once this variable is found, it makes the following changes in the strategy  bitrageStrat , it sets/changes the following parameters so that hedging will start: ""AUTOSELL"": true, ""MAIN_BASE"": ""USDT"", ""BR_PANIC_SELL"": true, {      ""Hedge_to_USDT"" :   {          ""pairs"" :   {              ""exclude"" :   """" ,              ""include"" :   """" ,              ""exchange"" :   ""kucoin"" ,              ""filteredBase"" :   [                  ""TUSD"" ,                  ""PAX"" ,                  ""KCS"" ,                  ""NUSD"" ,                  ""ETH"" ,                  ""DAI"" ,                  ""USDC"" ,                  ""TRX"" ,                  ""NEO"" ,                  ""BTC""              ] ,              ""filteredQuote"" :   [                  ""GGC""              ] ,              ""filteredPair"" :   [                  ""BTC-GGC"" ,                  ""USDT-GGC"" ,                  ""BTC-KCS"" ,                  ""USDT-KCS"" ,                  ""KCS-XRP"" ,                  ""KCS-EOS"" ,                  ""KCS-LTC"" ,                  ""KCS-NEO"" ,                  ""KCS-MTV"" ,                  ""KCS-GO"" ,                  ""KCS-CS"" ,                  ""ETH-KCS"" ,                  ""NEO-EOS"" ,                  ""DAI-BTC"" ,                  ""DAI-ETH"" ,                  ""DAI-MKR"" ,                  ""DAI-USDT""              ]          } ,          ""filters"" :   {              ""variable"" :   {                  ""type"" :   ""variableExact"" ,                  ""readyToHedge"" :   ""USDT""              }          } ,          ""setVariable"" :   {              ""hedgingStarted"" :   true          } ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""hedge"" ,          ""hedgeTo"" :   ""USDT"" ,          ""brStrat"" :   ""bitrageStrat""      } , } Filtered quote (for bitRage) ​ Type name in config:  filteredQuote This job type uses  ticker filters . Job output:  It adds the quote of each pair passing all filters to the filteredQuote list. Each time the job runs, the list gets completely replaced with the new results. Pair options: include:  included pairs (processed first). Any pair on the exchange that matches any of the includes, will be processed .  In case you also use the exclude option, the resulting pairs after processing the includes is the starting point for processing excludes, which will remove items from this list of pairs. Included items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be included. Input as comma separated list, does not accept spaces between items. Can not be empty. exclude : excluded pairs (processed last). Any pair on the exchange that matches any of the excludes, won't be processed. Excluded items do not need to be whole pair names, as long as part of the string matches an actual pair, it will be excluded. Input as comma separated list, does not accept spaces between items. Can be empty. Config example ​ The example below would do the following: scan all binance BTC-x pairs find pairs with a bid/ask spread higher than 0.7% save the quote coins from these pairs in the filteredQuote list. { ""filteredQuote"" :   { ""pairs"" :   { ""include"" :   ""BTC-"" , ""exclude"" :   """" , ""exchange"" :   ""binance"" } , ""filters"" :   { ""spread"" :   { ""type"" :   ""minSpreadPct"" , ""min"" :   0.7 } , ""schedule"" :   ""* * * * *"" , ""type"" :   ""filteredQuote"" , ""debug"" :   false } } Optional parameters ​ Jobs can be extended with additional parameters, some work in all job types, some are specific to certain job types. Optional parameters for all job types: ​ enabled  (true/false): When false, the job is disabled and won't be executed. debug  (true/false): When true, the job generates detailed logs in the console for each filter. settings for user variables brStrat : defines which strategy is used for bitRage. Only needed if you use Autoconfig to automate hedging for bitRage. Optional parameters for jobs using ticker filters: ​ resume  (true/false): when true, saved ticker snapshots are loaded from file after Gunbot restarts. When false, history needs to be built up again after restarting. history : defines how many ticker entries should be kept in  history  storage. historyInterval:  defines the minimum interval in minutes between history entries. Optional parameter for  addPairs  and  manageOverrides ​ setITB  (true/false): When true, each pair matching all filters will get an additional  IGNORE_TRADES_BEFORE  override, the value being the timestamp for the time the job ran. delay  (time in seconds): When set, the exchange delay gets adjusted to the specified value when at least one pair passes all filters. For manageOverrides only. Optional parameters for  addPairs ​ overrides : this job type can also add overrides when it adds new pairs. To do so, add a section with overrides to the job, just like you would in a  manageOverrides  job. Bitrage filters:  when used for Bitrage, you can have an addPairs job replace the contents of the exchange filter settings. To do so, add the filters in the pair section of the job as shown below: noCrossOver  (true/false): needs to be put in the pairs section. When set, Autoconfig will never add two pairs with different Base but the same Quote currency. ""pairs"" :   {              ""exclude"" :   """" ,              ""include"" :   ""BTC-"" ,              ""maxPairs"" :   10 ,              ""exchange"" :   ""kucoin"" ,              ""filteredQuote"" :   [ ""DOGE"" ] ,        ""filteredPair"" :   [ ""BTC-DOGE"" ] ,        ""filteredBase"" :   [ ""BTC"" , ""ETH"" , ""USDS"" , ""TUSD"" , ""USDC"" , ""PAX"" , ""XRP"" , ""TRX"" , ""BUSD"" , ""NGN"" ]          } , Optional parameters for  removePairs ​ removeBase : can be used to remove all pairs from a specified base currency that use the bitRage strategy specified in  brStrat . This is useful to clean out pairs from a specific base after hedging. notRemoveBefore  (in pairs section): value in minutes. Don't remove pairs from config if it's not in the config longer than specified. Optional parameters for  hedge ​ Bitrage filters:  when used for Bitrage, you can have an addPairs job replace the contents of the exchange filter settings. To do so, add the filters in the pair section, as shown above. Backtesting for addPairs jobs ​ Results for addPairs jobs can be simulated using ticker data you've collected yourself. Self-collection is needed because the type of historic data AutoConfig uses is not publicly available. Before you can backtest, you need to collect a dataset with a ""collectData"" job. This is a simple autoconfig job that collects and saves ticker data according to the job schedule and exchange. ""30-secs"": {      ""pairs"": {          ""exchange"": ""binance""      },      ""schedule"": ""*/30 * * * * *"",      ""type"": ""collectData"",      ""snapshots"": 1000,     ""enabled"": true,      ""debug"": false  } The schedule in this job should be the same as the schedule you'd use in an  addPairs  job. It will collect up to 5 ticker snapshots and removes older snapshots in case they exist. You can use any number of snapshots in this job type. If you omit the snapshots parameter, it will collect ticker snapshots for as long as your system has free disk space. Ticker data for this collection job is saved in /30-secs-tickers ( # jobname # -tickers). Do make sure you never save any other files in this folder. As long as the  collectData  job runs, it keeps collecting tickers. It is not recommended to permanently collect tickers while also running other autoconfig jobs that use tickers: API usage weight is relatively high, and it will slow down Gunbot performance slightly. To backtest using the collected data, run a job with type  backtesting . Do this while you have Gunbot core and other autoconfig jobs disabled, because it's very cpu intensive and you don't want other jobs to interrupt. A backtesting job is basically the same as an addPairs job, you can use all available filter / filterset options. Collected ticker data is replayed as if it were live data, the results should 100% match the results from a regular addPairs job. Results are logged the same way as regular jobs, the debug option for jobs is also available. ""History"" ticker snapshots can be used as well, these are built up in RAM while running through a backtest. Results are saved to a .csv file that lists when pairs would have been added, and what the ask price was at that moment. Backtesting jobs also use the autoconfig scheduler, although it's kind of pointless. It's recommended to set a silly schedule that will almost never execute and use the  ""onStart"": true  option so that the job runs as soon as it gets enabled. Backtesting does not take  maxPairs  into consideration (and will not in the future), results are purely based on the filters you use. Job example for backtesting: ""30-secs"" :   {          ""pairs"" :   {              ""exclude"" :   """" ,              ""include"" :   ""BTC-"" ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""slope"" :   {                  ""type"" :   ""minSlopePctInterval"" ,                  ""min"" :   0.02              } ,              ""volume"" :   {                  ""type"" :   ""minVolume24h"" ,                  ""min"" :   75              } ,              ""pricehistory0"" :   {                  ""type"" :   ""maxPricePctChangeIntervalHistory"" ,                  ""max"" :   5 ,                  ""historySource"" :   9              }          } ,          ""schedule"" :   ""1 1 1 1 1"" ,          ""type"" :   ""backtesting"" ,          ""tickersFolder"" :   ""30-secs-tickers"" ,          ""enabled"" :   true ,          ""onStart"" :   true ,          ""history"" :   10 ,          ""historyInterval"" :   2 ,          ""debug"" :   false ,          ""snapshots"" :   10      } The data source for backtesting is set with the  ""tickersFolder""  parameter. Set it to the exact folder name where your collected ticker files are. i Various ​ It's fine to schedule many jobs for the same times, but in case multiple of those jobs causes a config change, the first one to finish will write it's changes and the others jobs will need to wait for another chance. The output of every job is that the  config.js  file is updated, this will always cause Gunbot to restart. Each job can contain an optional "" debug"": true  line, when set the job will show detailed console log output for the filters in this job. Only use this in the moment you really need it, it can slow down Gunbot performance significantly due to the large amount of data that needs to be logged to the console. Things that make AutoConfig crash:  change the exchange for a ticker filtering job while having  ""resume"": true , using a non-existent key in a state filter, etc. Data is read from either exchange tickers or the internal Gunbot memory with pair state info. To find out which pair state data to filter on is available, look in the pairs state file in the Gunbot  /json  folder. You can disable telegram notifications per job, just include this line in your job:  ""muteTG"": true Almost every key/value in pair state files can be filtered, as long as they are on the first level (not inside additional arrays or objects) Example config with many job types and filters ​ You don't want to use this ever in this form, but use it as reference for how each job can be formatted. {      ""addPairs-jobname"" :   {          ""pairs"" :   {              ""exclude"" :   ""DOGE,XLM,PAX"" ,              ""include"" :   ""BTC,USDT"" ,              ""maxPairs"" :   25 ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""minPrice"" ,                  ""min"" :   0.0000001              } ,              ""filter2"" :   {                  ""type"" :   ""maxPrice"" ,                  ""max"" :   0.0000010              } ,              ""filter3"" :   {                  ""type"" :   ""minPricePctChangeInterval"" ,                  ""min"" :   0.00002              } ,              ""filter4"" :   {                  ""type"" :   ""maxPricePctChangeInterval"" ,                  ""max"" :   1              } ,              ""filter5"" :   {                  ""type"" :   ""minVolumePctChangeInterval"" ,                  ""min"" :   10              } ,              ""filter6"" :   {                  ""type"" :   ""maxVolumePctChangeInterval"" ,                  ""max"" :   50              } ,              ""filter7"" :   {                  ""type"" :   ""minVolume24h"" ,                  ""min"" :   500              } ,              ""filter8"" :   {                  ""type"" :   ""maxVolume24h"" ,                  ""max"" :   1000              } ,              ""filter9"" :   {                  ""type"" :   ""minVolatilityPct24h"" ,                  ""min"" :   1              } ,              ""filter10"" :   {                  ""type"" :   ""maxVolatilityPct24h"" ,                  ""max"" :   1              } ,              ""filter11"" :   {                  ""type"" :   ""minSpreadPct"" ,                  ""min"" :   0.00001              } ,              ""filter12"" :   {                  ""type"" :   ""maxSpreadPct"" ,                  ""max"" :   1              } ,              ""filter13"" :   {                  ""type"" :   ""minSlopePctInterval"" ,                  ""min"" :   0.00001              } ,              ""filter14"" :   {                  ""type"" :   ""maxSlopePctInterval"" ,                  ""max"" :   1              } ,              ""filter17"" :   {                  ""type"" :   ""belowMedianVolume""              } ,              ""filter18"" :   {                  ""type"" :   ""aboveMedianVolume""              } ,              ""filter16"" :   {                  ""type"" :   ""variableExact"" ,                  ""userVar1"" :   false              }          } ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""addPairs"" ,          ""strategy"" :   ""gain"" ,          ""snapshots"" :   2 ,          ""resume"" :   false ,          ""debug"" :   ""true"" ,          ""setVariable"" :   {              ""userVariable1"" :   true          } ,          ""enabled"" :   true      } ,      ""removePairs-jobname"" :   {          ""pairs"" :   {              ""exclude"" :   ""BNB,XVG"" ,              ""noBag"" :   false ,              ""removeDisabled"" :   true ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""minPrice"" ,                  ""min"" :   0.0000001              } ,              ""filter2"" :   {                  ""type"" :   ""maxPrice"" ,                  ""max"" :   0.0000010              } ,              ""filter3"" :   {                  ""type"" :   ""minPricePctChangeInterval"" ,                  ""min"" :   0.00002              } ,              ""filter4"" :   {                  ""type"" :   ""maxPricePctChangeInterval"" ,                  ""max"" :   1              } ,              ""filter5"" :   {                  ""type"" :   ""minVolumePctChangeInterval"" ,                  ""min"" :   10              } ,              ""filter6"" :   {                  ""type"" :   ""maxVolumePctChangeInterval"" ,                  ""max"" :   50              } ,              ""filter7"" :   {                  ""type"" :   ""minVolume24h"" ,                  ""min"" :   500              } ,              ""filter8"" :   {                  ""type"" :   ""maxVolume24h"" ,                  ""max"" :   1000              } ,              ""filter9"" :   {                  ""type"" :   ""minVolatilityPct24h"" ,                  ""min"" :   1              } ,              ""filter10"" :   {                  ""type"" :   ""maxVolatilityPct24h"" ,                  ""max"" :   1              } ,              ""filter11"" :   {                  ""type"" :   ""minSpreadPct"" ,                  ""min"" :   0.00001              } ,              ""filter12"" :   {                  ""type"" :   ""maxSpreadPct"" ,                  ""max"" :   1              } ,              ""filter13"" :   {                  ""type"" :   ""minSlopePctInterval"" ,                  ""min"" :   0.00001              } ,              ""filter14"" :   {                  ""type"" :   ""maxSlopePctInterval"" ,                  ""max"" :   1              } ,              ""filter16"" :   {                  ""type"" :   ""variableExact"" ,                  ""userVar1"" :   false              } ,              ""filter17"" :   {                  ""type"" :   ""belowMedianVolume""              } ,              ""filter18"" :   {                  ""type"" :   ""aboveMedianVolume""              }          } ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""removePairs"" ,          ""snapshots"" :   10 ,          ""debug"" :   ""true"" ,          ""setVariable"" :   {              ""userVariable1"" :   true          } ,          ""enabled"" :   true      } ,      ""removePairs2-jobname"" :   {          ""pairs"" :   {              ""exclude"" :   ""BNB,XVG"" ,              ""noBag"" :   false ,              ""removeDisabled"" :   true ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""exact"" ,                  ""ducount"" :   1              } ,              ""filter2"" :   {                  ""type"" :   ""biggerThan"" ,                  ""ducount"" :   1              } ,              ""filter3"" :   {                  ""type"" :   ""smallerThan"" ,                  ""ducount"" :   1              } ,              ""filter4"" :   {                  ""type"" :   ""compareBigger"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1              } ,              ""filter5"" :   {                  ""type"" :   ""compareSmaller"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1              } ,              ""filter6"" :   {                  ""type"" :   ""differenceBigger"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1 ,                  ""delta"" :   10              } ,              ""filter7"" :   {                  ""type"" :   ""differenceSmaller"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1 ,                  ""delta"" :   10              } ,              ""filter16"" :   {                  ""type"" :   ""variableExact"" ,                  ""userVar1"" :   false              }          } ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""removePairs2"" ,          ""snapshots"" :   10 ,          ""resume"" :   false ,          ""debug"" :   ""true"" ,          ""setVariable"" :   {              ""userVariable1"" :   true          } ,          ""enabled"" :   true      } ,      ""changeStrategy-jobname"" :   {          ""pairs"" :   {              ""exclude"" :   """" ,              ""bag"" :   true ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""minPrice"" ,                  ""min"" :   0.0000001              } ,              ""filter2"" :   {                  ""type"" :   ""maxPrice"" ,                  ""max"" :   0.0000010              } ,              ""filter3"" :   {                  ""type"" :   ""minPricePctChangeInterval"" ,                  ""min"" :   0.00002              } ,              ""filter4"" :   {                  ""type"" :   ""maxPricePctChangeInterval"" ,                  ""max"" :   1              } ,              ""filter5"" :   {                  ""type"" :   ""minVolumePctChangeInterval"" ,                  ""min"" :   10              } ,              ""filter6"" :   {                  ""type"" :   ""maxVolumePctChangeInterval"" ,                  ""max"" :   50              } ,              ""filter7"" :   {                  ""type"" :   ""minVolume24h"" ,                  ""min"" :   500              } ,              ""filter8"" :   {                  ""type"" :   ""maxVolume24h"" ,                  ""max"" :   1000              } ,              ""filter9"" :   {                  ""type"" :   ""minVolatilityPct24h"" ,                  ""min"" :   1              } ,              ""filter10"" :   {                  ""type"" :   ""maxVolatilityPct24h"" ,                  ""max"" :   1              } ,              ""filter11"" :   {                  ""type"" :   ""minSpreadPct"" ,                  ""min"" :   0.00001              } ,              ""filter12"" :   {                  ""type"" :   ""maxSpreadPct"" ,                  ""max"" :   1              } ,              ""filter13"" :   {                  ""type"" :   ""minSlopePctInterval"" ,                  ""min"" :   0.00001              } ,              ""filter14"" :   {                  ""type"" :   ""maxSlopePctInterval"" ,                  ""max"" :   1              } ,              ""filter16"" :   {                  ""type"" :   ""variableExact"" ,                  ""userVar1"" :   false              } ,              ""filter17"" :   {                  ""type"" :   ""belowMedianVolume""              } ,              ""filter18"" :   {                  ""type"" :   ""aboveMedianVolume""              }          } ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""changeStrategy"" ,          ""snapshots"" :   10 ,          ""strategy"" :   ""baghandler"" ,          ""resume"" :   false ,          ""debug"" :   ""true"" ,          ""setVariable"" :   {              ""userVariable1"" :   true          } ,          ""enabled"" :   true      } ,      ""changeStrategy2-jobname"" :   {          ""pairs"" :   {              ""exclude"" :   """" ,              ""bag"" :   true ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""exact"" ,                  ""ducount"" :   1              } ,              ""filter2"" :   {                  ""type"" :   ""biggerThan"" ,                  ""ducount"" :   1              } ,              ""filter3"" :   {                  ""type"" :   ""smallerThan"" ,                  ""ducount"" :   1              } ,              ""filter4"" :   {                  ""type"" :   ""compareBigger"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1              } ,              ""filter5"" :   {                  ""type"" :   ""compareSmaller"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1              } ,              ""filter6"" :   {                  ""type"" :   ""differenceBigger"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1 ,                  ""delta"" :   10              } ,              ""filter7"" :   {                  ""type"" :   ""differenceSmaller"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1 ,                  ""delta"" :   10              } ,              ""filter16"" :   {                  ""type"" :   ""variableExact"" ,                  ""userVar1"" :   false              }          } ,          ""schedule"" :   ""* * * * *"" ,          ""type"" :   ""changeStrategy2"" ,          ""snapshots"" :   10 ,          ""strategy"" :   ""baghandler"" ,          ""resume"" :   false ,          ""setVariable"" :   {              ""userVariable1"" :   true          } ,          ""debug"" :   ""true"" ,          ""enabled"" :   true      } ,      ""manageOverrides-jobname"" :   {          ""pairs"" :   {              ""exclude"" :   ""DOGE,ETH"" ,              ""include"" :   ""USDT,BNB"" ,              ""exchange"" :   ""binance""          } ,          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""exact"" ,                  ""ducount"" :   1              } ,              ""filter2"" :   {                  ""type"" :   ""biggerThan"" ,                  ""ducount"" :   1              } ,              ""filter3"" :   {                  ""type"" :   ""smallerThan"" ,                  ""ducount"" :   1              } ,              ""filter4"" :   {                  ""type"" :   ""compareBigger"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1              } ,              ""filter5"" :   {                  ""type"" :   ""compareSmaller"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1              } ,              ""filter6"" :   {                  ""type"" :   ""differenceBigger"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1 ,                  ""delta"" :   10              } ,              ""filter7"" :   {                  ""type"" :   ""differenceSmaller"" ,                  ""ema1"" :   1 ,                  ""ema2"" :   1 ,                  ""delta"" :   10              } ,              ""filter16"" :   {                  ""type"" :   ""variableExact"" ,                  ""userVar1"" :   false              }          } ,          ""overrides"" :   {              ""DU_BUYDOWN"" :   3          } ,          ""clearOverrides"" :   false ,          ""setITB"" :   false ,          ""schedule"" :   ""*/10 * * * *"" ,          ""type"" :   ""manageOverrides"" ,          ""resume"" :   false ,          ""setVariable"" :   {              ""userVariable1"" :   true          } ,          ""debug"" :   ""true"" ,          ""enabled"" :   true      } } Config format definitions ​ Templates for (almost) all available job types and filters. To use AutoConfig, you must have this in your  config.js  file: ""AutoConfig"": {         ""enabled"": true     }, Additionally, you must create a file named  autoconfig.json  which contains one or more jobs to process. Currently there is no GUI yet to manage this config file, but you can find detailed information on each job type in this article. // config templates for different job types // each job is a ""userString"", {} element, number of jobs is not limited // the ""type"" parameter defines the job type. different job types have (slightly) different config parameters {      ""addPairs"" :   {   // all job names are a user string          // can use ticker and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""include"" :   """" ,   // must be used              ""maxPairs"" :   25 ,   // must be used              ""noCrossOver"" :   false ,   // must be used              ""exchange"" :   ""binance"" ,   // must be used              ""filteredQuote"" :   [ ] ,   // can be used, only relevant in BR context. leave out when not used              ""filteredPair"" :   [ ] ,   // can be used, only relevant in BR context. leave out when not used              ""filteredBase"" :   [ ]   // can be used, only relevant in BR context. leave out when not used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""overrides"" :   { } ,   // can be used, can be empty when used          ""brStrat"" :   ""br"" ,   // can be used, only relevant in BR context when using AC for hedging. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""addPairs"" ,   // must be used          ""strategy"" :   ""gain"" ,   // must be used          ""snapshots"" :   20 ,   // must be used, lowest value: 1          ""history"" :   10 ,   // can be used, leave out when not used. only used together with ""historyInterval""          ""historyInterval"" :   5 ,   // can be used, leave out when not used. only used together with ""history""          ""setITB"" :   true ,   // must be used          ""resume"" :   true ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""removePairs"" :   {          // can use ticker and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""noBag"" :   false ,   // must be used              ""removeDisabled"" :   false ,   // must be used              ""notRemoveBefore"" :   60 ,   // can be used. leave out when not used              ""removeBase"" :   ""USDT"" ,   // can be used, only relevant in BR context. leave out when not used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""brStrat"" :   ""br"" ,   // can be used, only relevant in BR context when using AC for hedging. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""removePairs"" ,   // must be used          ""snapshots"" :   20 ,   // must be used, lowest value: 1          ""history"" :   10 ,   // can be used, leave out when not used. only used together with ""historyInterval""          ""historyInterval"" :   5 ,   // can be used, leave out when not used. only used together with ""history""          ""resume"" :   true ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""removePairs2"" :   {          // can use state and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""noBag"" :   false ,   // must be used              ""removeDisabled"" :   false ,   // must be used              ""notRemoveBefore"" :   60 ,   // can be used. leave out when not used              ""removeBase"" :   ""USDT"" ,   // can be used, only relevant in BR context. leave out when not used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""brStrat"" :   ""br"" ,   // can be used, only relevant in BR context when using AC for hedging. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""removePairs2"" ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""changeStrategy"" :   {          // can use ticker and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""bag"" :   false ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""changeStrategy"" ,   // must be used          ""snapshots"" :   20 ,   // must be used, lowest value: 1          ""history"" :   10 ,   // can be used, leave out when not used. only used together with ""historyInterval""          ""historyInterval"" :   5 ,   // can be used, leave out when not used. only used together with ""history""          ""resume"" :   true ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""changeStrategy2"" :   {          // can use state and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""bag"" :   false ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""changeStrategy2"" ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""manageOverrides"" :   {          // can use state and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""include"" :   """" ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""overrides"" :   { } ,   // can be used, can be empty when used          ""clearOverrides"" :   false ,   // must be used          ""brStrat"" :   ""br"" ,   // can be used, only relevant in BR context when using AC for hedging. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""manageOverrides"" ,   // must be used          ""setITB"" :   true ,   // must be used          ""delay"" :   10 ,   // can be used, leave out when not used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""changeDelay"" :   {          // can use state and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""include"" :   """" ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""changeDelay"" ,   // must be used          ""delay"" :   10 ,   // can be used, leave out when not used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""manageBotSettings"" :   {          // can use state and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""bag"" :   false ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""bot"" :   { } ,   // must be used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""changeStrategy2"" ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""hedgeGB"" :   {          // can use ticker and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""bag"" :   false ,   // must be used              ""baseFrom"" :   ""USDT"" ,   // must be used              ""baseTo"" :   ""BTC"" ,   // must be used              ""hedgePair"" :   ""USDT-BTC"" ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // must be used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""hedgeGB"" ,   // must be used          ""snapshots"" :   20 ,   // must be used, lowest value: 1          ""history"" :   10 ,   // can be used, leave out when not used. only used together with ""historyInterval""          ""historyInterval"" :   5 ,   // can be used, leave out when not used. only used together with ""history""          ""resume"" :   true ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""hedgeGB2"" :   {          // can use state and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""bag"" :   false ,   // must be used              ""baseFrom"" :   ""USDT"" ,   // must be used              ""baseTo"" :   ""BTC"" ,   // must be used              ""hedgePair"" :   ""USDT-BTC"" ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // must be used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""hedgeGB2"" ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""hedge"" :   {          // can use state and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""include"" :   """" ,   // must be used              ""exchange"" :   ""binance"" ,   // must be used              ""filteredQuote"" :   [ ] ,   // can be used, only relevant in BR context. leave out when not used              ""filteredPair"" :   [ ] ,   // can be used, only relevant in BR context. leave out when not used              ""filteredBase"" :   [ ]   // can be used, only relevant in BR context. leave out when not used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""brStrat"" :   ""br"" ,   // can be used, only relevant in BR context when using AC for hedging. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""hedge"" ,   // must be used          ""hedgeTo"" :   ""USDT"" ,   // must be used          ""snapshots"" :   20 ,   // must be used, lowest value: 1          ""history"" :   10 ,   // can be used, leave out when not used. only used together with ""historyInterval""          ""historyInterval"" :   5 ,   // can be used, leave out when not used. only used together with ""history""          ""resume"" :   true ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      ""filteredQuote"" :   {          // can use ticker and generic filters          ""pairs"" :   {              ""exclude"" :   """" ,   // must be used, can be empty              ""include"" :   """" ,   // must be used              ""exchange"" :   ""binance""   // must be used          } ,          ""filters"" :   { } ,   // must be used and contain at least 1 filter          ""filters2"" :   { } ,   // can be used, then must contain at least 1 filter. leave out when not used. filters2 to filters9 can be used in the same way          ""setVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""resetVariable"" :   {              ""userKeys"" :   ""userValues""          } ,   // can be used, can be empty when used. leave out when not used          ""schedule"" :   ""* * * * *"" ,   // must be used          ""type"" :   ""filteredQuote"" ,   // must be used          ""snapshots"" :   20 ,   // must be used, lowest value: 1          ""history"" :   10 ,   // can be used, leave out when not used. only used together with ""historyInterval""          ""historyInterval"" :   5 ,   // can be used, leave out when not used. only used together with ""history""          ""resume"" :   true ,   // must be used          ""debug"" :   false ,   // must be used          ""enabled"" :   true   // must be used      } ,      // list of all ticker filters      ""tickerFilters"" :   {          // ticker filters work by collecting tickers for all pairs on ccxt supported exchanges          // a filter set can have an ""unlimited"" number of filters          // the sequence of elements matters within filters          ""filters"" :   {              ""filter1"" :   {   // filter name is a user string                  ""type"" :   ""minPrice"" ,                  ""min"" :   0.5              } ,              ""filter2"" :   {                  ""type"" :   ""maxPrice"" ,                  ""max"" :   0.5              } ,              ""filter3"" :   {                  ""type"" :   ""minPricePctChangeInterval"" ,                  ""min"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter4"" :   {                  ""type"" :   ""maxPricePctChangeInterval"" ,                  ""max"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter5"" :   {                  ""type"" :   ""minVolumePctChangeInterval"" ,                  ""min"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter6"" :   {                  ""type"" :   ""maxVolumePctChangeInterval"" ,                  ""max"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter7"" :   {                  ""type"" :   ""minVolume24h"" ,                  ""min"" :   0.5              } ,              ""filter8"" :   {                  ""type"" :   ""maxVolume24h"" ,                  ""max"" :   0.5              } ,              ""filter9"" :   {                  ""type"" :   ""minVolatilityPct24h"" ,                  ""min"" :   0.5              } ,              ""filter10"" :   {                  ""type"" :   ""maxVolatilityPct24h"" ,                  ""max"" :   0.5              } ,              ""filter11"" :   {                  ""type"" :   ""minSpreadPct"" ,                  ""min"" :   0.5              } ,              ""filter12"" :   {                  ""type"" :   ""maxSpreadPct"" ,                  ""max"" :   0.5              } ,              ""filter13"" :   {                  ""type"" :   ""minSlopePctInterval"" ,                  ""min"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter14"" :   {                  ""type"" :   ""maxSlopePctInterval"" ,                  ""max"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter15"" :   {                  ""type"" :   ""minStandardDevPctInterval"" ,                  ""min"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter16"" :   {                  ""type"" :   ""maxStandardDevPctInterval"" ,                  ""max"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter17"" :   {                  ""type"" :   ""belowMedianVolume""              } ,              ""filter18"" :   {                  ""type"" :   ""aboveMedianVolume""              } ,              ""filter19"" :   {                  ""type"" :   ""minVolumeRank"" ,                  ""min"" :   0.5              } ,              ""filter20"" :   {                  ""type"" :   ""maxVolumeRank"" ,                  ""max"" :   0.5              } ,              ""filter21"" :   {                  ""type"" :   ""bullishStandardDeviationChannel"" ,                  ""range"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter22"" :   {                  ""type"" :   ""bearishStandardDeviationChannel"" ,                  ""range"" :   0.5 ,                  ""lastSnapshots"" :   3   // can be used, leave out when not used, value must be lower than job snaphot count              } ,              ""filter23"" :   {                  ""type"" :   ""allowsHedging"" ,                  ""BTC"" :   ""USDT""   // any two user defined base currencies              } ,              ""filter24"" :   {                  ""type"" :   ""volumeTrailing"" ,                  ""buyLevel"" :   50 ,                  ""trailingRange"" :   8              } ,              ""filter25"" :   {                  ""type"" :   ""buyTrailing"" ,                  ""buyLevel"" :   50 ,                  ""trailingRange"" :   8              } ,              ""filter26"" :   {                  ""type"" :   ""slopeTrailing"" ,                  ""buyLevel"" :   50 ,                  ""trailingRange"" :   8              } ,              ""filter27"" :   {                  ""type"" :   ""linearRegressionChannel"" ,                  ""range"" :   0              }          }      } ,      // list of all ticker history filters, can be used in any job that allows ticker filters      ""tickerHistoryFilters"" :   {          // ticker filters work by collecting tickers for all pairs on ccxt supported exchanges          // a filter set can have an ""unlimited"" number of filters          // the sequence of elements matters within filters          ""filters"" :   {              ""filter1"" :   {   // filter name is a user string                  ""type"" :   ""minPriceHistory"" ,                  ""min"" :   0.5 ,                    ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter2"" :   {                  ""type"" :   ""maxPriceHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter3"" :   {                  ""type"" :   ""minPricePctChangeIntervalHistory"" ,                  ""min"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter4"" :   {                  ""type"" :   ""maxPricePctChangeIntervalHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter5"" :   {                  ""type"" :   ""minVolumePctChangeIntervalHistory"" ,                  ""min"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter6"" :   {                  ""type"" :   ""maxVolumePctChangeIntervalHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter7"" :   {                  ""type"" :   ""minVolume24hHistory"" ,                  ""min"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter8"" :   {                  ""type"" :   ""maxVolume24hHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter9"" :   {                  ""type"" :   ""minVolatilityPct24hHistory"" ,                  ""min"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value                          } ,              ""filter10"" :   {                  ""type"" :   ""maxVolatilityPct24hHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter11"" :   {                  ""type"" :   ""minSpreadPctHistory"" ,                  ""min"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter12"" :   {                  ""type"" :   ""maxSpreadPctHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter13"" :   {                  ""type"" :   ""minSlopePctIntervalHistory"" ,                  ""min"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter14"" :   {                  ""type"" :   ""maxSlopePctIntervalHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter15"" :   {                  ""type"" :   ""minStandardDevPctIntervalHistory"" ,                  ""min"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter16"" :   {                  ""type"" :   ""maxStandardDevPctIntervalHistory"" ,                  ""max"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter17"" :   {                  ""type"" :   ""bearishStandardDeviationChannelHistory"" ,                  ""range"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              } ,              ""filter18"" :   {                  ""type"" :   ""bullishStandardDeviationChannelHistory"" ,                  ""range"" :   0.5 ,                  ""historySource"" :   6   // value must be lower than job history value              }          }      } ,      // list of all pair state filters      ""stateFilters"" :   {          // state filters read data from the gunbot ledger data, for pairs that are actively cycling          // a filter set can have an ""unlimited"" number of filters          // the sequence of elements matters within filters          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""exact"" ,                  ""ducount1"" :   1   // key is a user string              } ,              ""filter2"" :   {                  ""type"" :   ""biggerThan"" ,                  ""ema1"" :   1   // key is a user string              } ,              ""filter3"" :   {                  ""type"" :   ""smallerThan"" ,                  ""ema1"" :   1   // key is a user string              } ,              ""filter4"" :   {                  ""type"" :   ""compareBigger"" ,                  ""ema1"" :   1 ,   // key is a user string, value is irrelevant but must be set                  ""ema2"" :   1   // key is a user string, value is irrelevant but must be set              } ,              ""filter5"" :   {                  ""type"" :   ""compareSmaller"" ,                  ""ema1"" :   1 ,   // key is a user string, value is irrelevant but must be set                  ""ema2"" :   1   // key is a user string, value is irrelevant but must be set              } ,              ""filter6"" :   {                  ""type"" :   ""differenceBigger"" ,                  ""ema1"" :   1 ,   // key is a user string, value is irrelevant but must be set                  ""ema2"" :   1 ,   // key is a user string, value is irrelevant but must be set                  ""delta"" :   10              }          }      } ,      // list of all generic filters      ""genericFilters"" :   {          // generic filters can be used in all job types. some generic filters depend on a pair actively cycling          // a filter set can have an ""unlimited"" number of filters          // the sequence of elements matters within filters          ""filters"" :   {              ""filter1"" :   {                  ""type"" :   ""variableExact"" ,                  ""key"" :   ""value""   // key and value are user strings/numbers              } ,              ""filter2"" :   {                  ""type"" :   ""variableNotExist"" ,                  ""key"" :   ""value""   // key is a user string/number, value is irrelevant but must be set              } ,              ""filter3"" :   {                  ""type"" :   ""pairVariableExact"" ,                  ""key"" :   ""value""   // key and value are user strings/numbers                  ""exchange"" :   ""value""   // can be used, leave out when not used. value is a user string              } ,              ""filter4"" :   {                  ""type"" :   ""strategyName"" ,                  ""strategy"" :   ""value""   // value is user string              } ,              ""filter5"" :   {                  ""type"" :   ""minTimeInConfig"" ,                  ""min"" :   1              } ,              ""filter6"" :   {                  ""type"" :   ""maxTimeInConfig"" ,                  ""max"" :   1              } ,              ""filter7"" :   {                  ""type"" :   ""maxSameOrder"" ,                  ""lastOrders"" :   4 ,                  ""trigger"" :   ""StrategyBuy""   // possible string values: StrategyBuy, StrategySell,  StopLimit ,Close, RTSell, RTBuy, RTBuyback, DCA, Cancelled              } ,              ""filter8"" :   {                  ""type"" :   ""minTimeSinceOrder"" ,                  ""min"" :   60 ,                  ""trigger"" :   ""StrategyBuy""   // possible string values: StrategyBuy, StrategySell,  StopLimit ,Close, RTSell, RTBuy, RTBuyback, DCA, Cancelled              } ,              ""filter9"" :   {                  ""type"" :   ""maxTimeSinceOrder"" ,                  ""max"" :   60 ,                  ""trigger"" :   ""StrategyBuy""   // possible string values: StrategyBuy, StrategySell,  StopLimit ,Close, RTSell, RTBuy, RTBuyback, DCA, Cancelled              }          }      } } Filterable parameters for state filters ​ Below is a (non exhaustive) list of parameters that can be filtered with state filters. Only the most useful ones are listed. All indicator values depend on the indicator settings you've set in the strategy running the pair. To find the full list of available items to filter using state filters, open the json state file of the pair you want to perform filtering on. Always make sure to only add filters for existing parameters, some are strategy or exchange dependent. ""ABP"": 7814.956108919921,    // average bought price, includes trading fees ""Ask"": 9025.99,    // current best ask price ""AskVolume"": 5.183191,    // volume on ask side of the order book ""Bid"": 9025.17,    // current best bid price ""BidVolume"": 5.952429000000001,    // volume on bid side of the order book ""CHIKOU"": 9025,    // current chikou value ""FAST_SMA"": 0.00007840000000000017,    // Current value for fast SMA ""KIJUN"": 9110.439999999999, // current kijun value ""MACD"": -92.56199382179693,    // current MACD value ""MACD_HISTOGRAM"": -42.404581672042966,    // current MACD historgram value ""MACD_SIGNAL"": -50.157412149753966,    // current MACD signal value ""ROE"": -337.622777196791,     // Current ROE for position, including leverage (bitmex) ""SLOW_SMA"": 0.00007835000000000043,    // Current value for slow SMA ""STOCHRSI"": 0,    // current StochRSI value ""STOCH_D"": 22.795385433280803,    // current Stoch D value ""STOCH_K"": 24.829516212043245,    // current Stoch K value ""TENKAN"": 9108,    // current tenkan value ""actualSENKOUSPANA"": 9257.8625,    // current senkou span a value ""actualSENKOUSPANB"": 9295.955,     // current senkou span b value ""adx"": 53.365896826023615,    // current adx value ""atr"": 57.69181846913094,     // current atr value ""availableMargin"": 0,         // available margin (bitmex) ""avgEntryPrice"": 0,           // average entry price for current position (bitmex) ""baseBalance"": 3153.05465646, // available base balance ""countsell"": 0,               // Number of sell orders since the pair was added. ""currentQty"": 0,              // current quantity of a position (bitmex) ""diminus"": 41.26673671193246, // current di- value ""diplus"": 9.110903255097467,  // current di+ value ""ducount"": 0,                 // DU count, equals the number of completed DU rounds ""dudone"": false,              // Dudone indicates if max DU count is reached. Resets once a regular buy order has been filled after the DU pair sold.  ""ema1"": 9243.02363508863,     // Current EMA1 value ""ema2"": 9243.02363508863,     // Current EMA2 value ""forecast"": 9024.972507172492,    // Forecast price (using time series analysis) ""highBB"": 9405.63185580759,   // Current upper bollinger band value ""liquidationPrice"": 0,        // Liquidation price (bitmex) ""lowBB"": 9081.778944192416,   // Current lower bollinger band value  ""mfi"": 26.93273441417246,     // Current MFI value ""ourBaginBase"": 420.673099259907,    // Bag value in base currency ""pKIJUN"": 9110.439999999999,  // Previous round kijun value ""pTENKAN"": 9108,              // Previous round tenkan value ""pastSENKOUSPANA"": 9330.935,  // Previous round senkou span a value ""pastSENKOUSPANB"": 9319.82,   // Previous round senkou span b value ""prevAsk"": 9026.15,           // Previous round best ask value ""prevBid"": 9025.6,            // Previous round best bid value ""quoteBalance"": 0.04227457,   // Balance of quote holding ""reversal"": false,            // Indicates if reversal trading is active ""rsi"":39.883053922751834     // Current RSI value ""rtsoldprice"": 10153.55,      // Price or last RT Sell Previous Misc settings Next Backtesting add-on How it works Filter options Ticker filters Pair state filters Generic filters User Variables Multiple filter sets Calculated values and custom filters Job types (with config examples) Adding pairs Removing pairs Change strategy Managing overrides Change exchange delay Manage bot settings Hedge (for Gunbot) Hedge (for bitRage) Filtered quote (for bitRage) Optional parameters Backtesting for addPairs jobs Various Example config with many job types and filters Config format definitions Filterable parameters for state filters Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Balance settings, https://wiki.gunthy.org/how-to-work-with-gunbot/learning-the-basics/balance-settings,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading logic Balance settings Order types Period Trailing ROE trailing Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Learning the basics Balance settings On this page Balance settings Every trading strategy contains a few balance settings, these are among the most important settings and you must understand what they do. Trading Limit ​ With this setting you tell Gunbot how much to spend on a buy order. The trading limit is generally defined in the ""base currency"" of a pair. This means that if you want to buy LTC with BTC, the trading limit must be set in Bitcoin. If you want to buy BTC with USD, you need to set the trading limit as an amount in US dollars. Since in crypto there are many different base currencies, it is very important you set this correctly. Not setting it correctly can lead to trades for unwanted amounts, or no trades at all. It is important to set the trading limit at least a bit higher than the minimum trade size of your exchange. The reason for this is that due to rounding and/or fees a trade mostly results in an amount worth slightly less than the trading limit. If this amount is lower than the minimum trade size of your exchange, it cannot be sold without buying additional units. Min volume to sell ​ This setting defines the minimum trade size for the pair you trade, this is both pair and exchange specific. When set correctly, Gunbot will ignore low balances that can not be sold. Look up the minimum trade size for your pair, and set it exactly like this. Usage example: Trading pair:  USDT-BTC Exchange defined minimum trade size:  10 USDT Current balance value:  8 USDT When min volume to sell is correctly set to 10, Gunbot will ignore the current balance and proceed with looking for a buy opportunity. When min volume to sell is set incorrectly, for example to 3, Gunbot will attempt to sell the current balance worth only 8 USDT. This will fail because the exchange does not allow the trade. Min volume to buy ​ This setting is very similar to min volume to sell, it defines what the minimum amount is that Gunbot can place a buy order for. Look up the minimum trade size for your pair, and set it exactly like this. It is normal to set this parameter exactly the same as min volume to sell. In some cases Gunbot will place a buy order in multiple parts, the setting min volume to buy tells the bot what the absolute minimum amount for a partial order can be. If you set it too low, such trades will fail. tip Min volume to buy is only needed when using limit orders. Previous Trading logic Next Order types Trading Limit Min volume to sell Min volume to buy Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Order types, https://wiki.gunthy.org/how-to-work-with-gunbot/learning-the-basics/order-types,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading logic Balance settings Order types Period Trailing ROE trailing Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Learning the basics Order types Order types Throughout this wiki you will notice that some settings apply to specific ""order types"". The table below explains these order types. It's OK if you don't fully understand all order types at this moment, just be aware that there are different order types and settings often only affect some types. Order type Quick explanation Strategy buy Regular buy / long order Strategy sell Regular sell / short order Stop limit Stop order, meant to close a losing trade Close Closes a margin trading position DCA buy Buy order initiated by DCA RT buy Buy order during Reversal Trading RT sell Sell order during Reversal Trading RT buyback Reversal Trading buyback order Previous Balance settings Next Period Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Period, https://wiki.gunthy.org/how-to-work-with-gunbot/learning-the-basics/period,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading logic Balance settings Order types Period Trailing ROE trailing Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Learning the basics Period On this page Period Supported period values ​ Gunbot supports different values for  PERIOD  for each exchange. Currently the following periods are known to work: Choosing the right period ​ The  PERIOD  you set for candlesticks in your strategy is very important, since it has a big effect on indicators like  EMA1  and  EMA2 . This article provides a really quick overview of what the impact of  PERIOD  is. A single candlestick is a visualization of the opening, closing, high and low prices within a certain time frame. The most commonly used values for this time frame ( PERIOD ) are 5 minutes and 15 minutes. The closing price of each candlestick is used for calculating  EMA1  and  EMA2 . Using shorter candlesticks results in more price movement around EMA, this can be great for trading, but also be risky because you are fixated on short term trends only. In the image below, you can see the effect on EMA (the green and red lines) when using different candlestick sizes, while keeping other variables the same. tl;dr: Set  PERIOD  low to trade on short trends, set it higher to trade on longer trends. Previous Order types Next Trailing Supported period values Choosing the right period Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
ROE trailing, https://wiki.gunthy.org/how-to-work-with-gunbot/learning-the-basics/roe-trailing,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading logic Balance settings Order types Period Trailing ROE trailing Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Learning the basics ROE trailing ROE trailing To increase the profitability of a futures position, you can use ROE trailing to trail for a better close price. The basic concepts are exactly the same as regular buy and sell  trailing , with three differences: Trailing ranges are based on a percentage of the unrealized ROE for the position. This means that the trailing limits get wider when unrealized ROE increases. Instead of trailing prices, changes in unrealized ROE are trailed. The only dependency for ROE trailing is that it starts when the minimum ROE target is reached. Other factors like confirming indicators play no role. tip Because trailing is completely based on ROE, and not on price, you must use larger trailing limits than with other types of trailing. Setting a ROE Limit of 1 means that when your unrealized ROE decreases with 1% (i.e. from 1.00 to 0.99), the position will be closed. A low setting like this hardly allows for trailing. Previous Trailing Next Trading settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Trading logic, https://wiki.gunthy.org/how-to-work-with-gunbot/learning-the-basics/trading-logic,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading logic Balance settings Order types Period Trailing ROE trailing Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Learning the basics Trading logic On this page Trading logic Essential info about what to expect when working with Gunbot. Gunbot does what you tell it to do ​ There is very little magic involved in this product, Gunbot tries to execute exactly the settings you feed it. This means that you pick the trading pairs the bot should trade and assign a trading strategy to these pairs. Once you've done that, all it takes is starting the bot core to begin automatic trading. A trading strategy can be very simple, based on one of many presets - or you can create one from scratch using more than 120 different settings options. General principle: buy once, sell once ​ A strategy in Gunbot always consists of settings that control when it should buy, and when to sell. Most strategies will buy one time once the buying criteria occur, then sell everything it bought as soon as selling conditions happen. While true as a general principle, know that there are many exceptions to this - allowing for a whole lot of flexibility for traders: Some strategies can buy multiple times in a row Some strategies can do partial sell orders Dollar Cost Avg (DCA) relies on buying at least twice Sell orders can sometimes be executed in multiple parts Sell orders can be configured to not sell all available funds Etc. This list is not meant as a complete overview of exceptions. Some settings have strategy specific behavior ​ Although many settings have exactly the same name across different buy & sell methods, they can still behave slightly different. For every strategy there is full documentation on what every parameter does, read the strategy documentation if you are unsure about something. Changing settings on a running trading pair ​ You can change settings anytime, they take effect as soon as you save them. If a trading pair placed a buy order with strategy A, it's perfectly fine to change a setting in strategy A or assign a different strategy to this pair. Manual trading ​ It's generally not a problem at all if you trade manually on the same exchange account, or even the same pairs that Gunbot trades. Do make sure your settings for cancelling orders don't end up cancelling your manual orders though. Gunbot will read from the trade history at the exchange and act accordingly. If you have multiple buy orders for a pair, it will work out the average bought price and use that as reference price for selling. During Reversal Trading it is recommended to not manually trade the same pair. Previous Simulator Next Balance settings Gunbot does what you tell it to do General principle: buy once, sell once Some settings have strategy specific behavior Changing settings on a running trading pair Manual trading Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Trailing, https://wiki.gunthy.org/how-to-work-with-gunbot/learning-the-basics/trailing,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading logic Balance settings Order types Period Trailing ROE trailing Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Learning the basics Trailing On this page Trailing Trailing is an important concept in Gunbot. When buying, it allows for aiming for a lower entry price than strategy criteria would otherwise realize. When selling, it allows for higher profits, while locking in profits while trailing ranges move upwards along with price. Many different order types can use trailing, the basic principles are always the same: Trailing is purely based on prices, not on indicators.  When confirming indicators are used, trailing must finish while their conditions are still met. When buying, the ask price is used as reference. When selling, bid is used. Ranges for trailing are defined as a percentage of the best bid or ask price. Bid is used when selling, ask is used when buying. When price moves in the direction of your target, ranges are set around bid/ask every round. When price moves in the opposite direction of your target, trailing limits are frozen. Ranges are reset when price moves outside of the target. tip In strategies like stepgrid, trailing is completely integrated and has no additional settings. Buy trailing ​ The same basic process applies for most kinds of buy trailing (exception: Take Buy). The example below shows how trailing works for buying with the  tssl strategy . When trailing with tssl, the most important part to know is that trailing must finish below Buy Level. Make sure to set a Buy Level that leaves enough room for trailing. Other types of buy trailing, like DU trailing, follow the exact same trailing logic, but the threshold below which trailing must finish is different. Type of trailing Must finish below / while TrailMe Buy While other strategy buy criteria are met TrailMe DU Below DU Buydown TrailMe RT Buy Below RT Buy Level Tssl Below Buy Level, while other strategy buy criteria are met Sell trailing ​ The same basic process applies for most kinds of sell trailing (exception: Take Profit). The example below shows how trailing works for selling with the  tssl strategy . This example looks more complicated than the buy example above, because the concept of resetting trailing limits is now visualized. Important to know about sell trailing with tssl is that the StopLoss limit must be above your setting for gain before trailing can finish. Make sure that you leave enough room for this to happen, either by setting a modest gain, or by using a small sell range. Other types of sell trailing behave in the same way, but instead of gain a different reference point is used. Type of trailing Must finish above / while TrailMe Sell While other strategy sell criteria are met TrailMe RT Sell Up Above RT Sell Up Tssl Above Gain, while other strategy sell criteria are met Take Buy ​ Buy trailing with Take Buy is a bit different, because it acts as a second buy layer in your strategy. The idea is that sometimes prices will come close to your target, but not close enough for your main strategy to catch a buy. In this case you can use Take Buy as an extra threshold above your regular entry point. The example above shows that price was on its way reaching the primary buy trigger Buy Level, but didn't quite make it. Instead, Take Buy took the order when prices started moving upwards again. Take Profit ​ Similar to Take Buy, Take Profit acts as a secondary sell layer in your strategy. It trails between the break-even point and the target for Gain. In case prices do move over your Gain target, trailing stops and the normal strategy conditions apply. Previous Period Next ROE trailing Buy trailing Sell trailing Take Buy Take Profit Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Trading settings, https://wiki.gunthy.org/how-to-work-with-gunbot/trading-settings,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Learning the basics Trading settings Charts & results Trading strategy options Extra modules Various Troubleshooting Config marketplace How to work with Gunbot Trading settings On this page Trading settings Select which pairs to trade, and configure the strategy to use. Each trading pair can have it's own individual settings. Settings can be changed at any time, as soon as you save changes it will be reflected in trading behavior. Direct link http://localhost:5000/trading-settings Active pairs ​ Active pairs are pairs that are currently configured with a trading strategy.  When trading is started, all enabled pairs in the list of active pairs will get processed. Pair settings ​ The strategy settings for an individual pair from the active pairs list, shows all active strategy settings for that pair.
You can use this dialog to change settings while the bot is still trading using the currently saved settings. To start using new or changed settings, apply and save them. You can also prepare changes to many active pairs, once applied and saved these new settings will be used to trade. Pair actions ​ When you  disable  a pair it will no longer be traded until it gets  enabled  again. The pair stays on the list of active pairs, settings are kept. To  remove  a pair means that it is no longer traded and it's settings are removed. Adding new trading pairs ​ Trading with Gunbot works by selecting one or more trading pairs, and assigning strategy settings to these pairs. The bot then 'cycles' through these pairs perpetually, fetching new market data and processing the 'trading rules' the strategy sets. Most supported exchanges allow selecting pairs from an overview with market data, some exchanges require manual pair name entry. Markets overview ​ The markets overview helps you select interesting pairs to trade. Pairs are categorized by the 'base' coin they are traded with, for example USDT, EUR or BTC.  You can use and compare preview charts to quickly check detailed market data before deciding to trade a pair. Manual entry ​ For some exchanges the markets overview is not available to select pairs from. On such exchanges you can enter the pair name directly.  Pair naming conventions ​ Gunbot uses a standardized format for entering trading pairs, this allows you to use the same syntax for all exchanges you might use. Where possible it uses this notation: BASECOIN-QUOTECOIN All pairs with BTC as base currency are written like: BTC-ETH, BTC-ATOM, BTC-ETH All pairs with USDT as base currency are written like: USDT-BTC, USDT-ETH, USDT-XMR Pair naming on dYdx: USD-ETH, USD-BTC, etc. note The base coin in Gunbot is the one used to buy another asset. Be aware that some exchange display pair names in the exact reverse order.  Pair naming for futures exchanges ​ The long and short sides on  Bybit  are split into separate pairs in Gunbot. Use USDT-BTC-LONG for the long side of your strategy and USDT-BTC-SHORT for the short side of your strategy. Each side pair can only open positions in that direction. Pairs on  Bitmex  use almost the same symbols as on Bitmex itself, but with a hyphen-minus between the two asset names. Example: XBT-USD Pairs on  Kraken Futures  follow the following conventions: Perpetual contracts: XBT-USD, ETH-USD, LTC-USD, etc. Monthly futures: XBT-MONTH, ETH-MONTH, LTC-MONTH, etc Quarterly futures: XBT-QUART, ETH-QUART, LTC-QUART, etc note Other supported futures exchanges do not require manual pair name entry. Gunbot will list them in their correct format. Strategy settings ​ The strategy editor is where you can configure strategy settings for new pairs, adjust settings for running pairs, copy settings and everything else related to strategy management. Because many strategies work differently on spot or futures markets, the editor will only show relevant strategy options for the pair you are adding or editing.  Creating a strategy ​ When you select a new trading pair, a dialog opens where you can configure the strategy settings to trade with.  Any settings change is saved for the selected pair only. If you want to use the same settings (or parts of it) on multiple pairs, you can copy the settings to/from other pairs. To re-use settings in the future, you can also save pair strategy settings as a preset. Built-in strategies ​ Some strategies have their own set of settings, and require the buy and sell method to be identical.  These 'built-in' strategies are listed in the strategies dropdown, for example  stepgrid  or  spotgridadvanced .
You can configure them individually, although not all inner workings are disclosed. Such strategies do not share the common settings parameters with other kinds of strategies in Gunbot. Builder ​ The 'builder' strategy lets you configure a strategy using a common set of settings parameters, each documented in detail.  The chosen buy and sell method can be different, for example buy with  bb  and sell with  tssl . Presets ​ If you like one of your customized strategies, you can save it as a preset for easy future use. A preset shows in the list of available strategies, next to the built-in strategies.  There is no limit to the number of presets that can be saved. Presets can be removed when no longer in use by an active trading pair. Copy actions ​ Bulk changes are possible by copying settings from or to other pairs.  Copy from / to ​ Copies the complete pair settings: the assigned strategy plus all customized parameters. Copy individual parameter ​ Copies the value of an individual parameter to one or more pairs. Custom editor presets ​ With custom editor templates you can build the perfect editor for your style of configuring Gunbot. This can be used as a way to easily configure custom strategies, but you can also use it for any other buy/sell method - for example you could make an editor that hardcodes all the settings you never touch and just show the few settings you regularly use. Templates are saved in a file in the gunbot root folder, called  customStratEditor.json . Config format ​ {      ""Your strategy name"" :   {          ""info"" :   {              ""description"" :   ""Short descriptive text about this strategy"" ,              ""docsUrl"" :   ""https://link.to.docs.com/"" ,              ""market"" :   ""futures"" ,              ""exchangeBlacklist"" :   [                  ""bybit"" ,                  ""okex5""              ] ,              ""hardcode"" :   {                  ""GAIN"" :   ""4000"" ,                  ""STRAT_FILENAME"" :   ""yours.js"" ,                  ""SOMETHING_ELSE"" :   false              } ,              ""buyMethod"" :   ""custom"" ,              ""sellMethod"" :   ""custom""          } ,          ""First editor category"" :   {              ""description"" :   ""Short category description"" ,              ""parameters"" :   {                  ""SETTING_10"" :   {                      ""label"" :   ""Some label"" ,                      ""defaultValue"" :   ""40"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""string""                  } ,                  ""SETTING_11"" :   {                      ""label"" :   ""Another label"" ,                      ""defaultValue"" :   ""1"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""range"" ,                      ""step"" :   0.01 ,                      ""rangeLowHigh"" :   [                          1 ,                          5                      ] ,                      ""rangeInput"" :   [                          0.01 ,                          500                      ]                  } ,                  ""SETTING_12"" :   {                      ""label"" :   ""Again a label"" ,                      ""defaultValue"" :   false ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""boolean""                  } ,                  ""SETTING_13"" :   {                      ""label"" :   ""Options label"" ,                      ""defaultValue"" :   ""MEDIUM"" ,                      ""inputType"" :   ""select"" ,                      ""options"" :   [                          ""NONE"" ,                          ""SHORT"" ,                          ""MEDIUM"" ,                          ""LONG""                      ] ,                      ""tooltip"" :   ""tooltip text explaining the setting""                  }              }          } ,          ""Second editor category (you can have many more)"" :   {              ""description"" :   ""Short category description"" ,              ""parameters"" :   {                  ""SETTING_20"" :   {                      ""label"" :   ""Some label"" ,                      ""defaultValue"" :   ""40"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""string""                  } ,                  ""SETTING_21"" :   {                      ""label"" :   ""Another label"" ,                      ""defaultValue"" :   ""1"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""range"" ,                      ""step"" :   0.01 ,                      ""rangeLowHigh"" :   [                          1 ,                          5                      ] ,                      ""rangeInput"" :   [                          0.01 ,                          500                      ]                  } ,                  ""SETTING_22"" :   {                      ""label"" :   ""Again a label"" ,                      ""defaultValue"" :   false ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""boolean""                  } ,                  ""SETTING_23"" :   {                      ""label"" :   ""Options label"" ,                      ""defaultValue"" :   ""MEDIUM"" ,                      ""inputType"" :   ""select"" ,                      ""options"" :   [                          ""NONE"" ,                          ""SHORT"" ,                          ""MEDIUM"" ,                          ""LONG""                      ] ,                      ""tooltip"" :   ""tooltip text explaining the setting""                  }              }          }      } ,      ""Another strategy name"" :   {          ""info"" :   {              ""description"" :   ""Short descriptive text about this strategy"" ,              ""docsUrl"" :   ""https://link.to.docs.com/"" ,              ""market"" :   ""futures"" ,              ""exchangeBlacklist"" :   [                  ""bybit"" ,                  ""okex5""              ] ,              ""hardcode"" :   {                  ""GAIN"" :   ""4000"" ,                  ""STRAT_FILENAME"" :   ""yours.js"" ,                  ""SOMETHING_ELSE"" :   false              } ,              ""buyMethod"" :   ""custom"" ,              ""sellMethod"" :   ""custom""          } ,          ""First editor category"" :   {              ""description"" :   ""Short category description"" ,              ""parameters"" :   {                  ""SETTING_10"" :   {                      ""label"" :   ""Some label"" ,                      ""defaultValue"" :   ""40"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""string""                  } ,                  ""SETTING_11"" :   {                      ""label"" :   ""Another label"" ,                      ""defaultValue"" :   ""1"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""range"" ,                      ""step"" :   0.01 ,                      ""rangeLowHigh"" :   [                          1 ,                          5                      ] ,                      ""rangeInput"" :   [                          0.01 ,                          500                      ]                  } ,                  ""SETTING_12"" :   {                      ""label"" :   ""Again a label"" ,                      ""defaultValue"" :   false ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""boolean""                  } ,                  ""SETTING_13"" :   {                      ""label"" :   ""Options label"" ,                      ""defaultValue"" :   ""MEDIUM"" ,                      ""inputType"" :   ""select"" ,                      ""options"" :   [                          ""NONE"" ,                          ""SHORT"" ,                          ""MEDIUM"" ,                          ""LONG""                      ] ,                      ""tooltip"" :   ""tooltip text explaining the setting""                  }              }          } ,          ""Second editor category (you can have many more)"" :   {              ""description"" :   ""Short category description"" ,              ""parameters"" :   {                  ""SETTING_20"" :   {                      ""label"" :   ""Some label"" ,                      ""defaultValue"" :   ""40"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""string""                  } ,                  ""SETTING_21"" :   {                      ""label"" :   ""Another label"" ,                      ""defaultValue"" :   ""1"" ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""range"" ,                      ""step"" :   0.01 ,                      ""rangeLowHigh"" :   [                          1 ,                          5                      ] ,                      ""rangeInput"" :   [                          0.01 ,                          500                      ]                  } ,                  ""SETTING_22"" :   {                      ""label"" :   ""Again a label"" ,                      ""defaultValue"" :   false ,                      ""tooltip"" :   ""tooltip text explaining the setting"" ,                      ""inputType"" :   ""boolean""                  } ,                  ""SETTING_23"" :   {                      ""label"" :   ""Options label"" ,                      ""defaultValue"" :   ""MEDIUM"" ,                      ""inputType"" :   ""select"" ,                      ""options"" :   [                          ""NONE"" ,                          ""SHORT"" ,                          ""MEDIUM"" ,                          ""LONG""                      ] ,                      ""tooltip"" :   ""tooltip text explaining the setting""                  }              }          }      } } Config format (commented) ​ {    ""Your strategy name"" :   {        ""info"" :   {            ""description"" :   ""Short descriptive text about this strategy"" ,            ""docsUrl"" :   ""https://link.to.docs.com/"" ,            ""market"" :   ""futures"" ,   // set the market type the strategy is for (""spot"", ""futures"", ""delivery"", etc)            ""exchangeBlacklist"" :   [                ""bybit"" ,                ""okex5""            ] ,   // strategy will not show on these exchanges. optional, omit or leave empty if not needed            ""hardcode"" :   {                ""GAIN"" :   ""4000"" ,                ""STRAT_FILENAME"" :   ""yours.js"" ,                ""SOMETHING_ELSE"" :   false            } ,   // hardcoded parameters always get saved to strategy in config.js, settings here should not be user configurable. optional, omit if not needed            ""buyMethod"" :   ""custom"" ,            ""sellMethod"" :   ""custom""        } ,        ""First editor category"" :   {            ""description"" :   ""Short category description"" ,            ""parameters"" :   {                ""SETTING_10"" :   {   // parameter name in config                    ""label"" :   ""Some label"" ,   // readable name in frontend, can be the same as parameter name                    ""defaultValue"" :   ""40"" ,                    ""tooltip"" :   ""tooltip text explaining the setting"" ,   // can be omitted                    ""inputType"" :   ""string""   // creates a text field input                 } ,                  ""SETTING_11"" :   {                    ""label"" :   ""Another label"" ,                    ""defaultValue"" :   ""1"" ,                    ""tooltip"" :   ""tooltip text explaining the setting"" ,                    ""inputType"" :   ""range"" ,    // creates a slider input                    ""step"" :   0.01 ,   // step size precision for slider and input field                    ""rangeLowHigh"" :   [                        1 ,                        5                    ] ,   // slider input boundaries                    ""rangeInput"" :   [                        0.01 ,                        500                    ]   // input field boundaries                } ,                  ""SETTING_12"" :   {                    ""label"" :   ""Again a label"" ,                    ""defaultValue"" :   false ,                    ""tooltip"" :   ""tooltip text explaining the setting"" ,                    ""inputType"" :   ""boolean""   // creates a toggle input                } ,                ""SETTING_13"" :   {                    ""label"" :   ""Options label"" ,                    ""defaultValue"" :   ""MEDIUM"" ,                    ""inputType"" :   ""select"" ,   // creates a dropdown selection input                    ""options"" :   [                        ""NONE"" ,                        ""SHORT"" ,                        ""MEDIUM"" ,                        ""LONG""                    ] ,   // array of options to show in dropdown                    ""tooltip"" :   ""tooltip text explaining the setting""                }            }        } ,        ""Second editor category (you can have many more)"" :   {            ""description"" :   ""Short category description"" ,            ""parameters"" :   {                ""SETTING_20"" :   {                    ""label"" :   ""Some label"" ,                    ""defaultValue"" :   ""40"" ,                    ""tooltip"" :   ""tooltip text explaining the setting"" ,                    ""inputType"" :   ""string""                } ,                ""separator"" :   { } ,   //inserting a separater creates a new row                ""SETTING_21"" :   {                    ""label"" :   ""Another label"" ,                    ""defaultValue"" :   ""1"" ,                    ""tooltip"" :   ""tooltip text explaining the setting"" ,                    ""inputType"" :   ""range"" ,                    ""step"" :   0.01 ,                    ""rangeLowHigh"" :   [                        1 ,                        5                    ] ,                    ""rangeInput"" :   [                        0.01 ,                        500                    ]                } ,                ""separator1"" :   { } ,   // separator names in the same category need to be unique, and always start with 'separator'                ""SETTING_22"" :   {                    ""label"" :   ""Again a label"" ,                    ""defaultValue"" :   false ,                    ""tooltip"" :   ""tooltip text explaining the setting"" ,                    ""inputType"" :   ""boolean""                } ,                ""SETTING_23"" :   {                    ""label"" :   ""Options label"" ,                    ""defaultValue"" :   ""MEDIUM"" ,                    ""inputType"" :   ""select"" ,                    ""options"" :   [                        ""NONE"" ,                        ""SHORT"" ,                        ""MEDIUM"" ,                        ""LONG""                    ] ,                    ""tooltip"" :   ""tooltip text explaining the setting""                }            }        }    } } Previous ROE trailing Next Chart & results Active pairs Pair settings Pair actions Adding new trading pairs Markets overview Manual entry Strategy settings Creating a strategy Presets Copy actions Custom editor presets Config format Config format (commented) Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Quickstart guide ⏱️, https://wiki.gunthy.org/quickstart,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Quickstart guide ⏱️ On this page Gunbot quickstart guide This guide helps you get up and running with Gunbot in just a few minutes. If you have the following data prepared already, you can follow the guide without distraction: Gunbot One:  Order number, used as license key. Get it in the email confirming your order. Gunbot Standard and above:  Gunthy wallet address, the registered Gunthy wallet address for your license. Exchange API key & secret : used to connect to your exchange account,  create  them at your exchange. 1. Install & startup ​ Download Gunbot  Download Gunbot from  gitHub The installation procedure is pretty straightforward, although there are slight differences between operating systems. The general steps are always the same: Unpack the zip file to a new folder.  Depending on your firewall: allow TCP traffic on the port used for the interface (default port: 5000) Start executable file and visit the interface in your browser on:  http://localhost:5000 Detailed steps per operating system ​ Windows ,  macOS ,  Linux 1. Connect to an exchange ​ When you first open the interface, it takes you to the /setup page where you connect to your exchange account and connect the Gunbot license. Make sure to enter valid exchange API credentials, so the bot can connect to that account and place trades. Depending on the license type, the order number or Gunthy wallet address is used as license key. If you make any mistake, the page will warn you that a connection to the exchange was not possible. 2. Select and configure a trading pair ​ Let's say you want to trade USDT-ETH (buying ETH, selling it for a gain in USDT), with a 2500 USDT budget spread over up to 50 buy orders. It takes 3 settings to configure the bot to do this: Select the USDT-ETH trading pair Set the trading limit to 50 (2500 budget / 50 trades) Set max buy count to 50. This stops the bot for buying when the total current ETH holdings are worth 50x trading limit Like the stepgrid strategy name implies, it is a grid-like strategy mainly meant for long term trading. What this means is that the next order is always a predictable price distance away from the previous order. It's a strategy that works well when it is able to do many relatively small trades, and take many small profits. What you want to avoid is the bot running out of funds to place additional buy orders. Learn more about the stepgrid strategy The  stepgrid strategy  is really easy to start with and can cope with almost every market situation. About step sizes ​ When you use auto step size, setting a 'max buy count' of 40 to 60 is considered relatively safe and will usually get the bot through hefty market movements without running out of funds. Extreme market conditions may require a higher max buy count to not run out of funds.  Because auto step size is not completely predictable it is not possible to calculate exactly how possible buy orders there can be between a current market price and the lowest possible price. Using auto step size makes it easy to trade various assets with each their own particular price movements: it will detect tradable ranges automatically.  When you use a manual step size (for example set at as: asset price / planned number of buys), it is possible to exactly calculate how much funds can be spent in a certain price range. This allows you to go for a very safe setup that cannot run out of funds to trade with. Using manual step size requires more planning and monitoring. About starting funds ​ When you start trading a new pair, like USDT-ETH, it is recommended to not own any significant amount of ETH. This way the strategy can build up it's own trade, and make sure it only places profitable sell orders. If you do have assets you for example bought manually and would like the bot to sell, the 'forever bags' option makes the bot ignore any past trading history. Running 'forever bags' with buys disabled can be an interesting way to sell assets in many small parts while the market is moving up.  3. Start trading ​ Hit the  Start Trading  button to start executing the trading strategy you've just configured. Give it a few seconds to fully load and you'll see the trading chart appearing. You're done now. Just make sure to keep your bot running. 4. Monitoring ​ The main chart shows exactly what the bot is doing: Break even : shows the overall break even price of your current holdings, measuring all orders between opening a new trade and selling the last of that trade. Grid DCA target : shows the target for starting buy trailing for the next buy order. Each buy order buys for '1x trading limit'. Grid sell target : shows the target for starting sell trailing for the next sell order. When below break even, each sell order sells '1x trading limit' to take partial profits, above break even it takes profits in bigger increments. There are a few exceptions where trading targets do not show on the chart:  when above break even, a buy step can act as a stop in profit when in no position, it is possible that an (invisible) sell step target leads to a buy order Trading results ​ It is not easy to determine the 'exact current profit' of a grid strategy, because most of the times there will be funds held that still need to get sold in the future.
The failsafe way to monitor your trading results is to look at your total wallet balance on the exchange, at times when the bot just sold off the last holdings. The Gunbot interface shows stats about profit and loss on the dashboard, these are always calculated per order. Buy orders can have a negative result because of the fees paid to place the order. There is no guarantee that these statistics are always valid. 5. Changing settings ​ Strategy settings can be changed while the bot is running, new criteria apply immediately after saving. To change settings for a running pair, edit its strategy settings on the  Trading Settings  page, in the  Active Pairs  tab. To make changes that fundamentally affect the strategy (trading limit, settings that affect step size), wait until a moment there are no remaining holdings left to sell.  tip The 'Stop after next sell' option can be useful to pause the bot after the next complete sell order, so you can adjust settings afterwards. Previous Learn how to use Gunbot Next Changelog Gunbot v25 1. Install & startup Detailed steps per operating system 1. Connect to an exchange 2. Select and configure a trading pair About step sizes About starting funds 3. Start trading 4. Monitoring Trading results 5. Changing settings Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
ARM installation, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/arm,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup ARM installation On this page ARM installation Instructions to install Gunbot on a Raspberry Pi. Instructions ​ Unpack the release .zip file to a new folder. Start running Gunbot with the following command from a terminal in your Gunbot folder:   ./gunthy-arm . Keep this terminal window open. Open  localhost:5000  in a browser on the same system to access the Gunbot GUI. Modern browsers recommended, preferably Chrome or Firefox. The interface will prompt you to create a password, and configure the exchange connection. gunthy-arm  is a 32-bit package, if your device runs a 64-bit OS the following steps in a terminal window might help getting it running: sudo apt-get update  sudo apt-get install crossbuild-essential-armhf  sudo apt-get install libatomic1  sudo apt-get install libatomic1-armhf ./gunthy-arm info Depending on your systems settings, you may need to add a firewall rule to allow for incoming traffic on TCP port 5000. Security notice Gunbot is intended to run on your local system. Making the Gunbot GUI available from outside networks is inherently risky, only do so on your own responsibility. Considerable efforts went into securing the GUI, but please understand that achieving 100% security is not realistic. Previous Linux installation Next How to enable SSL/TLS Instructions Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Download, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/download,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup Download Download Stable versions are always posted on github:  https://github.com/GuntharDeNiro/BTCT Beta and nightly builds are available in the Gunbot announcement channel on Telegram. tip Bookmark the download link, this is where updated versions are posted. Previous How to create a wallet Next Windows installation Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Headless mode, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/headless,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup Headless mode On this page Headless mode This article is meant for power users who want to run Gunbot without using the GUI. This is not an exhaustive overview of all available settings, just a quick overview of how to manually work with the config file. Refer to other parts of the wiki for detailed settings descriptions. Config file system ​ All Gunbot settings are defined in a single file named  config.js . This is where you set up your exchange API keys, add pairs and define your strategies. You can refer to the included  config-js-example.txt  file for an example of a config file with properly defined pairs and all needed parameters for adding each exchange. Throughout this wiki you'll find detailed descriptions for every parameter available in the config file. When the config file is overwritten while Gunbot is running, the changed settings will be loaded automatically. Make sure that no parameters are removed when setting it up. Make sure the JSON-formatting stays intact. If you are unsure about your config file, you can validate it on  https://jsonlint.com  (or a similar JSON validator). The only action that requires using the GUI is updating registered API keys. Info for manual config.js handling If you use the default  config.js  file and configure Gunbot without using the GUI, then make sure to keep only one of these lines in the bot section: orderNumber 
OR
 gunthy_wallet Disabling the GUI ​ To disable the GUI completely, make the following change in the GUI section of  config.js : ""GUI"" :   {     ""enabled"" :   false , Connecting exchanges ​ To connect an exchange, add the relevant settings to the exchange section of  config.js . It looks like this: ""binance"" :   {      ""masterkey"" :   ""registered_api_key"" ,      ""mastersecret"" :   ""secret_for_registered_api_key"" ,      ""key"" :   ""trading_api_key"" ,      ""secret"" :   ""secret_for_trading_api_key"" ,      ""delay"" :   1 ,      ""type"" :   ""binance"" } , Note that you can use a different API key for trading than the registered key. If you don't use a secondary key, you can just enter the registered key in the  key  parameter. Strategies ​ A strategy is defined by giving it a unique name and adding it to the  strategies  section of the config file. This strategy can then be assigned to one or more trading pairs. It looks like this: ""custom-strategy"" :   {      ""BUY_METHOD"" :   ""tssl"" ,      ""BUY_ENABLED"" :   true ,      ""SELL_METHOD"" :   ""tssl"" ,      ""SELL_ENABLED"" :   true ,      ""BUY_LEVEL"" :   1 ,      ""GAIN"" :   0.5 , (many lines cut out to keep this page clean)      ""SL_DISABLE_BUY"" :   false ,      ""COUNT_SELL"" :   9999 ,      ""TRADES_TIMEOUT"" :   0 } , Defining pairs and overrides ​ In the  pairs  section of the config file you can add one or more pairs inside a block specifying the exchange the pairs will run on. Each pair must be assigned an existing strategy, it must be specified if the pair is enabled or not. ""Binance"" :   {      ""BTC-LTC"" :   {          ""strategy"" :   ""SMACROSS"" ,          ""enabled"" :   true ,          ""override"" :   {              ""TRADING_LIMIT"" :   1000          }      } } , The override section allows for pair specific modifications to the assigned strategy. Any strategy parameter can be used as an override.
In the example above the pair will run the strategy named  smacross , using a  TRADING_LIMIT  different from what is defined in the strategy itself. Previous Multiple instances Next Connect license Config file system Disabling the GUI Connecting exchanges Strategies Defining pairs and overrides Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Linux installation, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/linux,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup Linux installation On this page Linux installation Instructions to install Gunbot on a Linux machine. Instructions ​ Unpack the release .zip file to a new folder. Start running Gunbot with the following command from a terminal in your Gunbot folder:   ./gunthy-linux . Keep this terminal window open. Open  localhost:5000  in a browser on the same system to access the Gunbot GUI. Modern browsers recommended, preferably Chrome or Firefox. The interface will prompt you to create a password, and configure the exchange connection. info Depending on your systems settings, you may need to add a firewall rule to allow for incoming traffic on TCP port 5000. Security notice Gunbot is intended to run on your local system. Making the Gunbot GUI available from outside networks is inherently risky, only do so on your own responsibility. Considerable efforts went into securing the GUI, but please understand that achieving 100% security is not realistic. Previous macOS installation Next ARM installation Instructions Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
macOS installation, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/macos,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup macOS installation On this page macOS installation Instructions to install Gunbot on a macOS machine. Instructions ​ Unpack the release .zip file to a new folder. Open the folder, and hold the control key when clicking on the  gunthy-macos  application. This bypasses Gatekeeper restrictions (see tips below) Open  localhost:5001  in a browser on the same system to access the Gunbot GUI. Modern browsers recommended, preferably Chrome or Firefox. The interface will prompt you to create a password, and configure the exchange connection. Tips for common problems System security settings may show that the  gunthy-macos  file is damaged or dangerous.   The easiest way to bypass Gatekeeper is by using the method described in the bottom of this article:   this method Another way to disable the OS restrictions on the Gunbot folder is using this command in a terminal window:  xattr -d -r com.apple.quarantine <foldername> To run on an M1 processor, it can be needed to start a Rosetta terminal ( see step 1 here ) and use that terminal to launch Gunbot. info Depending on your systems settings, you may need to add a firewall rule to allow for incoming traffic on TCP port 5000. Security notice Gunbot is intended to run on your local system. Making the Gunbot GUI available from outside networks is inherently risky, only do so on your own responsibility. Considerable efforts went into securing the GUI, but please understand that achieving 100% security is not realistic. Alternate installation steps ​ The following steps use the built in  Terminal  program to do a few one time tasks before running Gunbot. 1. Move the downloaded zip file to a folder where you want to unpack it ​ 2. Unpack the file ​ After you've done this, type  cd macos  to enter the actual program folder 3. Remove program restrictions (to make sure macos allows running it) ​ Type  xattr -d -r com.apple.quarantine <foldername>  to remove gatekeeper restrictions. Instead of  <foldername> , use the full path to the folder where you have unpacked Gunbot. 4. Make sure the gunthy-macos file is executable ​ Type  chmod +x gunthy-macos  to make sure it can be ran as a program. 5. Start the bot ​ Type  ./gunthy-macos  to start running the software. You can now access it in your browser using this link:  http://localhost:5000 Previous Windows installation Next Linux installation Instructions Alternate installation steps Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Multiple instances, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/multiple-instance,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup Multiple instances Running multiple instances To run multiple instances of Gunbot, just make a copy of its folder for each instance and make sure the following settings parameters are unique for each instance: port  - both in the GUI and ws section clientport  - in the ws section TOKEN  in the bot section (this is the token for Telegram notifications) The GUI of each instance will be available on localhost through the specified port number. info Use a text editor like Notepad++ to edit the  config.js  file to make the required changes described above. Previous How to enable SSL/TLS Next Headless mode Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
How to enable SSL/TLS, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/ssl,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup How to enable SSL/TLS On this page How to enable SSL/TLS Instructions to run the Gunbot browser interface over a secure connection. To run the GUI on https, you'll need a certificate. Below are instructions to generate a self-signed certificate on Windows, Mac and Linux.
Make sure to set the  https  parameter in  config.js  to  true  to enable https after creating a certificate. When connecting to the GUI for the first time, you'll probably encounter a browser warning due to the use of a self-signed certificate. Create a permanent exception to not get warned again on the same browser. info Certificates from common SSL providers work too. Just make sure to rename the certificate files to how they are named in your config, then place the files in the Gunbot folder. Windows ​ Download  and install OpenSSL for windows Go to the following folder: C:\Program Files\OpenSSL-Win64\bin Right click ""openssl"" and run as administrator, a cmd window opens Run the following command:  req -newkey rsa:2048 -nodes -keyout localhost.key -x509 -days 365 -out localhost.crt  (you'll be asked to fill in some details, you can do this or leave the fields blank by hitting enter several times) Copy the  localhost.key  and  localhost.crt  from C:\OpenSSL-Win64\bin to your Gunbot folder Mac ​ Open a terminal window and navigate to your Gunbot folder Run the following command  openssl req -newkey rsa:2048 -nodes -keyout localhost.key -x509 -days 365 -out localhost.crt  and make sure to enter the country code field. The rest can be left blank Linux ​ Open a terminal window and navigate to your Gunbot folder. Possibly you'll need to install openssl through your package manager first. Run the following command  openssl req -newkey rsa:2048 -nodes -keyout localhost.key -x509 -days 365 -out localhost.crt  and make sure to enter the country code field. The rest can be left blank. Previous ARM installation Next Multiple instances Windows Mac Linux Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Windows installation, https://wiki.gunthy.org/setup-and-general-settings/installation-and-startup/windows,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings Installation & startup Download Windows installation macOS installation Linux installation ARM installation How to enable SSL/TLS Multiple instances Headless mode Global settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Config marketplace Setup & general settings Installation & startup Windows installation On this page Windows installation Instructions to install Gunbot on a Windows machine. Instructions ​ Unpack the release .zip file to a new folder Start running Gunbot by double clicking  gunthy-win.exe Open  localhost:5000  in a browser on the same system to access the Gunbot GUI. Modern browsers recommended, preferably Chrome or Firefox. The interface will prompt you to create a password, and configure the exchange connection. Unblocking ​ On some Windows installations the file will be blocked by default and won't open. If that happens, right click gunthy-win.exe and open the properties dialog. Then use the unblock option: info Depending on your systems settings, you may need to add a firewall rule to allow for incoming traffic on TCP port 5000. Security notice Gunbot is intended to run on your local system. Making the Gunbot GUI available from outside networks is inherently risky, only do so on your own responsibility. Considerable efforts went into securing the GUI, but please understand that achieving 100% security is not realistic. Previous Download Next macOS installation Instructions Unblocking Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
About Gunbot strategies, https://wiki.gunthy.org/trading-strategy-options/about-gunbot-strategies,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options About Gunbot strategies On this page About Gunbot strategies Trading methods ​ A strategy in Gunbot is a collection of settings that can be assigned to one or more trading pairs. These pairs will then trade according to the assigned settings. The most important factors of a strategy are the buy and sell methods, these define the main logic for buy and sell orders. Gunbot has many different methods for executing buy and sell orders. These can be freely combined, where one method is being used for buying and another for selling. Each method, and their variants for futures trading, has it's own wiki article describing the exact logic and explaining all available strategy parameters. Available buy and sell methods ​ note This page describes trading methods that can be freely combined.  Method Description (short) adx Average Directional Index:  uses the ADX indicator to trade only when trends are strong enough. atrts Average True Range Trailing Stop:  uses the ATR indicator to measure volatility changes and trade on a trailing stop. bb Bollinger Bands:  buy and sell at configurable points between the lower and upper Bollinger Bands. bbta Bollinger Bands (TA):  buy and sell after a reentry at configurable points between the lower and upper Bollinger Bands. emaspread EMA spread:  uses the spread between slow and fast EMA to trade when price direction changes. emotionless Emotionless:  ""just works"" strategy. Hardly any configurable parameters. Perfect for novice traders. gain Gain:  buy at a percentage below EMA, sell when your set gain is reached. ichimoku Ichimoku:  trading algorithm based on the Ichimoku cloud indicator. macd Moving average convergence/divergence:  uses the MACD indicator to trade when momentum changes. macdh Moving average convergence/divergence histogram:  uses the MACD histogram to trade when momentum changes. pp Pingpong:  set a fixed buy and sell price, perfect for coins that stay within a predictable price range. stepgain Stepgain:  like  gain  , but after hitting initial buy or sell level a trend watcher will check if prices will further decrease or increase - making sure to only buy or sell when the trend reverses. smacross SMA cross:  uses crossings of fast and slow SMA to trade when price direction changes. supportresistance Support / Resistance:  buy at support, sell at resistance. tsa Time series analysis:  tries to predict future prices and trades on predicted trend reversals. tssl Trailing Stop / Stop Limit:  uses a moving range around market prices for buying and selling, trailing optimal buy and sell levels. Keep in mind that not all combinations of buy/sell methods are a good match to use together with trailing or certain confirming indicators. For example using  macd , which triggers only in cycles where the MACD line crosses the signal line, together with Stochastic as confirming indicator (in cross mode, which also only triggers in cycles with an indicator cross) is a bad combination because both MACD and Stochastic must cross in the same cycle - very much reducing your opportunities for a trade. Protections ​ Trading methods have a few common protections: Some methods will only buy once, other can buy multiple times. This is called ""pyramid buying"". ""Buy level"" is a setting that protects against buying above the lowest EMA. The equivalents to this for futures trading are called ""Long level"" and ""Short level"". Many methods won't place a strategy sell order below the break-even point, in some methods this is optional. the ""grid"" strategies come with their own built-in protections, these are generally not configurable. See the tables below for details about protections/constraints per method. Protections for regular trading (spot) ​ Method Allows for pyramid buying? Protection against buying above EMA? (""buy level"") Protection against selling below break-even point? (""gain"") adx no no optional atrts no no yes bb no yes yes bbta no no optional emaspread no no optional emotionless no yes yes gain no yes yes ichimoku no no optional macd yes no optional macdh yes no optional pp no no optional smacross yes no optional stepgain no yes yes supportresistance yes no yes tsa no no yes tssl no yes yes Protections for futures trading ​ Method Requires  LONG_LEVEL  /  SHORT_LEVEL  confirmation? adx no atrts no bb yes bbta no emaspread no emotionless yes gain yes ichimoku no macd no macdh no pp no smacross no stepgain yes tsa no tssl yes Previous Chart & results Next adx Trading methods Available buy and sell methods Protections Protections for regular trading (spot) Protections for futures trading Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
adx, https://wiki.gunthy.org/trading-strategy-options/spot/adx,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies adx On this page adx This strategy is based on  ADX , enabling Gunbot to buy when prices are moving up and ADX indicates a strong uptrend. Sell orders are placed when prices move down and a strong downtrend is measured. To refine this strategy, other indicators are available to be used as confirmation for both buying and selling. For example you could have Gunbot buy when prices are moving up with a strong trend and RSI is 40 or lower. danger Gain protection is optional for this strategy. Be aware that this can lead to sell orders below your break-even point. Trading example ​ Example of how trading with this strategy can perform.   Details and settings . How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. Strategy parameters ​ Following settings options are available for  adx  and can be set in the strategy configurator of the GUI or the strategies section of the  config.js  file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  adx . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  adx  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  adx  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ Relevant indicators for trading with ADX These settings have a direct effect on trading with  adx . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD ADX Level ​ Description Values Order types Name Sets the minimum trend level that needs to be reached for orders to be allowed. When set to 25, trades will be placed as soon as ADX is 25 or higher. Values:  numerical, ranging between 1 and 99. Default value:  25 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ADX_LEVEL DI Period ​ Description Values Order types Name Sets the number of candles used to calculate ADX. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  DI_PERIOD TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ADX_ENABLED Placeholder. ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous About Gunbot strategies Next atrts Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled NBA Take Buy TBuy Range Buy Level Sell settings Sell enabled Take Profit TP Range TP Profit Only Double Check Gain Gain Indicator settings Period ADX Level DI Period TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
atrts, https://wiki.gunthy.org/trading-strategy-options/spot/atrts,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies atrts On this page atrts The Average True Range ( ATR ) is an indicator that measures volatility. This strategy uses ATR to calculate trailing stops to provide buy and sell signals when volatility increases or decreases and crosses the trailing stop. Using the configurable  ATRX  multiplier for ATR, a lower and upper limit are calculated. The lower limit, called ATR short, is calculated by substracting the result of  ATRX  from next rounds bid. The upper limit, called ATR long, is calculated by adding the result of  ATRX  to next rounds ask. A buy order is placed when the ask price crosses up ATR long. A sell order is placed when the bid price crosses under ATR short and price is above the break-even point. As ATR does not provide information about price direction, it is strongly recommended to use an additional momentum indicator like RSI. Trading example ​ Example of how trading with this strategy can perform.   Details and settings Strategy parameters ​ Following settings options are available for  atrts  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  atrts . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  atrts  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  atrts  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ Relevant indicators for trading with ATRTS These settings have a direct effect on trading with  atrts . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD ATRx ​ Description Values Order types Name This value defines the multiplier used for calculation of the lower and upper limits for trading with  atrts When set to 5, ATR gets multiplied by 5 and the result gets subtracted from next rounds bid & added to next rounds ask to set the limits. Values:  numerical - represents a multiplier for ATR. Default value:  0.5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ATRX ATR Period ​ Description Values Order types Name The number of periods used for calculating ATR. Values:  numerical, represents a number of periods. Default value:  14 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  ATR_PERIOD TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. Because this strategy already trails, it is not recommended to use additional price trailing for strategy buy and sell orders. Trades will only happen when both the trailing stop and strategy stop happen in the same round. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. GAIN Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous adx Next bbta Trading example Strategy parameters Buy settings Buy enabled NBA Take Buy TBuy Range Buy Level Sell settings Sell enabled Take Profit TP Range TP Profit Only Double Check Gain Gain Indicator settings Period ATRx ATR Period TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
bb, https://wiki.gunthy.org/trading-strategy-options/spot/bb,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies bb On this page bb Bollinger Bands  indicate relative high and low prices, using this information you can buy relatively low and sell relatively high. With this strategy you can configure at which percentage from the lower Bollinger Band Gunbot should buy, and at which percentage from the upper Bollinger Band a sell order should be placed. Orders are placed as soon as price meets the set distance from the Bollinger Bands. Trading example ​ Example of how trading with this strategy can perform.   Details and settings . How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. Note that this description is kept simple intentionally. In reality prices also need to be below   BUY_LEVEL   before a buy is triggered. Strategy parameters ​ Following settings options are available for  bb  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  bb . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  adx  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Buy Level ​ Description Values Order types Name This sets the target for buying at a percentage below the lowest EMA. Additionally price must reach  LOW_BB . When you set this to 1, buy orders will only be placed when the current price is at least 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  bb  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Gain ​ Description Values Order types Name This sets the minimum target for selling. Gunbot will sell once price reaches the set percentage above the break-even point. and  HIGH_BB  is reached. If you want to have at least 2% profit per trade, set this to 2. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name This is an extra check that looks at your recent trading history to verify  GAIN  will be reached before placing a sell order. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Indicator settings ​ Relevant indicators for trading with bb. These settings have a direct effect on trading with  bb . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Low BB ​ Description Values Order types Name This sets the target for buying. Negative values are allowed. The bot will buy when price hits the set percentage from the lower Bollinger Band and the price is below the entry point as defined by  BUY_LEVEL . When set to 0, the lower Bollinger Band is the target. When set to 30, the target is 30% above the lower Bollinger Band - the upper band is at 100% from the lower band. Negative values are allowed. Values:  numerical – represent a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LOW_BB High BB ​ Description Values Order types Name This sets the target for selling. Negative values are allowed. The bot will sell when price hits the set percentage from the upper Bollinger Band and  GAIN  is reached. When set to 0, the upper Bollinger Band is the target (well, almost). When set to 30, the target is 30% under the upper Bollinger Band - the lower band is at 100% from the upper band. Negative values are allowed. Values:  numerical – represent a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy DCA buy (when using HIGHBB option for DCA) RT buyback RT sell Close Stop limit Strategy buy Parameter name in  config.js :  HIGH_BB SMA Period ​ Description Values Order types Name This defines the number of periods used for calculating Bollinger Bands. Values:  numerical – represents a number of candlesticks. Default value:  50 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  SMAPERIOD Standard Deviation ​ Description Values Order types Name This value defines the multiplier used for calculating Bollinger Bands. Values:  numerical (recommended: between 1.9 and 2.1) - represents a multiplier value used in the bollinger bands calculation. Default value:  2 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  STDV Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. ICHIMOKU_PROTECTION Placeholder KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous bbta Next emaspread Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled Buy Level NBA Take Buy TBuy Range Sell settings Sell enabled Gain Take Profit TP Range TP Profit Only Double Check Gain Indicator settings Period Low BB High BB SMA Period Standard Deviation Slow EMA Medium EMA TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
bbta, https://wiki.gunthy.org/trading-strategy-options/spot/bbta,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies bbta On this page bbta Bollinger Bands  indicate relative high and low prices, using this information you can buy relatively low and sell relatively high. With this strategy you can configure at which percentage from the lower Bollinger Band Gunbot should buy, and at which percentage from the upper Bollinger Band a sell order should be placed. Orders are placed after prices first move outside the set level, then move back in. danger Gain protection is optional for this strategy. Be aware that this can lead to sell orders below your break-even point. Trading example ​ Example of how trading with this strategy can perform.   Details and settings How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. Strategy parameters ​ Following settings options are available for  bbta  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  bbta . Accepted values are all strategy names as listed  here. Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  bbta  as buy method. Take Buy is only available for Gunbot Standard and higher. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  bbta  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ Relevant indicators for trading with BBTA These settings have a direct effect on trading with  bbta . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Low BB ​ Description Values Order types Name This sets the target for buying. Negative values are allowed. The bot will buy after prices first move under the set % from the lower Bollinger Band, then cross over the set level. When set to 0, the lower Bollinger Band is the target. When set to 30, the target is 30% above the lower Bollinger Band - the upper band is at 100% from the lower band. Negative values are allowed. Values:  numerical – represents a percentage. Default value:  0 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  LOW_BB High BB ​ Description Values Order types Name This sets the target for selling. Negative values are allowed. The bot will sell after prices first move over the set % from the upper Bollinger Band, then cross down the set level. Additionally  GAIN  must be reached. When set to 0, the upper Bollinger Band is the target. When set to 30, the target is 30% under the upper Bollinger Band - the lower band is at 100% from the upper band. Negative values are allowed. Values:  numerical – represents a percentage. Default value:  0 Affects Does not affect Strategy sell RT buy DCA buy (when using HIGHBB option for DCA) RT buyback RT sell Close Stop limit Strategy buy Parameter name in  config.js :  HIGH_BB SMA Period ​ Description Values Order types Name This defines the number of periods used for calculating Bollinger Bands. Values:  numerical – represents a number of candlesticks. Default value:  50 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  SMAPERIOD Standard Deviation ​ Description Values Order types Name This value defines the multiplier used for calculating Bollinger Bands. Values:  numerical (recommended: between 1.9 and 2.1) - represents a multiplier value used in the bollinger bands calculation. Default value:  2 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using HIGHBB option for DCA) RT sell Close Stop limit Parameter name in  config.js :  STDV Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 TrailMe settings ​ tip This is not available for Gunbot Starter. Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. Because this strategy trades on crosses happening in a single cycle, it is not recommended to use additional trailing for normal buy and sell orders. Trades will only happen when both the trailing stop and strategy cross happen in the same round. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ tip This is not available for Gunbot Starter. Confirming indicators Dollar cost avg settings ​ tip This is not available for Gunbot Starter. DCA options Reversal trading settings ​ tip This is not available for Gunbot Starter. Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous atrts Next bb Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled NBA Take Buy TBuy Range Buy Level Sell settings Sell enabled Take Profit TP Range TP Profit Only Double Check Gain Gain Indicator settings Period Low BB High BB SMA Period Standard Deviation Slow EMA Medium EMA TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
emaspread, https://wiki.gunthy.org/trading-strategy-options/spot/emaspread,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies emaspread On this page emaspread This strategy is based on  EMA , enabling Gunbot to buy when prices start moving up - indicated by the spread between fast and slow EMA decreasing. Selling takes places when prices start moving down again, indicated by the spread decreasing again. The spread is calculated each cycle by subtracting the lowest EMA value from the highest EMA. To refine this strategy, other indicators are available to be used as confirmation for both buying and selling. For example you could have Gunbot buy when the EMA spread starts decreasing and RSI is below 30. danger Gain protection is optional for this strategy. Be aware that this can lead to sell orders below your break-even point. Trading example ​ Example of how trading with this strategy can perform.   Details and settings . How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. Strategy parameters ​ Following settings options are available for  emaspread  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  emaspread . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  emaspread  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  emaspread  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ Relevant indicators for trading with EMA spread These settings have a direct effect on trading with  emaspread . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 EMAx ​ Description Values Order types Name Sets the minimum percentage difference between slow and fast EMA for  emaspread . When set to 1, the spread must reach at least 1% before  emaspread  can trigger a buy or sell. Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  EMAx TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. Because this strategy trades in rounds where emaspread decreases in a specific cycle, it is not recommended to use additional trailing for normal buy and sell orders. Trades will only happen when both the trailing stop and strategy signal happen in the same round. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. emaspread Placeholder. FAST_SMA Placeholder. ICHIMOKU_PROTECTION Placeholder. HIGH_BB Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous bb Next emotionless Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled NBA Take Buy TBuy Range Buy Level Sell settings Sell enabled Take Profit TP Range TP Profit Only Double Check Gain Gain Indicator settings Period Slow EMA Medium EMA EMAx TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
emotionless, https://wiki.gunthy.org/trading-strategy-options/spot/emotionless,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies emotionless On this page emotionless The Emotionless strategy is fully tuned and ready to use, even for novice traders! It's meant to be a relatively safe strategy, with modest but steady gains. With this strategy, you don't need to think about setting the right or best parameters: it's all there already. You only need to set the basics like your trading limit and choose on which pairs you want to trade. Optionally, you can increase  GAIN  slightly. The specifics for how this trading strategy exactly works will not be disclosed. Some extra features are available for users of Gunbot Standard edition and higher. These are marked below. Strategy parameters ​ Following settings options are available for  emotionless  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  emotionless . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  emotionless  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Buy Level ​ Description Values Order types Name This sets the target for buying at a percentage below the lowest EMA. When you set this to 1, the target for buy orders is 1% below the currently lowest EMA. Due to trailing, it is possible Gunbot will buy slightly higher than the target. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  emotionless  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Gain ​ Description Values Order types Name This sets the minimum target for selling. Gunbot will sell once price reaches the set percentage above the break-even point. and  HIGH_BB  is reached. If you want to have at least 2% profit per trade, set this to 2. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Double Check Gain ​ Description Values Order types Name This is an extra check that looks at your recent trading history to verify  GAIN  will be reached before placing a sell order. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Indicator settings ​ Relevant indicators for trading with emotionless. These settings have a direct effect on trading with  emotionless . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 TrailMe settings ​ tip This is not available for Gunbot Starter. These settings can be used, but they are not tested and not intended for use with emotionless. Use at your own risk. Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ tip This is not available for Gunbot Starter. Confirming indicators Dollar cost avg settings ​ tip This is not available for Gunbot Starter. DCA options Reversal trading settings ​ These settings can be used, but they are not tested and not intended for use with emotionless. Use at your own risk. tip This is not available for Gunbot Starter. Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TAKE_BUY Placeholder. TAKE_PROFIT Placeholder. TBUY_RANGE Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TP_PROFIT_ONLY Placeholder. TP_RANGE Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous emaspread Next gain Strategy parameters Buy settings Buy enabled Buy Level NBA Sell settings Sell enabled Gain Double Check Gain Indicator settings Period Slow EMA Medium EMA TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
gain, https://wiki.gunthy.org/trading-strategy-options/spot/gain,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies gain On this page gain This strategy is based on  EMA , enabling Gunbot to buy when the price reaches a point below the lowest EMA and sell as soon as a set percentage of gain is reached. To refine this strategy, other indicators are available to be used as confirmation for both buying and selling. For example you could have Gunbot buy when both the price is below EMA and RSI is 30 or lower. Trading example ​ Example of how trading with the gain strategy can perform.   Details and settings How to work with this strategy ​ The infographic below describes what triggers trades with this strategy. Strategy parameters ​ Following settings options are available for  gain  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  gain . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  gain  as buy method. Take Buy is only available for Gunbot Standard and higher. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED Buy Level ​ Description Values Order types Name This sets the target for buying at a percentage below the lowest EMA. When you set this to 1, buy orders will only be placed when the current price is at least 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  bb  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Gain ​ Description Values Order types Name This sets the target for selling. Gunbot will sell once price reaches the set percentage above the break-even point. If you want to have at least 2% profit per trade, set this to 2. A sell order will be placed when the current price is at least 2% higher than the average bought price. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name This is an extra check that looks at your recent trading history to verify  GAIN  will be reached before placing a sell order. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Indicator settings ​ Relevant indicators for trading with gain. These settings have a direct effect on trading with  gain , because  BUY_LEVEL  is dependant on EMA. Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Slow EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your slow EMA. The closing price for each candle is used in the slow EMA calculation. For example: when you set  PERIOD  to 5, and want to use 2h for slow EMA – you need to set  EMA1  to 24 (24  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  16 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA1 Medium EMA ​ Description Values Order types Name Set this to the amount of candlesticks you want to use for your medium EMA. The closing price for each candle is used in the fast EMA calculation. For example: when you set  PERIOD  to 5, and want to use 1h for medium EMA – you need to set  EMA2  to 12 (12  *  5 mins). Values:  numerical – represents a number of candlesticks. Default value:  8 Affects Does not affect Strategy buy RT buy RT buyback RT sell Close Stop limit Strategy sell DCA buy Parameter name in  config.js :  EMA2 TrailMe settings ​ tip This is not available for Gunbot Starter. Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ tip This is not available for Gunbot Starter. Confirming indicators Dollar cost avg settings ​ tip This is not available for Gunbot Starter. DCA options Reversal trading settings ​ tip This is not available for Gunbot Starter. Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. DISPLACEMENT Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_PERIOD Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_SENTIMENTS Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SENKOUSPAN_PERIOD Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_PERIOD Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous emotionless Next ichimoku Trading example How to work with this strategy Strategy parameters Buy settings Buy enabled Buy Level NBA Take Buy TBuy Range Sell settings Sell enabled Gain Take Profit TP Range TP Profit Only Double Check Gain Indicator settings Period Slow EMA Medium EMA TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
ichimoku, https://wiki.gunthy.org/trading-strategy-options/spot/ichimoku,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options About Gunbot strategies Spot trading strategies adx atrts bbta bb emaspread emotionless gain ichimoku macd macdh pp smacross spotgridadvanced spotgrid stepgain stepgrid stepgridhybrid stepgridscalp supportresistance tsa tssl Futures trading strategies Custom strategies Balance settings Confirming indicators Dollar Cost Avg (DCA) Reversal Trading (RT) TrailMe Misc settings Extra modules Various Troubleshooting Config marketplace Trading strategy options Spot trading strategies ichimoku On this page ichimoku Using the  Ichimoku  indicator, you can setup Gunbot to trade when a complete candle crosses Kumo, Tenkan-Sen or Kijun-Sen. You can configure which line should be used for buy and/or sell orders. danger Gain protection is optional for this strategy. Be aware that this can lead to sell orders below your break-even point. How to work with this strategy ​ Buying ​ A buy order is placed when the current candle goes completely below Kumo, Tenkan-Sen or Kijun-Sen. You can configure which line should be used for buy orders. Selling ​ A sell order is placed when the current candle goes completely above Kumo, Tenkan-Sen or Kijun-Sen. You can configure which line should be used for sell orders. Using an additional momentum indicator is recommended. Strategy parameters ​ Following settings options are available for  ichimoku  and can be set in the strategy configurator of the GUI or the strategies section of the config.js file. These settings are global and apply to all pairs running this strategy. When you want a specific parameter to be different for one or more pairs, use an override at the pair level. Using the  BUY_METHOD  and  SELL_METHOD  parameters you can combine different methods for buying and selling. This strategy page assumes both  BUY_METHOD  and  SELL_METHOD  are set to  ichimoku . Accepted values are all strategy names as listed  here . Buy settings ​ Buy settings are the primary trigger for buy orders. These parameters control the execution of buy orders when using  ichimoku  as buy method. Buy enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing buy orders. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell DCA buy Stop limit RT buy Close RT buyback RT sell Parameter name in  config.js :  BUY_ENABLED NBA ​ Description Values Order types Name ""Never Buy Above"". Use this to only allow buy orders below the last sell rate. This sets the minimum percentage difference between the last sell order and the next buy. The default setting of 0 disables this option. When set to 1, Gunbot will only place a buy order when the strategy buy criteria meet and price is at least 1% below the last sell price. Values:  numerical, represents a percentage. Default value:  0 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  NBA Take Buy ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any buy chance between the strategy entry point and your setting for  TBUY_RANGE . As soon as the ask price drops below the upper border of this range (called ""Take Buy""), it will trail down with a range of  TBUY_RANGE  and place a buy order as soon as the ask price crosses up ""Take Buy"". Confirming indicators in use are respected. Normal strategy buy orders are still possible while using  TAKE_BUY . This option should not be used together with reversal trading. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TAKE_BUY TBuy Range ​ Description Values Order types Name This sets the buy range for  TAKE_BUY . When set to 0.5, the initial trailing stop is set 0.5% above the entry point defined by  BUY_LEVEL . Values:  numerical, represents a percentage. Default value:  0.5 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  TBUY_RANGE Buy Level ​ Description Values Order types Name This sets entry point for  TAKE_BUY  at a percentage below the lowest EMA. When you set this to 1, the entry point will be set 1% below the currently lowest EMA. Values:  numerical, represents a percentage. Default value:  1 Affects Does not affect Strategy buy Strategy sell Stop limit Close RT sell DCA buy RT buy RT buyback Parameter name in  config.js :  BUY_LEVEL Sell settings ​ Sell settings are the primary trigger for sell orders. These parameters control the execution of sell orders when using  ichimoku  as sell method. Sell enabled ​ Description Values Order types Name Set this to false to prevent Gunbot from placing sell orders. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy Stop limit RT buy RT sell RT buyback Close DCA buy Parameter name in  config.js :  SELL_ENABLED Take Profit ​ Description Values Order types Name With this setting enabled, Gunbot will try to take any possible profit between the break-even point and your strategy exit point. This can be useful, for example, on days where the markets move very slowly. It works by trailing prices upwards between the break-even point and the strategy exit point, with a configurable range for trailing:  TP_RANGE . A sell order will be placed when the trailing stop limit is hit or strategy sell conditions are reached. Confirming indicators in use are respected. Sells at minimal loss are possible when using  TAKE_PROFIT , acting as a sort of mini stop loss. This option should not be used together with reversal trading or  DOUBLE_CHECK_GAIN Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TAKE_PROFIT TP Range ​ Description Values Order types Name This sets the sell range for  TAKE_PROFIT . When set to 0.5, the initial trailing stop is set 0.5% below the break-even point. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_RANGE TP Profit Only ​ Description Values Order types Name Enable this to only allow sell orders above the break-even point. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TP_PROFIT_ONLY Double Check Gain ​ Description Values Order types Name Disable this to allow sell orders below the break-even point. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  DOUBLE_CHECK_GAIN Gain ​ Description Values Order types Name This sets the minimum target for selling when  DOUBLE_CHECK_GAIN  is enabled. Values:  numerical – represents a percentage. Default value:  0.5 Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  GAIN Indicator settings ​ Relevant indicators for trading with ichimoku. These settings have a direct effect on trading with  ichimoku . Period ​ Description Values Order types Name This sets the candlestick period used for trading, this affects all indicators within the strategy. Only use  supported values . Setting a short period allows you to trade on shorter trends, but be aware that these will be noisier than longer periods. Values:  numerical– represents candlestick size in minutes. Default value:  15 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback DCA buy (when using an indicator to trigger) RT sell Close Stop limit Parameter name in  config.js :  PERIOD Tenkan Period ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating Tenkan-sen. This parameter is for what's called ""conversion line"" on TradingView. Values:  numerical, represents a number of candlestick periods. Default value:  9 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  TENKAN_PERIOD Kijun Period ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating Kijun-sen. This parameter is for what's called ""base line"" on TradingView. Values:  numerical, represents a number of candlestick periods. Default value:  26 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  KIJUN_PERIOD Senkouspan Period ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for calculating Senkou span. This parameter is for what's called ""Lead"" on TradingView. Values:  numerical, represents a number of candlestick periods. Default value:  52 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  SENKOUSPAN_PERIOD Displacement ​ Description Values Order types Name Set this to the number of candlestick periods you want to use for displacing Kumo and Chikou-span. Values:  numerical, represents a number of candlestick periods. Default value:  26 Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  DISPLACEMENT Kumo Buy ​ Description Values Order types Name Enable this to buy when the last candle moves completely below Kumo. Do not enable multiple buy triggers. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  KUMO_BUY Tenkan Buy ​ Description Values Order types Name Enable this to buy when the last candle moves completely below Tenkan-sen. Do not enable multiple buy triggers. Values:  true or false Default value:  true Affects Does not affect Strategy buy Strategy sell RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TENKAN_BUY Kijun Buy ​ Description Values Order types Name Enable this to buy when the last candle moves completely below Kijun-sen. Do not enable multiple buy triggers. Values:  true or false Default value:  false Affects Does not affect Strategy buy Strategy sell RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  KIJUN_BUY Kumo Sell ​ Description Values Order types Name Enable this to sell when the last candle moves completely above Kumo. Do not enable multiple sell triggers. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  KUMO_SELL Tenkan Sell ​ Description Values Order types Name Enable this to sell when the last candle moves completely above Tenkan-sen. Do not enable multiple buy triggers. Values:  true or false Default value:  true Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  TENKAN_SELL Kijun Sell ​ Description Values Order types Name Enable this to sell when the last candle moves completely above Kijun-sen. Do not enable multiple sell triggers. Values:  true or false Default value:  false Affects Does not affect Strategy sell Strategy buy RT buy RT buyback RT sell Close DCA buy Stop limit Parameter name in  config.js :  KIJUN_SELL Kumo Sentiments ​ Description Values Order types Name Enable this to only allow trades when they are confirmed by the cloud. Set this to false to ignore Kumu trends. When enabled, buy orders can only happen above Kumo, sell orders can only happen below Kumo. Values:  true or false Default value:  true Affects Does not affect Strategy sell RT buy Strategy buy RT buyback RT sell Close Stop limit DCA buy Parameter name in  config.js :  KUMO_SENTIMENTS TrailMe settings ​ Parameters to configure additional trailing for various types of orders. Trailing works just like it does for the TSSL strategy, the difference being the starting point of trailing. Orders resulting from trailing are only placed when the main strategy criteria are met, and confirming indicators (if any) allow the order. All these conditions must occur in the same cycle. The strategy requirements for this strategy are that the last candle is completely above/below the set ichimoku line, this leaves room for additional trailing. TrailMe settings Balance settings ​ Balance settings Confirming indicator + advanced indicator settings ​ Confirming indicators Dollar cost avg settings ​ DCA options Reversal trading settings ​ Reversal trading options Misc settings ​ Misc settings Placeholders ​ The following parameters in  config.js  have no function for this strategy and act as placeholder. Parameter Description ATRX Placeholder. ATR_PERIOD Placeholder. BUYLVL1 Placeholder. BUYLVL2 Placeholder. BUYLVL3 Placeholder. BUYLVL Placeholder. BUY_RANGE Placeholder. FAST_SMA Placeholder. HIGH_BB Placeholder. ICHIMOKU_PROTECTION Placeholder. KIJUN_CLOSE Placeholder. KIJUN_STOP Placeholder. KUMO_CLOSE Placeholder. KUMO_STOP Placeholder. LEVERAGE Placeholder. LONG_LEVEL Placeholder. LOW_BB Placeholder. MACD_LONG Placeholder. MACD_SHORT Placeholder. MACD_SIGNAL Placeholder. MAKER_FEES Placeholder. MEAN_REVERSION Placeholder. PP_BUY Placeholder. PP_SELL Placeholder. PRE_ORDER_GAP Placeholder. PRE_ORDER Placeholder. RENKO_ATR Placeholder. RENKO_BRICK_SIZE Placeholder. RENKO_PERIOD Placeholder. ROE_CLOSE Placeholder. ROE_LIMIT Placeholder. ROE_TRAILING Placeholder. ROE Placeholder. SELLLVL1 Placeholder. SELLLVL2 Placeholder. SELLLVL3 Placeholder. SELLLVL Placeholder. SELL_RANGE Placeholder. SHORT_LEVEL Placeholder. SLOW_SMA Placeholder. TENKAN_CLOSE Placeholder. TENKAN_STOP Placeholder. TSSL_TARGET_ONLY Placeholder. USE_RENKO Placeholder. Previous gain Next macd How to work with this strategy Buying Selling Strategy parameters Buy settings Buy enabled NBA Take Buy TBuy Range Buy Level Sell settings Sell enabled Take Profit TP Range TP Profit Only Double Check Gain Gain Indicator settings Period Tenkan Period Kijun Period Senkouspan Period Displacement Kumo Buy Tenkan Buy Kijun Buy Kumo Sell Tenkan Sell Kijun Sell Kumo Sentiments TrailMe settings Balance settings Confirming indicator + advanced indicator settings Dollar cost avg settings Reversal trading settings Misc settings Placeholders Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Critical errors, https://wiki.gunthy.org/troubleshooting/critical-errors,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Troubleshooting Critical errors Bot does not trade Reset password Restore backup Config marketplace Troubleshooting Critical errors On this page Critical errors When there is a problem that might need attention, Gunbot usually shows an error notification in the GUI. Some errors are only visible in the console window running Gunbot. For troubleshooting purposes, recent logs are stored in the /logs folder. After Gunbot is closed, logfiles can be read with a text editor like Notepad++. This page describes common problems and their possible solutions. Tips for troubleshooting Always completely close and restart Gunbot before trying to resolve a critical issue.
Reboot your computer when you are unsure if you've completely closed Gunbot. When resolving an isse that might be related to API rate limiting, stop running Gunbot for at least 30 minutes before trying to solve the problem. Errors when starting Gunbot ​ The following errors are  critical  and will prevent trading, they indicate Gunbot could not properly start or connect to an exchange. INVALID LICENSE FOR (exchange) Please contact your reseller! ​ Reason:  master key is not registered Possible solutions: Double check if your master key and secret are correct and do not start or end with a blank space. Verify that you are running the correct edition of Gunbot. If the problem persists: contact your reseller. Unable to connect to exchange ​ Reason:  Various, most often a problem with time sync or pair naming. Possible solutions: Double check if your master key and secret are correct and do not start or end with a blank space. Check if your system clock is synced with an internet time server.  Tool for Windows  /  Info for Linux Make sure both a valid master key and key are present in your config. Make sure your pairs actually exist on the exchange and conform to Gunbot pair syntax. Increase exchange delay, the exchange might have rate limited you. Stop Gunbot and wait at least 30 minutes before retrying. Make sure all Gunbot files were correctly unzipped. Make sure the IMAP listener is disabled (when not using the TradingView add-on). Try a wired internet connection. Restart your router and/or flush your DNS cache. Invalid response from license server ​ Reason:  Usually a network issue Possible solutions: Try a wired internet connection. Restart your router and/or flush your DNS cache. Error: bind EADDRINUSE null:5000 ​ Reason:  Other process is already using the specified port number Possible solutions: Restart your computer. When other software requires using any of the ports needed for Gunbot, change the ports Gunbot uses in the config.js file. Can't access GUI anymore ​ Reason:  Config error preventing core to properly load Solution: Set  start  false in the GUI section of config.js, with a text editor like Notepad++. Save the file and you should be able to connect to the GUI again. SSL_ERROR_RX_RECORD_TOO_LONG ​ Reason:  https not enabled and the browser forces an https connection Possible solutions: Enable  https  in the config.js file. Visit Gunbot via http, instead of https. Invalid signature ​ Reason:  API issue Possible solutions: Double check your API secret. Make sure your API key is activated on CEX. Make sure you filled in your ClienID, passphrase or password in the exchange connection settings. Errors after successfully starting Gunbot ​ The following orders can prevent trading when occurring very often. When any of these errors only occur intermittently, there is usually no issue that needs solving. Received broken open orders info: retrying again ​ Reason:  Exchange did not send requested order data Possible solutions: Ensure proper internet connectivity. Increase exchange delay. Fetching OHLC again ​ Reason:  There is not enough trading volume to receive the number of requested candles Possible solutions: Try a different setting for  PERIOD Try other trading pairs with more volume. WARNING: BUY order from more than 30 days ago. ​ Reason:  Bought price for asset is unknown or it's impossible to sell an asset due to a wrongly configured  MIN_VOLUME_TO_SELL Possible solutions: Add  BOUGHT_PRICE  as an override for your pair.  Correct the  MIN_VOLUME_TO_SELL  value for your pair. TypeError: Cannot read x of undefined ​ Reason:  Problem with one or your pairs Possible solutions: Make sure that you have not accidentally removed one of your exchanges and still have pairs connected to it.  Check if all of the pairs in your setup actually exist on your exchange and conform to Gunbot pair syntax (BASE-QUOTE). Wait until the exchange finishes possible maintenance. Poloniex: 422 ​ Reason:  Exceeding API rate limit Possible solution: Increase the exchange delay for Poloniex. Stop trying to access exchanges you don't have a license to ​ Reason:  Gunbot core is not running on an already registered key Solution : Stop Gunbot core.  Check your exchanges/pairs and make sure to only have pairs set for exchanges that you already have a registered API key for. Start Gunbot core, verify it starts without errors. Refresh Gunbot in your browser. Go to the ""swap exchanges"" page and make your desired changes. Previous Logs Next Bot does not trade Errors when starting Gunbot INVALID LICENSE FOR (exchange) Please contact your reseller! Unable to connect to exchange Invalid response from license server Error: bind EADDRINUSE null:5000 Can't access GUI anymore SSL_ERROR_RX_RECORD_TOO_LONG Invalid signature Errors after successfully starting Gunbot Received broken open orders info: retrying again Fetching OHLC again WARNING: BUY order from more than 30 days ago. TypeError: Cannot read x of undefined Poloniex: 422 Stop trying to access exchanges you don't have a license to Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
Acronyms, https://wiki.gunthy.org/various/acronyms,"
 
 Skip to main content Gunbot wiki Download on GitHub Introduction Quickstart guide ⏱️ About Setup & general settings How to work with Gunbot Trading strategy options Extra modules Various Acronyms Backups Handling bags Logs Troubleshooting Config marketplace Various Acronyms Acronyms When people talk about Gunbot, they use a lot of Acronyms and other strange terms because it's easier than repeating the full parameter names over and over again. These are some of the common ones. MVTS  - Refers to the parameter MIN_VOLUME_TO_SELL MVTB  - Refers to the parameter MIN_VOLUME_TO_BUY TL  - Refers to the parameter  TRADING_LIMIT ITB  - Refers to the parameter IGNORE_TRADES_BEFORE JSON  - JavaScript Object Notation which is the format in which gunbots config, and other core files are in. If someone is asking ""to see your jsons"", they are more than likely referring to the file which should be named exchange-BASE_QUOTE-state.json, located in your gunbot executable location, after the pair has been cycled at least once. DU  - Double up is a bag management strategy TTO  - Refers to the parameter TSSL_TARGET_ONLY RT  - Reversal Trading, which is another bag management strategy RTSB  - Refers to the parameter RT_SELL_BUYDOWN RTBB  - Refers to the parameter RT_BUY_BUYDOWN BEP  - Break-even point - a different name for average bought price. Previous Tradingview webhooks Next Backups Community translated docs Portugese wiki Russian wiki © Copyright Gunthy 2023. Built with Docusaurus. 
 
"
